<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quakkels.com</title>
    <link>http://quakkels.com/index.xml</link>
    <description>Recent content on Quakkels.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Oct 2019 13:11:57 -0500</lastBuildDate>
    <atom:link href="http://quakkels.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>5 (Persistence)</title>
      <link>http://quakkels.com/training_log/0005/</link>
      <pubDate>Mon, 14 Oct 2019 13:11:57 -0500</pubDate>
      
      <guid>http://quakkels.com/training_log/0005/</guid>
      <description>

&lt;h1 id=&#34;overhead-press-day&#34;&gt;Overhead Press Day&lt;/h1&gt;

&lt;p&gt;Decided to switch up the set and rep scheme just a little. I&amp;rsquo;ve been on a calorie deficit for about a week, and I think I&amp;rsquo;ll be able to keep up with my lifts if I reduce the reps per set, but then increase total sets.&lt;/p&gt;

&lt;h2 id=&#34;superset-1&#34;&gt;Superset 1&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lift&lt;/th&gt;
&lt;th&gt;Weight&lt;/th&gt;
&lt;th&gt;Sets&lt;/th&gt;
&lt;th&gt;Reps&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Press&lt;/td&gt;
&lt;td&gt;155&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Lat Pulldown&lt;/td&gt;
&lt;td&gt;155&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Jumping Jacks&lt;/td&gt;
&lt;td&gt;bw&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;superset-2&#34;&gt;Superset 2&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lift&lt;/th&gt;
&lt;th&gt;Weight&lt;/th&gt;
&lt;th&gt;Sets&lt;/th&gt;
&lt;th&gt;Reps&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SSB Squat&lt;/td&gt;
&lt;td&gt;285&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DB Seated Press&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;50&amp;rsquo; DB Suitcase Carry&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This new rep/set configuration worked well. Kept rest to only 90 seconds for the first superset, and only about 2:30 minutes for the second superset. With warmups and cleaning up I was done in about an hour and five minutes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>4b (Persistence)</title>
      <link>http://quakkels.com/training_log/0004b/</link>
      <pubDate>Sat, 12 Oct 2019 12:45:48 -0500</pubDate>
      
      <guid>http://quakkels.com/training_log/0004b/</guid>
      <description>

&lt;h1 id=&#34;axle-press-day&#34;&gt;Axle Press Day&lt;/h1&gt;

&lt;h2 id=&#34;superset-1&#34;&gt;Superset 1&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lift&lt;/th&gt;
&lt;th&gt;Weight&lt;/th&gt;
&lt;th&gt;Sets&lt;/th&gt;
&lt;th&gt;Reps&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Axle Press&lt;/td&gt;
&lt;td&gt;210&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Axle Press&lt;/td&gt;
&lt;td&gt;230&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This workout was just a little make-up day since I had to cut yesterday&amp;rsquo;s workout short. 210lbs for 2 and 230lbs for 1 are both personal records.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>4 (Persistence)</title>
      <link>http://quakkels.com/training_log/0004/</link>
      <pubDate>Fri, 11 Oct 2019 14:01:48 -0500</pubDate>
      
      <guid>http://quakkels.com/training_log/0004/</guid>
      <description>

&lt;h1 id=&#34;squat-day&#34;&gt;Squat Day&lt;/h1&gt;

&lt;h2 id=&#34;superset-1&#34;&gt;Superset 1&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lift&lt;/th&gt;
&lt;th&gt;Weight&lt;/th&gt;
&lt;th&gt;Sets&lt;/th&gt;
&lt;th&gt;Reps&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Squat&lt;/td&gt;
&lt;td&gt;330&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Turkish Get-up&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Jumping Jacks&lt;/td&gt;
&lt;td&gt;bw&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Only had time for one superset today.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3 (Persistence)</title>
      <link>http://quakkels.com/training_log/0003/</link>
      <pubDate>Thu, 10 Oct 2019 14:20:22 -0500</pubDate>
      
      <guid>http://quakkels.com/training_log/0003/</guid>
      <description>

&lt;h1 id=&#34;bench-day&#34;&gt;Bench Day&lt;/h1&gt;

&lt;h2 id=&#34;superset-1&#34;&gt;Superset 1&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lift&lt;/th&gt;
&lt;th&gt;Weight&lt;/th&gt;
&lt;th&gt;Sets&lt;/th&gt;
&lt;th&gt;Reps&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bench&lt;/td&gt;
&lt;td&gt;215&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Axle Pendlay Row&lt;/td&gt;
&lt;td&gt;160&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Jumping Jacks&lt;/td&gt;
&lt;td&gt;bw&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;superset-2&#34;&gt;Superset 2&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lift&lt;/th&gt;
&lt;th&gt;Weight&lt;/th&gt;
&lt;th&gt;Sets&lt;/th&gt;
&lt;th&gt;Reps&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;18&amp;rdquo; Deadlift&lt;/td&gt;
&lt;td&gt;405&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Isolation DB Curl&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;50&amp;rsquo; DB Suitcase Carry&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Today felt really good. 3x3 with heavy 18&amp;rdquo; deadlifts felt amazing. That&amp;rsquo;s a new 5RM PR. The Pendlay Rows were also a new 8RM PR.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2 (Persistence)</title>
      <link>http://quakkels.com/training_log/0002/</link>
      <pubDate>Tue, 08 Oct 2019 13:29:34 -0500</pubDate>
      
      <guid>http://quakkels.com/training_log/0002/</guid>
      <description>

&lt;h1 id=&#34;deadlift-day&#34;&gt;Deadlift Day&lt;/h1&gt;

&lt;h2 id=&#34;superset-1&#34;&gt;Superset 1&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lift&lt;/th&gt;
&lt;th&gt;Weight&lt;/th&gt;
&lt;th&gt;Sets&lt;/th&gt;
&lt;th&gt;Reps&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Deadlift&lt;/td&gt;
&lt;td&gt;365&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ab Roller&lt;/td&gt;
&lt;td&gt;bw&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Jumping Jacks&lt;/td&gt;
&lt;td&gt;bw&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt; Might adjust this volume on deadlifts. Want to lift heavy, but was really draggin&amp;rsquo; after the second round.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;superset-2&#34;&gt;Superset 2&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lift&lt;/th&gt;
&lt;th&gt;Weight&lt;/th&gt;
&lt;th&gt;Sets&lt;/th&gt;
&lt;th&gt;Reps&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DB Floor Flies&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Pinch Block&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;One Legged Hip Thrust&lt;/td&gt;
&lt;td&gt;bw&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;  First superset much harder the the second.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>1 (Persistence)</title>
      <link>http://quakkels.com/training_log/0001/</link>
      <pubDate>Mon, 07 Oct 2019 07:14:44 -0500</pubDate>
      
      <guid>http://quakkels.com/training_log/0001/</guid>
      <description>

&lt;h1 id=&#34;strict-press-day&#34;&gt;Strict Press Day&lt;/h1&gt;

&lt;h2 id=&#34;superset-1&#34;&gt;Superset 1&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lift&lt;/th&gt;
&lt;th&gt;Weight&lt;/th&gt;
&lt;th&gt;Sets&lt;/th&gt;
&lt;th&gt;Reps&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Press&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Lat Pulldown&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Lat Pulldown&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Jumping Jacks&lt;/td&gt;
&lt;td&gt;bw&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt; Reached failure too soon on Lat Pulldown. Keep weight here for next time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;superset-2&#34;&gt;Superset 2&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lift&lt;/th&gt;
&lt;th&gt;Weight&lt;/th&gt;
&lt;th&gt;Sets&lt;/th&gt;
&lt;th&gt;Reps&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SSB Squat&lt;/td&gt;
&lt;td&gt;275&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DB Seated Press&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;50&amp;rsquo; Sandbag Carry&lt;/td&gt;
&lt;td&gt;165&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt; Second superset was interrupted. Unable to finish third set.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Run Plex on an Ubuntu Server at Home</title>
      <link>http://quakkels.com/posts/run-plex-on-ubuntu-server-at-home/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/run-plex-on-ubuntu-server-at-home/</guid>
      <description>

&lt;p&gt;Recently I&amp;rsquo;ve decided that having limited high quality entertainment choices is better than having endless choices that are of questionable quality. So my household decided to end our Netflix subscription. This decision motivated me to build a private streaming media server for our home. Here is how I created a home media server with Plex and a home server tower.&lt;/p&gt;

&lt;h1 id=&#34;choosing-the-media-server&#34;&gt;Choosing the Media Server&lt;/h1&gt;

&lt;p&gt;There are two popular software options for home media server. &lt;a href=&#34;https://www.plex.tv/&#34; target=&#34;_blank&#34;&gt;Plex&lt;/a&gt; and &lt;a href=&#34;https://kodi.tv/&#34; target=&#34;_blank&#34;&gt;Kodi&lt;/a&gt;. They are both free to use, though Plex does have a premium subscription option to unlock advanced features. These two media servers are very similar, and I believe they&amp;rsquo;ve been forked from the same original open source project.&lt;/p&gt;

&lt;p&gt;I knew my household would be using our PS4 as a client of the media server. This ended up being the detail that helped me make the decision between the two. When I saw that &lt;a href=&#34;https://kodi.onl/ps4/&#34; target=&#34;_blank&#34;&gt;Kodi recommended using the Plex app&lt;/a&gt; for streaming on the PS4, I decided to use Plex directly.&lt;/p&gt;

&lt;h1 id=&#34;choosing-the-hardware&#34;&gt;Choosing the Hardware&lt;/h1&gt;

&lt;p&gt;This Plex media server will need some hardware to run on. In my case, this meant I&amp;rsquo;d need to acquire new computers because everything I have are either not suited to the job (e.g. laptops), are already dedicated to something else (e.g. Raspberry Pi, PS4), or don&amp;rsquo;t exist (i.e. I don&amp;rsquo;t have any other computers).&lt;/p&gt;

&lt;p&gt;So, I needed to get a server, of some type, to run Plex on. I didn&amp;rsquo;t want to spend the time building a server myself. Rather than dealing with potential hardware hiccups, I wanted to focus on the software and networking parts of this project. So I considered these three options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Raspberry Pi&lt;/li&gt;
&lt;li&gt;NAS&lt;/li&gt;
&lt;li&gt;Some kind of home server or PC&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Raspberry Pi was initially the more attractive option. But, I doubt that the little ARM processor will be able to keep up. I could see it getting really bogged down if there&amp;rsquo;s more than one stream, or if any transcoding is needed.&lt;/p&gt;

&lt;p&gt;Next to check out was a NAS. These seemed ideal at first. But their shine dimmed as I dug into prices and specifications. Price was the key factor. I could easily spend around four hundred dollars on an entry level NAS that had no hard disks.&lt;/p&gt;

&lt;p&gt;A quick web search for &amp;ldquo;Home Server&amp;rdquo; brought me to the Dell PowerEdge T30 on sale at Amazon for $376.20. This seemed like a good option. It came with a Intel Xeon E3-1225 v5 3.3GHz processor, 8GB of RAM, and a 1TB HD. This looked like a great value.&lt;/p&gt;

&lt;p&gt;To make sure the T30 would work, I started investigating &lt;a href=&#34;https://support.plex.tv/articles/201774043-what-kind-of-cpu-do-i-need-for-my-server/?fbclid=IwAR3AqFt86n6IpsHazToGFNHzJtOFFfiUrnEP-Drf43GnpmvFQAAKvxBOCK0&#34; target=&#34;_blank&#34;&gt;CPU requirements in more depth&lt;/a&gt;. I wanted my server to handle transcoding two 1080p video files simultaneously. Plex recommended that transcoding one 1080p (10Mbps, H.264) file would need a CPU with a 2000 PassMark score. So, getting a CPU with a 4000 score should theoretically be able to double that number to two. The Xeon E3-1225 v3 has a score of &lt;a href=&#34;https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+E3-1225+v5+%40+3.30GHz&amp;id=2707&#34; target=&#34;_blank&#34;&gt;7,830&lt;/a&gt;. That meets my requirements and has plenty of cushion.&lt;/p&gt;

&lt;p&gt;The T30 had the processing power, had the 1TB disk, was budget friendly, and already built. It didn&amp;rsquo;t need anything more. I just had to un-box it, plug in power and some initial peripherals (to handle OS installation) and connect it to my network via Ethernet.&lt;/p&gt;

&lt;h1 id=&#34;choosing-the-operating-system&#34;&gt;Choosing the Operating System&lt;/h1&gt;

&lt;p&gt;I didn&amp;rsquo;t have any desire to mess with Windows for this project. I&amp;rsquo;ve been using Linux for most of my recent projects and I&amp;rsquo;d like to continue that trend. There&amp;rsquo;s also nothing about Plex that requires Windows software.&lt;/p&gt;

&lt;p&gt;I settled on using Ubuntu Server. It&amp;rsquo;s a widely used distribution of Linux that has a lot of documentation available.&lt;/p&gt;

&lt;h1 id=&#34;install-ubuntu-server&#34;&gt;Install Ubuntu Server&lt;/h1&gt;

&lt;p&gt;Download the ISO from &lt;a href=&#34;https://ubuntu.com/download/server&#34; target=&#34;_blank&#34;&gt;their website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once it has finished downloading, make a boot disk with it. This is very simple with Windows 10.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Place a write-able disk in your disk drive.&lt;/li&gt;
&lt;li&gt;Right click on the Ubuntu ISO file and select &amp;ldquo;Burn disk image.&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/plex01-image-dvd-on-windows.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Get the boot disk in to the DVD drive of your server. Then with the disk in the drive, turn on the server.&lt;/p&gt;

&lt;p&gt;As the server boots, smash that F12 key to enter BIOS to Boot from the DVD drive.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Another option is to create a bootable thumb drive using a tool like Balena Etcher to image the drive. I used writeable DVDs because I have so many left over from the 2000s that I just might as well use them up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ubuntu&amp;rsquo;s documentation is very good. Follow these &lt;a href=&#34;https://tutorials.ubuntu.com/tutorial/tutorial-install-ubuntu-server#0&#34; target=&#34;_blank&#34;&gt;directions for installing Ubuntu Server&lt;/a&gt;. They have screenshots and instructions of their installation screens, so I&amp;rsquo;m not going to go into too many details here.&lt;/p&gt;

&lt;p&gt;When asked, &lt;strong&gt;be sure to install SSH for remote access&lt;/strong&gt;. This allows you to manage the server from your regular workstation. So you can put your server out of the way. And, you don&amp;rsquo;t have to worry about connecting monitors or keyboards to work on it. Finish off the installation by restarting the box.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve finished installing Ubuntu Server it should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be connected to the network via Ethernet&lt;/li&gt;
&lt;li&gt;Have a Name (mine is named &lt;code&gt;media&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Have a User on the server (my user is &lt;code&gt;quakkels&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Have SSH installed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, now look in your router&amp;rsquo;s connected devices to find your server&amp;rsquo;s IP address on your network.&lt;/p&gt;

&lt;p&gt;Log in to your server from your main workstation via SSH:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh 192.168.1.11 -l quakkels
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use your server&amp;rsquo;s local network IP address and your user&amp;rsquo;s username in the command above.&lt;/p&gt;

&lt;p&gt;The next thing we need to do is install Samba on the server.&lt;/p&gt;

&lt;h2 id=&#34;install-samba&#34;&gt;Install Samba&lt;/h2&gt;

&lt;p&gt;I want to be able to access the media folder that&amp;rsquo;s on my server from my laptop. I need Samba installed in Ubuntu to do that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install samba
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add a user to Samba. I&amp;rsquo;ll use the &lt;code&gt;quakkels&lt;/code&gt; user.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo smbpasswd -a quakkels
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, create a folder to share.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~
$ mkdir library
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, edit the configuration file with your preferred editor. I&amp;rsquo;m using Nano.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nano /etc/samba/smb.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Scroll down to the end of the file and add these lines.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[library]
   path = /home/quakkels/library
   available = yes
   valid users = quakkels
   read only = no
   browsable = yes
   public = yes
   writeable = yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace &lt;code&gt;library&lt;/code&gt; with the name of your own shared folder and &lt;code&gt;quakkels&lt;/code&gt; with your own user.&lt;/p&gt;

&lt;p&gt;Save the file and exit the editor.&lt;/p&gt;

&lt;p&gt;Restart the smb daemon to apply the configuration changes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo service smbd restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So at this point the share should be working and accessible on your network. Use Windows File Explorer to test it.&lt;/p&gt;

&lt;p&gt;I navigated to \media\library and logged in with the Samba user &lt;code&gt;quakkels&lt;/code&gt; and placed a file. Test succeeded!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/plex03-samba-network-share.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;install-the-plex-media-server&#34;&gt;Install the Plex Media Server&lt;/h1&gt;

&lt;p&gt;Unfortunately, Plex is not available via &lt;code&gt;apt-get&lt;/code&gt; in Ubuntu. But the Plex website does lay out a process for &lt;a href=&#34;https://support.plex.tv/articles/200288586-installation/&#34; target=&#34;_blank&#34;&gt;installing the server on Linux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Start by downloading the &lt;code&gt;.deb&lt;/code&gt; file for Plex. I found the &lt;code&gt;.deb&lt;/code&gt; file available here: &lt;code&gt;https://downloads.plex.tv/plex-media-server-new/1.16.5.1554-1e5ff713d/debian/plexmediaserver_1.16.5.1554-1e5ff713d_amd64.deb&lt;/code&gt; and I&amp;rsquo;ll be using that URL with &lt;code&gt;wget&lt;/code&gt; in Ubuntu to download it directly to the server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~
$ wget https://downloads.plex.tv/plex-media-server-new/1.16.5.1554-1e5ff713d/debian/plexmediaserver_1.16.5.1554-1e5ff713d_amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, once the &lt;code&gt;.deb&lt;/code&gt; packaged has finished downloading, we can install it with &lt;code&gt;dpkg&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo dpkg -i plexmediaserver_1.16.5.1554-1e5ff713d_amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can navigate to the Plex web site from a computer on your network by going to &lt;code&gt;http://{your-servers-ip}:32400/web/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Plex is now running. You can follow Plex documentation to add Plex repositories for future updates, and for adding your media to Plex libraries.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/plex04-web-site.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://itsfoss.com/install-deb-files-ubuntu/&#34; target=&#34;_blank&#34;&gt;3 Ways to Install Deb Files on Ubuntu Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itsfoss.com/install-plex-ubuntu/&#34; target=&#34;_blank&#34;&gt;How to Install and Configure Plex on Ubuntu Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.howtogeek.com/176471/how-to-share-files-between-windows-and-linux/&#34; target=&#34;_blank&#34;&gt;How to Share Files Between Windows and Linux&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.samba.org/&#34; target=&#34;_blank&#34;&gt;Samba&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.plex.tv/media-server-downloads/&#34; target=&#34;_blank&#34;&gt;Plex Media Server Downloads&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.plex.tv/articles/200288586-installation/&#34; target=&#34;_blank&#34;&gt;Plex Media Server Installation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Mobile Development and Xamarin</title>
      <link>http://quakkels.com/posts/getting-started-with-mobile-development-and-xamarin/</link>
      <pubDate>Tue, 04 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/getting-started-with-mobile-development-and-xamarin/</guid>
      <description>

&lt;p&gt;Xamarin enables programmers to write native mobile applications for both Android and iOS using C# and free development tools like Visual Studio Community Edition. This means that if you&amp;rsquo;re invested in the .NET ecosystem and the C# language, you can write cross-platform mobile applications using technology that&amp;rsquo;s already familiar to you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A note on development for iOS:&lt;/strong&gt; You will need a mac in order to build iOS versions of the app. I don&amp;rsquo;t have a Mac available, so I&amp;rsquo;ll be getting started with a cross-platform project, but I&amp;rsquo;ll just be using Windows and testing the Android version.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Visit &lt;a href=&#34;https://visualstudio.microsoft.com/&#34;&gt;https://visualstudio.microsoft.com/&lt;/a&gt; to download Visual Studio Community (the free version) and install it. Be sure to select Mobile Development Tools during installation so Xamarin projects will be available.&lt;/p&gt;

&lt;h2 id=&#34;intended-audience&#34;&gt;Intended Audience&lt;/h2&gt;

&lt;p&gt;This is written for C# programmers who want to start working with mobile apps. If you&amp;rsquo;re not somewhat familiar with using Visual Studio, C#, or XML then this may be challenging to follow.&lt;/p&gt;

&lt;h2 id=&#34;mvvm&#34;&gt;MVVM&lt;/h2&gt;

&lt;p&gt;Before we create the first project, a quick word on practices. There are many ways of organizing an app, and one of the best practices is to use the MVVM pattern. MVVM stands for Model, View, View Model.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt; (Data)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;View&lt;/strong&gt; (Presentation)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;View Model&lt;/strong&gt; (Business Rules)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By keeping our data in the Model, our presentation code in the View, and our business logic in the View Model we&amp;rsquo;re keeping concerns separate. This will make the project simpler to understand and maintain as it grows.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s funny how different ecosystems have different names for very similar concepts. Django has Model/View/Template. ASP.NET MVC has Model/View/Controller. XAML has MVVM. The consistent core idea is to separate concerns to make things simple to understand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;create-a-new-project&#34;&gt;Create a New Project&lt;/h2&gt;

&lt;p&gt;In Visual Studio select File &amp;gt; New &amp;gt; Project from the menu.&lt;/p&gt;

&lt;p&gt;In the New Project Dialog select the category Installed &amp;gt; Visual C# &amp;gt; Cross-Platform from the list on the left. Then choose the Mobile App (Xamarin.Forms) project type and name it. I named mine &amp;ldquo;Lavender&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/xamarin-create-project.png&#34; alt=&#34;Create a Xamarin project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then in the next dialog, select Blank.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/xamarin-create-cross-platform-project.png&#34; alt=&#34;Create a Xamarin cross-platform mobile project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that &amp;ldquo;Code Sharing Strategy&amp;rdquo; is .NET Standard. This is very interesting if you&amp;rsquo;re familiar with the new .NET Standard approach that Microsoft is implementing for the .NET ecosystem. .NET Core and ASP.NET are both proceeding using the same .NET Standard libraries supporting them. Having this option for Xamarin projects means that .NET programmers will have access to the same libraries for mobile that they&amp;rsquo;re used to using in their other projects.&lt;/p&gt;

&lt;p&gt;Now we have a solution called Lavender and three projects in that solution. The main Lavender project, and a project each for Android and iOS.&lt;/p&gt;

&lt;p&gt;Create folders inside the Lavender project to support the MVVM pattern. Create Models, Views, and ViewModels folders. To do this, right click on the Lavender project (not the Lavender solution,) and go to Add &amp;gt; New Folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/xamarin-create-mvvm-folders.png&#34; alt=&#34;Create MVVM folders&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When Visual Studio created the Lavender project, it automatically created a view for us called &lt;code&gt;MainPage.xaml&lt;/code&gt;, and it has &lt;code&gt;MainPage.xaml.cs&lt;/code&gt; behind it. Move those two files into the Views folder by dragging and dropping &lt;code&gt;MainPage.xaml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/xamarin-move-mainpage-into-views-folder.png&#34; alt=&#34;Move MainPage.xaml into Views folder&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;MainPage.xaml&lt;/code&gt; and give it this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&amp;quot;http://xamarin.com/schemas/2014/forms&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             xmlns:local=&amp;quot;clr-namespace:Lavender&amp;quot;
             x:Class=&amp;quot;Lavender.MainPage&amp;quot;&amp;gt;
  &amp;lt;ContentPage.Content&amp;gt;
    &amp;lt;StackLayout&amp;gt;
      &amp;lt;Label Text=&amp;quot;Hello World!&amp;quot; FontSize=&amp;quot;Large&amp;quot; /&amp;gt;
    &amp;lt;/StackLayout&amp;gt;
  &amp;lt;/ContentPage.Content&amp;gt;
&amp;lt;/ContentPage&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A XAML &lt;code&gt;&amp;lt;ContentPage&amp;gt;&lt;/code&gt; can only have one object in it. But, the reason we are using the &lt;code&gt;&amp;lt;ContentPage.Content&amp;gt;&lt;/code&gt; object is because it can contain multiple objects. The &lt;code&gt;&amp;lt;StackLayout&amp;gt;&lt;/code&gt; will literally stack objects either vertically (by default) or horizontally. The &lt;code&gt;&amp;lt;Label&amp;gt;&lt;/code&gt; object is easiest way to get text to display on screen.&lt;/p&gt;

&lt;p&gt;Save the file, then launch the debugger. The first time launching in the emulator may take some time&amp;hellip; maybe several minutes&amp;hellip; but eventually you will see it running.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since this is running on Windows without a Mac, the project that runs needs to be the Lavender.Android project. Also, when you run this, you&amp;rsquo;ll want to make sure you have the Android SDK installed for the version(s) of Android you&amp;rsquo;re targeting.
To manage your SDK tools, you can find a button for &amp;ldquo;Open Android SDK Manager&amp;rdquo; in the toolbar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/xamarin-manage-android-sdks.png&#34; alt=&#34;Manage Android SDKs&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will see this once the project finishes building, the emulator starts, and the app installs in the emulator:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/xamarin-debug-mobile-project.png&#34; alt=&#34;Debugging a Xamarin project&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;add-data-binding-between-the-view-and-the-view-model&#34;&gt;Add Data Binding Between the View and the View Model&lt;/h2&gt;

&lt;p&gt;Add a label control that will bind to the &lt;code&gt;Name&lt;/code&gt; attribute of a view model. Update &lt;code&gt;MainPage.xaml&lt;/code&gt; to have this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&amp;quot;http://xamarin.com/schemas/2014/forms&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             xmlns:local=&amp;quot;clr-namespace:Lavender&amp;quot;
             x:Class=&amp;quot;Lavender.MainPage&amp;quot;&amp;gt;
  &amp;lt;ContentPage.Content&amp;gt;
    &amp;lt;StackLayout&amp;gt;
      &amp;lt;Label Text=&amp;quot;{Binding Name,StringFormat=&#39;Hello, \{0\}!&#39;}&amp;quot; FontSize=&amp;quot;Large&amp;quot; /&amp;gt;
    &amp;lt;/StackLayout&amp;gt;
  &amp;lt;/ContentPage.Content&amp;gt;
&amp;lt;/ContentPage&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s worth highlighting that these UI changes are being made in the shared library. This is reusable code that both Android and iOS will leverage. The Android and iOS specific projects are &lt;em&gt;not&lt;/em&gt; being modified. Yet, the controls being displayed are the same native controls that you would get if you were building this app for Android using Java or for iOS using Objective-C or Swift. Not only is the code in a shared library, but the executable is &lt;em&gt;not&lt;/em&gt; running in a VM like would be the case for portable JavaScript solutions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create a new class in the &lt;code&gt;ViewModels&lt;/code&gt; folder. Call it &lt;code&gt;MainPageViewModel.cs&lt;/code&gt; and put this code inside:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace Lavender.ViewModels
{
  public class MainPageViewModel
  {
    public string Name { get; set; }

    public MainPageViewModel()
    {
      Name = &amp;quot;Anonymous&amp;quot;;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Name&lt;/code&gt; property is what we&amp;rsquo;ll use for data binding. And, we&amp;rsquo;re setting the value to &lt;code&gt;Anonymous&lt;/code&gt; for now.&lt;/p&gt;

&lt;p&gt;Then, update the &lt;code&gt;MainPage.xaml.cs&lt;/code&gt; code-behind file to use the &lt;code&gt;MainPageViewModel&lt;/code&gt; class as its binding context.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Lavender.ViewModels;
using Xamarin.Forms;

namespace Lavender
{
  public partial class MainPage : ContentPage
  {
    private readonly MainPageViewModel viewModel;

    public MainPage()
    {
      InitializeComponent();
      viewModel = new MainPageViewModel();
      BindingContext = viewModel;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compile and debug the project with that change. You will see it in the emulator.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/xamarin-hello-anonymous.png&#34; alt=&#34;Xamarin Hello Anonymous&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This shows that &lt;code&gt;MainPageViewModel&lt;/code&gt; is being bound as the context in &lt;code&gt;MainPage.xaml.cs&lt;/code&gt; and the value that was set on initialization is &amp;ldquo;Anonymous&amp;rdquo; and that is being passed to the &lt;code&gt;MainPage.xaml&lt;/code&gt; view correctly.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s do something with the value entered by the user.&lt;/p&gt;

&lt;h2 id=&#34;add-form-to-let-the-user-update-their-name&#34;&gt;Add Form to Let the User Update Their Name&lt;/h2&gt;

&lt;p&gt;Update &lt;code&gt;MainPage.xaml&lt;/code&gt; to add form controls allowing the user to enter and submit their actual name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&amp;quot;http://xamarin.com/schemas/2014/forms&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             xmlns:local=&amp;quot;clr-namespace:Lavender&amp;quot;
             x:Class=&amp;quot;Lavender.MainPage&amp;quot;&amp;gt;
  &amp;lt;ContentPage.Content&amp;gt;
    &amp;lt;StackLayout&amp;gt;
      &amp;lt;Label Text=&amp;quot;{Binding Name,StringFormat=&#39;Hello, \{0\}!&#39;}&amp;quot; FontSize=&amp;quot;Large&amp;quot; /&amp;gt;
      &amp;lt;Label Text=&amp;quot;Name&amp;quot; /&amp;gt;
      &amp;lt;Entry Text=&amp;quot;{Binding NameEntry}&amp;quot; /&amp;gt;
      &amp;lt;Button x:Name=&amp;quot;Button&amp;quot; Text=&amp;quot;Submit&amp;quot; Command=&amp;quot;{Binding SubmitCommand}&amp;quot; /&amp;gt;
    &amp;lt;/StackLayout&amp;gt;
  &amp;lt;/ContentPage.Content&amp;gt;
&amp;lt;/ContentPage&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two elements that bind to properties that we haven&amp;rsquo;t created yet. &lt;code&gt;&amp;lt;Entry Text=&amp;quot;{Binding NameEntry}&amp;quot; /&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Button x:Name=&amp;quot;Button&amp;quot; Text=&amp;quot;Submit&amp;quot; Command=&amp;quot;{Binding SubmitCommand}&amp;quot; /&amp;gt;&lt;/code&gt; will require us to change the view model.&lt;/p&gt;

&lt;p&gt;But, before we make changes to the view model, we need to create a new class that will facilitate notifying the view when the data in the view model changes.&lt;/p&gt;

&lt;p&gt;Create a new file in the &lt;code&gt;ViewModels&lt;/code&gt; folder and call it &lt;code&gt;ViewModelBase.cs&lt;/code&gt;. Then put this code inside:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace Lavender.ViewModels
{
  public abstract class ViewModelBase : INotifyPropertyChanged
  {

    public event PropertyChangedEventHandler PropertyChanged;
    protected void OnPropertyChanged([CallerMemberName] string propertyName = &amp;quot;&amp;quot;)
    {
      var changed = PropertyChanged;
      if (changed == null)
        return;

      changed.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    protected bool SetProperty&amp;lt;T&amp;gt;(ref T backingStore, T value,
      [CallerMemberName]string propertyName = &amp;quot;&amp;quot;,
      Action onChanged = null)
    {
      if (EqualityComparer&amp;lt;T&amp;gt;.Default.Equals(backingStore, value))
      {
        return false;
      }

      backingStore = value;
      onChanged?.Invoke();
      OnPropertyChanged(propertyName);
      return true;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This abstract class gives us the &lt;code&gt;SetProperty&amp;lt;T&amp;gt;()&lt;/code&gt; method which both changes the property&amp;rsquo;s value, &lt;em&gt;and&lt;/em&gt; it notifies the UI so it knows to display the new value.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s update &lt;code&gt;MainPageViewModel.cs&lt;/code&gt; to use this new abstract class. We&amp;rsquo;ll also add the new properties that the view needs for binding.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Windows.Input;
using Xamarin.Forms;

namespace Lavender.ViewModels
{
  public class MainPageViewModel : ViewModelBase
  {
    public string NameEntry { get; set; }

    private string _name;
    public string Name
    {
      get { return _name; }
      set { SetProperty(ref _name, value); }
    }

    public ICommand SubmitCommand { get; }

    public MainPageViewModel()
    {
      Name = &amp;quot;Anonymous&amp;quot;;
      SubmitCommand = new Command(() =&amp;gt; { Name = NameEntry; });
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;MainPageViewModel&lt;/code&gt; now inherits from &lt;code&gt;ViewModelBase&lt;/code&gt; which give us the &lt;code&gt;SetProperty()&lt;/code&gt; method. This class also has new properties now: &lt;code&gt;NameEntry&lt;/code&gt; to support the name entry field, and &lt;code&gt;SubmitCommand&lt;/code&gt; to support the submit button. The property &lt;code&gt;Name&lt;/code&gt; has also been updated to use the &lt;code&gt;SetProperty()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;When we run the debugger, now we see this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/xamarin-hello-anonymous-form.png&#34; alt=&#34;Xamarin mobile app with a form to enter the user&#39;s name.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And submitting a name shows this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/xamarin-hello-anonymous-form-showing-name.png&#34; alt=&#34;Xamarin mobile app with a form showing user&#39;s name.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There you have it. These are the basic building blocks to get started building mobile applications using Xamarin.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Home Gym Outfitting; Train with a Sled</title>
      <link>http://quakkels.com/posts/home_gym_outfitting_train_with_a_sled/</link>
      <pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/home_gym_outfitting_train_with_a_sled/</guid>
      <description>&lt;p&gt;Outfitting a home gym with a sled for drags and arm-over-arm pulls is simple. You don&amp;rsquo;t need to spend hundreds of dollars on equipment or gym memberships in order to train with a sled. You also don&amp;rsquo;t really need any tools or handyman skills to get started.&lt;/p&gt;

&lt;p&gt;When I first wanted to add arm-over-arm pulls to work my cardio, grip, arms, and back, I looked around and found a &lt;a target=&#34;_blank&#34; href=&#34;https://www.roguefitness.com/conditioning/strength-equipment/sleds&#34;&gt;few different options&lt;/a&gt;. And some of them were rather economical. However, most are still priced near a hundred dollars and they don&amp;rsquo;t include a rope nor a strap long enough for arm-over-arm pulls, which I&amp;rsquo;d have to purchase separately.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a simpler and cheaper alternative to those econo sleds. It can be found at the local hardware store.&lt;/p&gt;

&lt;p&gt;This tow strap cost me just about ten dollars.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/new_tow_strap.png&#34; alt=&#34;20&#39; Tow Strap&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When I combine it with a few of my bumper plates, it does exactly what I need. Ta-da! A &amp;ldquo;sled&amp;rdquo; for my home gym.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/first_sled_experiment.png&#34; alt=&#34;Arm-over-arm pull with a 20&#39; tow strap&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This first experiment was awesome. It was easy to set up and it worked. Though, I did I noticed wear on the strap underneath the bumper plates. At first I thought it was no big deal. But if I had to replace the fraying strap a few times my costs would eventually be comparable with if I had bought an actual post style sled.&lt;/p&gt;

&lt;p&gt;So to address the wear on the strap, I made a sheath using a an easily replaceable resource I frequently have lying around; a piece of cardboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/sled_experiment_with_cardboard_sheeth.png&#34; alt=&#34;A more resilient sled using a 20&#39; tow strap&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m really happy with this setup. The cardboard works well on my reasonably smooth basement floor. It will eventually wear, but with the amount of online shopping my family does we&amp;rsquo;re never lacking fresh cardboard. Though, if the dragging surface were rougher, I&amp;rsquo;d imagine I&amp;rsquo;d have to use a different solution.&lt;/p&gt;

&lt;p&gt;Adding useful pieces of equipment to a home gym doesn&amp;rsquo;t have to be expensive or complicated. And, simple additions like this keep workouts engaging and fun.&lt;/p&gt;

&lt;p&gt;Benefits of sled training with a tow strap are numerous.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Simple.&lt;/strong&gt; Really hard to mess up.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cheap.&lt;/strong&gt; Just time, a stack of weights, and a ten dollar tow strap is all the investment you need to get started.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Safe.&lt;/strong&gt; You can do these by yourself. If you fail, there&amp;rsquo;s nothing that can fall and crush you.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Versatile.&lt;/strong&gt; You can do these heavy for strength. You can do these lighter for cardio. You can drag it forward or backward. Or, you can pull it arm-over-arm. Using just a tow strap you have enough equipment for a full body workout.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Things you can do with this include &lt;a href=&#34;https://youtu.be/MW5HfC5V_YI&#34; target=&#34;_blank&#34;&gt;Arm-Over-Arm Pulls&lt;/a&gt;, and &lt;a href=&#34;https://www.youtube.com/watch?v=KKEceC_t2bY&#34; target=&#34;_blank&#34;&gt;Reverse Sled Drag&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Django</title>
      <link>http://quakkels.com/posts/getting-started-python-django-vs-code/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/getting-started-python-django-vs-code/</guid>
      <description>

&lt;p&gt;Django is a Python framework that I&amp;rsquo;ve written about before. I&amp;rsquo;ve &lt;a href=&#34;http://quakkels.com/posts/asp-net-mvc-compared-to-dango/&#34;&gt;compared Django to ASP.NET MVC&lt;/a&gt;. But, I didn&amp;rsquo;t go into much detail about how to actually use Django to create a data driven website. That&amp;rsquo;s what I&amp;rsquo;ll cover now.&lt;/p&gt;

&lt;p&gt;The goal for this &amp;lsquo;Getting Started&amp;rsquo; project is to get familiar with the basics of developing data driven web applications using Django, Models, Views, Templates, URLs, and Forms. By the end we&amp;rsquo;ll have a simple contact form that saves user submissions to the database, and displays that data to an administrator user. It will not be a completed site, but it will introduce basic the building blocks of website development in Django.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like to refer to the end goal of this article, you can &lt;a href=&#34;https://github.com/quakkels/companionresource_djangosite&#34; target=&#34;_blank&#34;&gt;find it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Windows 10

&lt;ul&gt;
&lt;li&gt;Or your own favorite OS. But I&amp;rsquo;ll be writing from a Windows perspective.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Python 3.6 or above.&lt;/li&gt;
&lt;li&gt;VS Code with Microsoft&amp;rsquo;s Python extension installed.

&lt;ul&gt;
&lt;li&gt;Or your own favorite Python IDE/editor, but I&amp;rsquo;ll be writing from the VS Code perspective&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;create-project&#34;&gt;Create Project&lt;/h2&gt;

&lt;p&gt;Make the project directory and navigate inside.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; mkdir django-project &amp;amp;&amp;amp; cd django-project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a Virtual Environment to isolate project specific dependencies.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; python -m venv django-env
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Activate the venv. (This is the Windows command.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; django-env\Scripts\activate.bat
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Once inside an activated venv, you can leave it to work on other things by using the &lt;code&gt;deactivate&lt;/code&gt; command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Install Django inside the active venv. (You don&amp;rsquo;t want to install packages globally. Make sure that the venv is active.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; pip install django
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;django-admin&lt;/code&gt; to create the new Django application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; django-admin startproject djangosite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That created a new folder called &lt;code&gt;djangosite&lt;/code&gt; and it placed boilerplate files inside. &lt;code&gt;manage.py&lt;/code&gt; is one of those files and it&amp;rsquo;s what will used from now on to run Django commands.&lt;/p&gt;

&lt;p&gt;Run the development Django server from inside the site&amp;rsquo;s folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; cd djangosite
(django-env)&amp;gt; python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visit localhost:8000 to verify that it&amp;rsquo;s working. Then exit the server with Ctrl+Break.&lt;/p&gt;

&lt;p&gt;When the Django server ran, Django automatically created a db.sqlite3 file in the project folder. &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#34; target=&#34;_blank&#34;&gt;Read more about configuring different database backends&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Use VS Code to open the &lt;code&gt;django-project&lt;/code&gt; folder that houses the virtual environment folder and the Django app folder. This can be done from the terminal, or manually inside VS Code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; code ..\. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open &lt;code&gt;djangosite\urls.py&lt;/code&gt;. The imports for Django will probably be shown as missing modules because Django was installed in the venv and not globally. to fix this, press &lt;code&gt;ctrl+shift+p&lt;/code&gt; then execute the command &lt;code&gt;Python: Select Interpretter&lt;/code&gt;. Find &lt;code&gt;.\django-env\Scripts\python.exe&lt;/code&gt; from the list and select it. Then VS Code will stop showing the Django imports as errors.
&amp;gt; For more VS Code information visit &lt;a href=&#34;https://code.visualstudio.com/docs/python/python-tutorial&#34; target=&#34;_blank&#34;&gt;Getting Started with Python in VS Code&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;add-a-custom-django-view&#34;&gt;Add a Custom Django View&lt;/h2&gt;

&lt;p&gt;To add a &amp;lsquo;Hello World&amp;rsquo; page, create a new file in &lt;code&gt;django-project\djangosite\djangosite&lt;/code&gt; called &lt;code&gt;views.py&lt;/code&gt;. Add the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.http import HttpResponse

def welcome(request):
  return HttpResponse(&amp;quot;Hello, World!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To tell Django when to execute this welcome view, edit &lt;code&gt;urls.py&lt;/code&gt; so it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, re_path

from .views import welcome

urlpatterns = [
    path(&#39;admin/&#39;, admin.site.urls),
    re_path(&#39;^$&#39;, welcome)
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Browse to localhost:8000 and see the custom message.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/python_django_hello_world.png&#34; alt=&#34;Django Hello World&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s take a quick break to go over some Django concepts.&lt;/p&gt;

&lt;h3 id=&#34;app&#34;&gt;App&lt;/h3&gt;

&lt;p&gt;A Django App is a python package that acts as a little web application of its own. With it&amp;rsquo;s own Models, Views, Templates, and URLs. Most Django sites use several apps. It is also possible to write an app such that it can be reused in other Django projects.&lt;/p&gt;

&lt;h3 id=&#34;model&#34;&gt;Model&lt;/h3&gt;

&lt;p&gt;A Django Model is a data model that maps to a database table. This introduces the concept of &lt;em&gt;Migrations&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;migrations&#34;&gt;Migrations&lt;/h3&gt;

&lt;p&gt;The model will usually change as the site is developed.
A migration will update the corresponding database table from previous versions to the new version of the code. As migrations get more complicated, there may be need to write custom migration scripts.&lt;/p&gt;

&lt;h3 id=&#34;views&#34;&gt;Views&lt;/h3&gt;

&lt;p&gt;Views in Django are like Controllers in ASP.NET MVC. They are what connect a model with a template.&lt;/p&gt;

&lt;h3 id=&#34;templates&#34;&gt;Templates&lt;/h3&gt;

&lt;p&gt;Templates in Django are like Views in ASP.NET MVC. They are the display layer; the HTML that will render in the browser.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;add-a-custom-django-model&#34;&gt;Add a Custom Django Model&lt;/h2&gt;

&lt;p&gt;Show migrations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py showmigrations
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Execute those migrations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create a new Django app. For this example, it will handle the functionality for a contact form.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py startapp contactform
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Move into the new &lt;code&gt;contactform&lt;/code&gt; directory and notice that Django has created a bunch of boilerplate code for us.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; cd contactform
(django-env)&amp;gt; dir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add this new app to the Django site. Open &lt;code&gt;settings.py&lt;/code&gt; in the &lt;code&gt;djangosite&lt;/code&gt; folder, and add the &lt;code&gt;contactform&lt;/code&gt; app to the list of installed apps. &lt;code&gt;INSTALLED_APPS&lt;/code&gt; should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INSTALLED_APPS = [
    &#39;django.contrib.admin&#39;,
    &#39;django.contrib.auth&#39;,
    &#39;django.contrib.contenttypes&#39;,
    &#39;django.contrib.sessions&#39;,
    &#39;django.contrib.messages&#39;,
    &#39;django.contrib.staticfiles&#39;,
    &#39;contactform&#39;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, open the &lt;code&gt;models.py&lt;/code&gt; file in the contact form app and add the class that will represent the contact form.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.db import models

class ContactForm(models.Model):
    HOW_DID_YOU_HEAR_ABOUT_US_CHOICES = (
        (&#39;SE&#39;, &#39;Search Engine&#39;),
        (&#39;Q&#39;, &#39;Quakkels.com&#39;),
        (&#39;F&#39;, &#39;From a friend&#39;),
        (&#39;O&#39;, &#39;Other&#39;)
    )

    name = models.CharField(max_length=50)
    email = models.EmailField(max_length=50)
    comments = models.CharField(max_length=500)
    how_did_you_hear_about_us = models.CharField(max_length=2, choices=HOW_DID_YOU_HEAR_ABOUT_US_CHOICES)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;More information about Django models can be found &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/db/models/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After the model is saved, create the new migration script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py makemigrations
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the migration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;If you&amp;rsquo;re curious about what the SQLite database tables look like, you can download something like &lt;a href=&#34;https://sqlitebrowser.org/dl/&#34; target=&#34;_blank&#34;&gt;DB Browser for SQLite&lt;/a&gt;. Table names will be named after the model with the app name as the prefix. So the table for ContactForm will be called &lt;code&gt;contactform_contactform&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;register-custom-model-in-admin&#34;&gt;Register Custom Model in Admin&lt;/h2&gt;

&lt;p&gt;To make contact form submissions available to be read by a site administrator, &lt;code&gt;ContactForm&lt;/code&gt; needs to be registered in the admin area.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;contactform\admin.py&lt;/code&gt; and add this code to register the ContactForm model.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.contrib import admin
from .models import ContactForm

@admin.register(ContactForm)
class ContactFormAdmin(admin.ModelAdmin):
    list_display = (&#39;name&#39;, &#39;email&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a super user for logging into the site&amp;rsquo;s admin area.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when the development server runs, you&amp;rsquo;ll be able to view and edit ContactForms in the Admin area by navigating to localhost:8000/admin and using the new super user to log in.&lt;/p&gt;

&lt;h2 id=&#34;create-a-custom-django-template&#34;&gt;Create a Custom Django Template&lt;/h2&gt;

&lt;p&gt;Double check the terminal&amp;rsquo;s working directory is the &lt;code&gt;contactform&lt;/code&gt; folder inside of &lt;code&gt;djangosite&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; pwd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Switch to &lt;code&gt;contactform&lt;/code&gt; if it&amp;rsquo;s not the working directory.&lt;/p&gt;

&lt;p&gt;Create a new folder for custom templates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; mdkir templates
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In VS Code, create a file in the new templates folder called &lt;code&gt;contactform.html&lt;/code&gt; for the contact form. Put the following code in the file for now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
      &amp;lt;title&amp;gt;Contact Form&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;Contact Form&amp;lt;/h1&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, update &lt;code&gt;contactform\views.py&lt;/code&gt; with this code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.shortcuts import render

def contactform(request):
    return render(request, &amp;quot;contactform.html&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the &lt;code&gt;render()&lt;/code&gt; function is used here instead of returning &lt;code&gt;HttpResponse()&lt;/code&gt; directly like the &amp;ldquo;Hello, World!&amp;rdquo; view does. The &lt;code&gt;render()&lt;/code&gt; function will use the template for the html.&lt;/p&gt;

&lt;p&gt;To make the template visible from the browser, we need to route requests to the view based on the URL.&lt;/p&gt;

&lt;p&gt;Use VS Code to create a &lt;code&gt;urls.py&lt;/code&gt; file inside the &lt;code&gt;contactform&lt;/code&gt; folder. Put this code inside it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.urls import re_path

from .views import contactform

urlpatterns = [
    re_path(&#39;contactform$&#39;, contactform)
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;re_path()&lt;/code&gt; method uses a string as a regular expression. The &lt;code&gt;&#39;contactform$&#39;&lt;/code&gt; ensures that it only matches on paths that end in &lt;code&gt;contactform&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;djangosite\urls.py&lt;/code&gt; is what Django uses to route urls, it needs to be aware of the new &lt;code&gt;contactform\urls.py&lt;/code&gt;. Update it with this code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, re_path, include

from .views import welcome

urlpatterns = [
    path(&#39;admin/&#39;, admin.site.urls),
    re_path(&#39;^contactform/&#39;, include(&#39;contactform.urls&#39;)),
    path(&#39;&#39;, welcome),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&#39;^contactform/&#39;&lt;/code&gt; is a regular expression that makes sure matching paths begin with &lt;code&gt;contactform&lt;/code&gt;. This is a prefix for everything in the contactform app. So the complete matching path will be &lt;code&gt;localhost:8000/contactform/contactform&lt;/code&gt;. For more information read the &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/http/urls/&#34; target=&#34;_blank&#34;&gt;Django documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;create-a-form&#34;&gt;Create a Form&lt;/h1&gt;

&lt;p&gt;Create a new file in &lt;code&gt;contactform&lt;/code&gt; called &lt;code&gt;forms.py&lt;/code&gt; and put this code in it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.forms import ModelForm
from .models import ContactForm

class ContactFormForm(ModelForm):
    class Meta:
        model = ContactForm
        fields = (&#39;name&#39;, &#39;email&#39;, &#39;comments&#39;, &#39;how_did_you_hear_about_us&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;It was at this time that I started regretting how the &lt;code&gt;ContactForm&lt;/code&gt; model was named. To stick with Django conventions, this form class will be the name of the model with &amp;ldquo;Form&amp;rdquo; appended to it. Hence; &lt;code&gt;ContactFormForm&lt;/code&gt;. Future me will not make this mistake.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Update &lt;code&gt;contactform\views.py&lt;/code&gt; so it will send the new form class as an object to the template.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.shortcuts import render
from django.http import HttpResponse
from .forms import ContactFormForm
from .models import ContactForm

def contactform(request):
    form = ContactFormForm()
    context = { 
        &#39;form&#39; : form,
    }

    return render(request, &amp;quot;contactform.html&amp;quot;, context)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update the &lt;code&gt;contactform.html&lt;/code&gt; template to use the &lt;code&gt;form&lt;/code&gt; object in the &lt;code&gt;context&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
      &amp;lt;title&amp;gt;Contact Form&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;Contact Form&amp;lt;/h1&amp;gt;
        &amp;lt;form method=&amp;quot;POST&amp;quot;&amp;gt;
            {% csrf_token %} &amp;lt;!--this token is required in order to prevent CSRF attacks--&amp;gt;
            {{ form }} &amp;lt;!-- the form object will render our FormModel --&amp;gt;
            &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Send&amp;lt;/button&amp;gt;
        &amp;lt;/form&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find more details about how to properly use templates &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/templates/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. The code above has much room for improvement.&lt;/p&gt;

&lt;p&gt;Two things worth noting here are &lt;code&gt;{% csrf_token %}&lt;/code&gt; and &lt;code&gt;{{ form }}&lt;/code&gt;. The code for CSRF Token prevents this page from being vulnerable to cross site request forgery attacks. The &lt;code&gt;form&lt;/code&gt; object is the &lt;code&gt;ContactFrom&lt;/code&gt; model converted to HTML form elements via the &lt;code&gt;ModelForm&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Update the view to accept and save a Contact Form submission.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.shortcuts import render, redirect
from django.http import HttpResponse
from .forms import ContactFormForm
from .models import ContactForm

def contactform(request):
    form = ContactFormForm()
    context = { &amp;quot;form&amp;quot; : form }

    if request.method != &amp;quot;POST&amp;quot;:
        return render(request, &amp;quot;contactform.html&amp;quot;, context)
    
    form = ContactFormForm(data=request.POST)

    if not form.is_valid():
        context[&amp;quot;form&amp;quot;] = form
        return render(request, &amp;quot;contactform.html&amp;quot;, context)
    
    form.save()
    return redirect(&amp;quot;/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will render the form on first request. When the form is submitted it will check the values against what the model expects. If the values aren&amp;rsquo;t valid it will render the form again (ideally to inform the user there were problems and give them a chance to correct mistakes.) If the values are valid, then it will save a new record in the database which an admin will be able to see in Django&amp;rsquo;s administration section. Once the record is saved, the user gets redirected to the site root.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s a lot more to Django, but this is a fair amount of information to get started with it. What we wrote has an authenticated admin area, a &amp;lsquo;hello&amp;rsquo; home page, and a data driven form that persists data to a database. This isn&amp;rsquo;t a completed web application, but we did cover a lot of essential building blocks.&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/quakkels/companionresource_djangosite&#34; target=&#34;_blank&#34;&gt;Companion GitHub Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sqlitebrowser.org/dl/&#34; target=&#34;_blank&#34;&gt;DB Browser for SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/&#34; target=&#34;_blank&#34;&gt;Django Documentation&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#34; target=&#34;_blank&#34;&gt;Configure different database backends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/forms/&#34; target=&#34;_blank&#34;&gt;Forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/db/models/&#34; target=&#34;_blank&#34;&gt;Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/templates/&#34; target=&#34;_blank&#34;&gt;Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/http/urls/&#34; target=&#34;_blank&#34;&gt;URL Dispatcher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Configuring Vim When Using Git Bash on Windows</title>
      <link>http://quakkels.com/posts/configuring-vim-when-using-git-bash/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/configuring-vim-when-using-git-bash/</guid>
      <description>

&lt;p&gt;Occasionally I become enamored with the idea of becoming a Vim expert, or at least a competent Vim user. I work primarily in Windows environments so, though the desire exists, there aren&amp;rsquo;t many good opportunities to build Vim habits. There is a &lt;a href=&#34;https://www.vim.org/download.php/#pc&#34; target=&#34;_blank&#34;&gt;Vim on Windows release&lt;/a&gt; available. This has a GUI interface and an installer executable. Though if you have Git for Windows installed, then you already have Vim available. Git for Windows comes with the ever useful, Git Bash. And, lo! Git Bash has Vim.&lt;/p&gt;

&lt;p&gt;Firing up a quick Git Bash session is simple enough. And firing up vim from there is straightforward. Thankfully, my previous experience with exiting Vim saved me from an embarrassing search query in my browser history.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;http://quakkels.com/images/exiting_vim_orly.jpeg&#34; alt=&#34;How to exit Vim&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It&amp;rsquo;s an old meme, but it checks out. (&lt;code&gt;esc&lt;/code&gt;, &lt;code&gt;:&lt;/code&gt; then &lt;code&gt;q!&lt;/code&gt; to quit without saving, btw)&lt;/em&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;configuring-vim-in-git-bash&#34;&gt;Configuring Vim in Git Bash&lt;/h2&gt;

&lt;p&gt;Vim&amp;rsquo;s configuration can be customized with vimrc files. These files are scripts written in Vimscript. They run at initialization when Vim is opened. We can find out more information by using help commands inside Vim.&lt;/p&gt;

&lt;p&gt;First, open a Git Bash terminal and then open &lt;code&gt;vim&lt;/code&gt;. Then, in &lt;a href=&#34;https://www.howtoforge.com/vim-basics&#34; target=&#34;_blank&#34;&gt;command mode&lt;/a&gt;, open the configuration help information with &lt;code&gt;:help vimrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this point we can see where Vim will look for custom vimrc files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Places for your personal initializations:
    Unix            $HOME/.vimrc or $HOME/.vim/vimrc
    OS/2            $HOME/.vimrc, $HOME/vimfiles/vimrc
                    or $VIM/.vimrc (or _vimrc)
    MS-Windows      $HOME/_vimrc, $HOME/vimfiles/vimrc
                    or $VIM/_vimrc
    Amiga           s:.vimrc, home:.vimrc, home:vimfiles:vimrc
                    or $VIM/.vimrc

  The files are searched in the order specified above and only the first
  one that is found is read.

  RECOMMENDATION: Put all your Vim configuration stuff in the
  $HOME/.vim/ directory ($HOME/vimfiles/ for MS-Windows). That makes it
  easy to copy it to another system.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t be fooled. Since &lt;a href=&#34;https://github.com/git/git/commit/df5218b4c30b2fa1ba0d1ada4166ad85bc83be26&#34; target=&#34;_blank&#34;&gt;Git Bash uses msys2&lt;/a&gt; to imitate a Unixy/Linuxy style system, Vim running inside Git Bash will be following Unix&amp;rsquo;s Conventions, rather than MS-Windows&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Also let&amp;rsquo;s follow Vim&amp;rsquo;s recommendation for using the &lt;code&gt;$HOME/.vim/&lt;/code&gt; directory for configuration files.&lt;/p&gt;

&lt;p&gt;Make the directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir $HOME/.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then create the vimrc file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ touch $HOME/.vim/vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, we have our empty initialization file for Vim. To make sure it&amp;rsquo;s working, I&amp;rsquo;ll add a command to turn on line numbering.&lt;/p&gt;

&lt;p&gt;Open the vimrc file using Vim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim $HOME/.vim/vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, enter Insert Mode by pressing &lt;code&gt;i&lt;/code&gt; and enter three lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot; Custom Vim configuration

set number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save these changes by pressing &lt;code&gt;esc&lt;/code&gt; to leave Insert Mode and then enter &lt;code&gt;:wq&lt;/code&gt; to write the changes and then quit Vim.&lt;/p&gt;

&lt;p&gt;To check that it worked, open up the same file in Vim again and look for the line numbers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/vim_line_numbers.png&#34; alt=&#34;Vim configured to show line numbers&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It worked!&lt;/p&gt;

&lt;p&gt;There are many more configuration changes you can make. Be aware that Vim already has default configuration set that is targeted towards programmers. To find all scripts (remember that configuration is set via initialization scripts) you can use the command &lt;code&gt;:scriptnames&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When I execute &lt;code&gt;:scriptnames&lt;/code&gt; in Vim running in Git Bash, I see &lt;code&gt;/etc/vimrc&lt;/code&gt; at the very top of the list. This makes sense since the &lt;code&gt;etc&lt;/code&gt; folder is where Linux systems place a lot of their configuration. However, since this is in Windows, we need to figure out where the &lt;code&gt;etc&lt;/code&gt; folder is. It&amp;rsquo;s not in &lt;code&gt;C:\&lt;/code&gt; nor in the &lt;code&gt;$HOME&lt;/code&gt; directory. But, since Git Bash is mimicking a Linux system, we should be able to find it along with the other Git Bash files.&lt;/p&gt;

&lt;p&gt;Since I&amp;rsquo;m running the 64 bit version of Git, I found the etc folder in &lt;code&gt;C:\Program Files\Git&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside Git Bash, we can get there with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd c\&amp;quot;Program Files&amp;quot;\Git\etc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, to take a quick peek at &lt;code&gt;vimrc&lt;/code&gt; just execute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I would &lt;em&gt;not&lt;/em&gt; recommend attempting to change anything in &lt;code&gt;etc&lt;/code&gt;. Instead modify Vim&amp;rsquo;s configuration using files in the &lt;code&gt;$HOME\.vim\&lt;/code&gt; folder.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Armed with this information there&amp;rsquo;s a lot of stuff you can now customize. Here are a few more resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://benmccormick.org/2014/07/14/learning-vim-in-2014-configuring-vim&#34; target=&#34;_blank&#34;&gt;Learning Vim in 2014: Configuring Vim&lt;/a&gt;&lt;br&gt;A few years old, but I really like how this author gets into the details rather than just telling you to copy/paste a &lt;code&gt;.vimrc&lt;/code&gt; file from GitHub.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linuxhint.com/configure_vim_vimrc/&#34; target=&#34;_blank&#34;&gt;Configure Vim with vimrc&lt;/a&gt;&lt;br&gt;
Similar to Learning Vim in 2014, but more recent. Also has Linux specific informmatin which you will want to ignore if you&amp;rsquo;re running in Windows.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://learnvimscriptthehardway.stevelosh.com/&#34; target=&#34;_blank&#34;&gt;Learn Vimscript the Hard Way&lt;/a&gt;&lt;br&gt; This ebook has an incredible amount of detail. It may be too much if you&amp;rsquo;re looking to just make quick changes. But it has a lot of great information if you want to dive into the deep end.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vim.rtorr.com/&#34; target=&#34;_blank&#34;&gt;Vim Cheat Sheet&lt;/a&gt;&lt;br&gt;Excellent for discovering all the Vim shortcuts that people love so much.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don&amp;rsquo;t forget to do ridiculous things like to configure VSCode&amp;rsquo;s terminal to use Git Bash which allows you to open Vim from inside VSCode. ;-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/vim_inside_vscode.png&#34; alt=&#34;Run Vim from inside VSCode on Windows&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL Quick Reference</title>
      <link>http://quakkels.com/posts/mysql-quick-reference/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/mysql-quick-reference/</guid>
      <description>

&lt;h2 id=&#34;shell-commands&#34;&gt;Shell Commands&lt;/h2&gt;

&lt;h3 id=&#34;set-up-security-requirements&#34;&gt;Set up security requirements:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;open-the-mysql-cli-client-and-login-using-a-password-and-the-specified-user&#34;&gt;Open the MySQL CLI client and login using a password and the specified user:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mysql -u {user} -p
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-queries-and-commands&#34;&gt;MySQL Queries and Commands&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that MySQL will not execute anything until it encounters a semicolon &lt;code&gt;;&lt;/code&gt; which indicates the end of a statement. This allows us to enter multi-line statements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;create-user&#34;&gt;Create User&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; CREATE USER &#39;newuser&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;give-user-access-to-a-database&#34;&gt;Give User Access to a Database&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; GRANT ALL PRIVILEGES ON * . * TO &#39;newuser&#39;@&#39;localhost&#39;;
&amp;gt; FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-a-database-called-newstore&#34;&gt;Create a database called &lt;code&gt;newStore&lt;/code&gt;:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; CREATE DATABASE IF NOT EXISTS newStore;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-a-new-table-in-a-database&#34;&gt;Create a new table in a database:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; CREATE TABLE IF NOT EXISTS newTable (
&amp;gt;   newTableID INT PRIMARY KEY AUTO_INCREMENT,
&amp;gt;   firstName VARCHAR(255) not null,
&amp;gt;   lastName VARCHAR(255) not null,
&amp;gt;   email VARCHAR(255) not null
&amp;gt; );
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-all-databases&#34;&gt;List all databases:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; SHOW DATABASES;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;connect-to-a-database&#34;&gt;Connect to a database:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; USE newStore;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-tables-in-a-database&#34;&gt;List tables in a database&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; SHOW TABLES;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-columns-in-a-table&#34;&gt;List columns in a table&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; SHOW COLUMNS FROM newTable
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;execute-a-sql-script-from-file&#34;&gt;Execute a sql script from file&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; source /path/to/script.sql;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;more-resources&#34;&gt;More Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-create-a-new-user-and-grant-permissions-in-mysql&#34;&gt;How To Create a New User and Grant Permissions in MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/&#34;&gt;MySQL Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mariadb.com/kb/en/library/documentation/&#34;&gt;MariaDB Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Gogs on Raspberry PI</title>
      <link>http://quakkels.com/posts/gogs-on-raspberry-pi/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/gogs-on-raspberry-pi/</guid>
      <description>

&lt;p&gt;In a previous article &lt;a href=&#34;http://quakkels.com/posts/configure-headless-raspberry-pi-for-wifi-and-ssh/&#34;&gt;I configured a headless Raspberry Pi for Wifi and SSH&lt;/a&gt;. Next, I&amp;rsquo;ll set up a personal Gogs server on it.&lt;/p&gt;

&lt;h2 id=&#34;change-the-password&#34;&gt;Change the Password&lt;/h2&gt;

&lt;p&gt;First things first, change the password for the &lt;code&gt;pi&lt;/code&gt; user to something different than &lt;code&gt;raspberry&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ passwd
Changing password for pi.
(current) UNIX password:
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Please tweet your new password to @quakkels /s&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;arrange-the-prerequisites&#34;&gt;Arrange the Prerequisites&lt;/h2&gt;

&lt;p&gt;Next, I&amp;rsquo;ll make sure the &lt;a href=&#34;https://gogs.io/docs/installation&#34;&gt;prerequisites&lt;/a&gt; are set up. Since Raspbian is based on Debian I can use the Debian/Ubuntu commands. I&amp;rsquo;m skipping the database step because I&amp;rsquo;m happy with this Gogs instance using SQLite3.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before proceeding farther, I&amp;rsquo;m going to create a brand new user specifically for Gogs. This new user will be everything Gogs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo adduser iamgogs 
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If I were a more experienced Gogs administrator I would have created a user named &lt;code&gt;git&lt;/code&gt; since that&amp;rsquo;s Gogs&amp;rsquo; best practice and it&amp;rsquo;s less work later on. Scripts and default configuration use &lt;code&gt;git&lt;/code&gt; as the Gogs user by default.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Be prepared to have a password ready for the new &lt;code&gt;iamgogs&lt;/code&gt; user.&lt;/p&gt;

&lt;p&gt;Add the &lt;code&gt;iamgogs&lt;/code&gt; user to the sudo group.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo usermod -aG sudo iamgogs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now switch to the &lt;code&gt;iamgogs&lt;/code&gt; user with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ su - iamgogs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And test the sudo ability by running any command as sudo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo pwd
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-gogs-from-binary&#34;&gt;Install Gogs from Binary&lt;/h2&gt;

&lt;p&gt;From here, I could install Go and proceed to install from source. But instead, to keep the number of steps to a minimum, I&amp;rsquo;m going to &lt;a href=&#34;https://gogs.io/docs/installation/install_from_binary&#34;&gt;install from binary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Being currently logged in as the &lt;code&gt;iamgogs&lt;/code&gt; user, I&amp;rsquo;ll use the &lt;code&gt;wget&lt;/code&gt; command to download the Raspberry PI build from &lt;a href=&#34;https://gogs.io/docs/installation/install_from_binary&#34;&gt;this download page&lt;/a&gt;. Use &lt;code&gt;wget&lt;/code&gt; with the url for the binary built specifically for Raspberry PI.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget {raspberrypibinaryurl}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that I&amp;rsquo;ve got it downloaded, I can unzip it using the &lt;code&gt;unzip&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ unzip {gogszipfilename}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run the &lt;code&gt;ls&lt;/code&gt; command you should see the new &lt;code&gt;gogs&lt;/code&gt; folder that was extracted into the &lt;code&gt;iamgogs&lt;/code&gt; home directory.&lt;/p&gt;

&lt;p&gt;And now for something completely expected&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;configuring-and-running-gogs-on-raspberry-pi&#34;&gt;Configuring and Running Gogs on Raspberry PI&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gogs.io/docs/installation/configuration_and_run.html&#34;&gt;Running and configuring the Gogs server&lt;/a&gt; is handled by the Gogs install process. There&amp;rsquo;s lots of information online about manually creating and editing custom app.ini configuration file, but it looks like (for the most recent versions of Gogs) all I need to do is run the &lt;code&gt;gogs&lt;/code&gt; executable from the &lt;code&gt;$HOME/gogs&lt;/code&gt; folder with the &lt;code&gt;web&lt;/code&gt; parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd $HOME/gogs
$ ./gogs web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I saw server information appear in the console. Since my Raspberry Pi is set up for headless operation, I don&amp;rsquo;t have the benefit of being able to access Gogs via a graphical web browser over localhost. So, from my windows machine, I navigated to {IpAddressOfRPi}:3000 and was greeted by a pleasant installation form which I filled out. Upon submitting the form, I had an admin account and a functioning Gogs server.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m nearing the end of this Gogs journey, but I still need to set this up as a service running in the background. Otherwise I&amp;rsquo;m stuck with this SSH session running Gogs forever.&lt;/p&gt;

&lt;p&gt;I was able to find some &lt;a href=&#34;https://blog.meinside.dev/Gogs-on-Raspberry-Pi/#2-for-systemd&#34;&gt;instructions&lt;/a&gt; for configuring a Gogs service with systemd that seemed straightforward enough.&lt;/p&gt;

&lt;p&gt;Copy the systemd service file from Gogs to the appropriate folder&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp /home/iamgogs/scripts/systemd/gogs.service /lib/systemd/system/gogs.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I edited the new file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo nano /lib/systemd/system/gogs.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I updated the values for:
- User
- Group
- WorkingDirectory
- ExecStart
- Environment&lt;/p&gt;

&lt;p&gt;Since my Gogs user is &lt;code&gt;iamgogs&lt;/code&gt; rather than &lt;code&gt;git&lt;/code&gt; I needed to make sure the paths and users got updated accordingly. Once the file is updated and saved I tested to make sure it was working with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl start gogs.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After switching over to my windows machine and confirming the site loads in the browser, I returned to my ssh session to make sure systemd will automatically start the Gogs service on reboot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl enable gogs.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then a final test to make sure Gogs will start automatically when the RPi boots:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo and behold, it works.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I Prioritize Strength Training</title>
      <link>http://quakkels.com/posts/why-i-prioritize-strength-training/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/why-i-prioritize-strength-training/</guid>
      <description>&lt;p&gt;Over the last few years, I&amp;rsquo;ve taken up a new hobby; strength training. It&amp;rsquo;s something I&amp;rsquo;ve really grown to love. Though, sometimes it&amp;rsquo;s hard to articulate exactly why strength training has taken such a permanent position in my weekly routine.&lt;/p&gt;

&lt;p&gt;When I was a sedentary person my quality of life decreased every year. Even when I was in my mid 20s I was not &amp;ldquo;strong&amp;rdquo; and frequent back and shoulder pain would frustrate me for weeks at a time. Every year my bodyweight would creep up, my strength would diminish, and I&amp;rsquo;d be a little less capable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You don&amp;rsquo;t own anything in your life. You don&amp;rsquo;t own your fitness. You don&amp;rsquo;t own your health&amp;hellip; You&amp;rsquo;re always constantly needing to work at it&amp;hellip; If you don&amp;rsquo;t, you lose it. So, you&amp;rsquo;re &amp;ldquo;paying the man.&amp;rdquo; ― &lt;a href=&#34;https://www.youtube.com/watch?v=si_w5Jze-zg&amp;amp;t=330s&#34;&gt;Josh Bridges&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was losing my physical liberty. I was getting slower, weaker, and less resilient to everyday life. I&amp;rsquo;d spend my time being anxious about whether my back pain would get unbearable if I sat in the wrong chair for too long. I&amp;rsquo;d wake up in the morning in pain because I slept on my shoulder the wrong way. Utterly miserable.&lt;/p&gt;

&lt;p&gt;So this is why strength training is important. It &amp;ldquo;pays the man&amp;rdquo; so I can keep my physical liberty. It makes me more useful to my family and my community. It sets an example for my offspring that it important to be active and work hard.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Strong people are harder to kill than weak people and more useful in general.
― &lt;a href=&#34;https://www.goodreads.com/quotes/432892-strong-people-are-harder-to-kill-than-weak-people-and&#34;&gt;Mark Rippetoe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Muscular strength is inversely and independently associated with death from all causes and cancer in men, even after adjusting for cardiorespiratory fitness and other potential confounders. ― &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2453303/&#34;&gt;Association between muscular strength and mortality in men: prospective cohort study&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#39;http://quakkels.com/images/first400plusdeadlift.png&#39; style=&#34;float:right;padding:5px&#34;&gt;Strength training is an exercise in success. A person who follows a strength program and is disciplined will see improvements in their strength. They will be able to lift more, move more, and do more. That success reinforces confidence in one&amp;rsquo;s ability.  The first time I deadlifted over 400 pounds was hard hard work paying off, and it felt great.&lt;/p&gt;

&lt;p&gt;Finally, I have not seen anyone come up with a better list for &amp;ldquo;why train&amp;rdquo; than Jim Wendler:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;For physical and mental health.&lt;/li&gt;
&lt;li&gt;For self-improvement.&lt;/li&gt;
&lt;li&gt;To challenge yourself physically and mentally.&lt;/li&gt;
&lt;li&gt;To develop the bite that may help you through difficult times.&lt;/li&gt;
&lt;li&gt;To honor all the men who have fought before you; it is part of your DNA to fight.&lt;/li&gt;
&lt;li&gt;To show/prove to yourself that you can change through will.&lt;/li&gt;
&lt;li&gt;In a world of &amp;ldquo;easy&amp;rdquo;, it keeps your teeth sharp.&lt;/li&gt;
&lt;li&gt;Because we don&amp;rsquo;t have to chop wood anymore.&lt;/li&gt;
&lt;li&gt;Being stronger is ALWAYS better.&lt;/li&gt;
&lt;li&gt;To understand that there is cause and effect to action; and inaction.&lt;/li&gt;
&lt;li&gt;A stronger body can equal a stronger mind can equal a stronger body.&lt;/li&gt;
&lt;li&gt;There is zero negative consequence to being a stronger man.&lt;/li&gt;
&lt;li&gt;To be a great example to your children; fat, weak and ignorant is not a good role model.&lt;/li&gt;
&lt;li&gt;To exhaust your body and mind so as to put up with weak fools and ignorant beggars who demand what you have earned.&lt;/li&gt;
&lt;li&gt;To learn self-reliance.&lt;/li&gt;
&lt;li&gt;To understand that compassion and empathy is noble but not given lightly.&lt;/li&gt;
&lt;li&gt;Because a mentally and physically dangerous man will always be needed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;― &lt;a href=&#34;https://jimwendler.com/blogs/jimwendler-com/what-is-the-reason-for-me-to-do-this&#34;&gt;Jim Wendler&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s why I train strength.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configure Headless Raspberry Pi for Wifi and SSH</title>
      <link>http://quakkels.com/posts/configure-headless-raspberry-pi-for-wifi-and-ssh/</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/configure-headless-raspberry-pi-for-wifi-and-ssh/</guid>
      <description>

&lt;p&gt;Raspberry Pis are great little computers. Wonderful for running hobby services. But, whenever I start a new RPi project, I dislike needing to dig out my spare HDMI monitor and USB keyboard. I don&amp;rsquo;t like having to take up room and connect all that hardware to just enable SSH and Wifi which renders all that equipment unnecessary.&lt;/p&gt;

&lt;p&gt;Recently I learned how to flash a new micro SD card and configure it to connect to my Wifi network and enable SSH before even turning on the RPi for the first time.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi (mine is an RPi 3 Model B V1.2)&lt;/li&gt;
&lt;li&gt;Micro USB charge cable&lt;/li&gt;
&lt;li&gt;A powered USB hub or wall charger to plug the USB cable into&lt;/li&gt;
&lt;li&gt;Micro SD card&lt;/li&gt;
&lt;li&gt;Wifi network (and credentials to sign in to the router)&lt;/li&gt;
&lt;li&gt;A computer that&amp;rsquo;s on previously mentioned network&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Download &lt;a href=&#34;https://www.raspberrypi.org/downloads/raspbian/&#34;&gt;Raspbian Lite&lt;/a&gt;. This version is stripped down and doesn&amp;rsquo;t include things like a graphical desktop.

&lt;ul&gt;
&lt;li&gt;Save the zip file to disk, and unzip. You should see the image file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/documentation/installation/installing-images/windows.md&#34;&gt;Flash&lt;/a&gt; the Micro SD card with Raspbian Lite. I used Etcher.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/documentation/remote-access/ssh/&#34;&gt;Enable SSH&lt;/a&gt; by saving an empty file called &lt;code&gt;ssh&lt;/code&gt; to the new boot partition on the SD card.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Now this is the magic ingredient.&lt;/em&gt; &lt;a href=&#34;https://foxrow.com/raspberry-pi-headless-wifi-config&#34;&gt;Add a configuration file containing your Wifi information&lt;/a&gt; to the boot partition so that raspbian can connect on startup.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, if you&amp;rsquo;ve followed the previous steps correctly, you can eject the SD card from your reader and place it in you RPi and plug it in.&lt;/p&gt;

&lt;p&gt;After waiting a minute or two for the RPi to boot (for the first time) you can log into your router and you will be able to find it in the list of connected devices. That list should have the IP address shown so you can use it to SSH into it.&lt;/p&gt;

&lt;p&gt;Execute &lt;code&gt;ssh {IpAddress} -l pi&lt;/code&gt; and use the password &lt;code&gt;raspberry&lt;/code&gt; to login.&lt;/p&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got a functioning Raspberry Pi, &lt;a href=&#34;http://quakkels.com/posts/gogs-on-raspberry-pi/&#34;&gt;let&amp;rsquo;s do something useful with it&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>