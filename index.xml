<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quakkels.com</title>
    <link>http://quakkels.com/index.xml</link>
    <description>Recent content on Quakkels.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 May 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://quakkels.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Home Gym Outfitting; Train with a Sled</title>
      <link>http://quakkels.com/posts/home_gym_outfitting_train_with_a_sled/</link>
      <pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/home_gym_outfitting_train_with_a_sled/</guid>
      <description>&lt;p&gt;Outfitting a home gym with a sled for drags and arm-over-arm pulls is simple. You don&amp;rsquo;t need to spend hundreds of dollars on equipment or gym memberships in order to train with a sled. You also don&amp;rsquo;t really need any tools or handyman skills to get started.&lt;/p&gt;

&lt;p&gt;When I first wanted to add arm-over-arm pulls to work my cardio, grip, arms, and back, I looked around and found a &lt;a target=&#34;_blank&#34; href=&#34;https://www.roguefitness.com/conditioning/strength-equipment/sleds&#34;&gt;few different options&lt;/a&gt;. And some of them were rather economical. However, most are still priced near a hundred dollars and they don&amp;rsquo;t include a rope nor a strap long enough for arm-over-arm pulls, which I&amp;rsquo;d have to purchase separately.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a simpler and cheaper alternative to those econo sleds. It can be found at the local hardware store.&lt;/p&gt;

&lt;p&gt;This tow strap cost me just about ten dollars.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/new_tow_strap.png&#34; alt=&#34;20&#39; Tow Strap&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When I combine it with a few of my bumper plates, it does exactly what I need. Ta-da! A &amp;ldquo;sled&amp;rdquo; for my home gym.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/first_sled_experiment.png&#34; alt=&#34;Arm-over-arm pull with a 20&#39; tow strap&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This first experiment was awesome. It was easy to set up and it worked. Though, I did I noticed wear on the strap underneath the bumper plates. At first I thought it was no big deal. But if I had to replace the fraying strap a few times my costs would eventually be comparable with if I had bought an actual post style sled.&lt;/p&gt;

&lt;p&gt;So to address the wear on the strap, I made a sheath using a an easily replaceable resource I frequently have lying around; a piece of cardboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/sled_experiment_with_cardboard_sheeth.png&#34; alt=&#34;A more resilient sled using a 20&#39; tow strap&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m really happy with this setup. The cardboard works well on my reasonably smooth basement floor. It will eventually wear, but with the amount of online shopping my family does we&amp;rsquo;re never lacking fresh cardboard. Though, if the dragging surface were rougher, I&amp;rsquo;d imagine I&amp;rsquo;d have to use a different solution.&lt;/p&gt;

&lt;p&gt;Adding useful pieces of equipment to a home gym doesn&amp;rsquo;t have to be expensive or complicated. And, simple additions like this keep workouts engaging and fun.&lt;/p&gt;

&lt;p&gt;Benefits of sled training with a tow strap are numerous.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Simple.&lt;/strong&gt; Really hard to mess up.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cheap.&lt;/strong&gt; Just time, a stack of weights, and a ten dollar tow strap is all the investment you need to get started.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Safe.&lt;/strong&gt; You can do these by yourself. If you fail, there&amp;rsquo;s nothing that can fall and crush you.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Versatile.&lt;/strong&gt; You can do these heavy for strength. You can do these lighter for cardio. You can drag it forward or backward. Or, you can pull it arm-over-arm. Using just a tow strap you have enough equipment for a full body workout.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Things you can do with this include &lt;a href=&#34;https://youtu.be/MW5HfC5V_YI&#34; target=&#34;_blank&#34;&gt;Arm-Over-Arm Pulls&lt;/a&gt;, and &lt;a href=&#34;https://www.youtube.com/watch?v=KKEceC_t2bY&#34; target=&#34;_blank&#34;&gt;Reverse Sled Drag&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Django</title>
      <link>http://quakkels.com/posts/getting-started-python-django-vs-code/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/getting-started-python-django-vs-code/</guid>
      <description>

&lt;p&gt;Django is a Python framework that I&amp;rsquo;ve written about before. I&amp;rsquo;ve &lt;a href=&#34;http://quakkels.com/posts/asp-net-mvc-compared-to-dango/&#34;&gt;compared Django to ASP.NET MVC&lt;/a&gt;. But, I didn&amp;rsquo;t go into much detail about how to actually use Django to create a data driven website. That&amp;rsquo;s what I&amp;rsquo;ll cover now.&lt;/p&gt;

&lt;p&gt;The goal for this &amp;lsquo;Getting Started&amp;rsquo; project is to get familiar with the basics of developing data driven web applications using Django, Models, Views, Templates, URLs, and Forms. By the end we&amp;rsquo;ll have a simple contact form that saves user submissions to the database, and displays that data to an administrator user. It will not be a completed site, but it will introduce basic the building blocks of website development in Django.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like to refer to the end goal of this article, you can &lt;a href=&#34;https://github.com/quakkels/companionresource_djangosite&#34; target=&#34;_blank&#34;&gt;find it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Windows 10

&lt;ul&gt;
&lt;li&gt;Or your own favorite OS. But I&amp;rsquo;ll be writing from a Windows perspective.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Python 3.6 or above.&lt;/li&gt;
&lt;li&gt;VS Code with Microsoft&amp;rsquo;s Python extension installed.

&lt;ul&gt;
&lt;li&gt;Or your own favorite Python IDE/editor, but I&amp;rsquo;ll be writing from the VS Code perspective&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;create-project&#34;&gt;Create Project&lt;/h2&gt;

&lt;p&gt;Make the project directory and navigate inside.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; mkdir django-project &amp;amp;&amp;amp; cd django-project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a Virtual Environment to isolate project specific dependencies.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; python -m venv django-env
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Activate the venv. (This is the Windows command.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; django-env\Scripts\activate.bat
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Once inside an activated venv, you can leave it to work on other things by using the &lt;code&gt;deactivate&lt;/code&gt; command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Install Django inside the active venv. (You don&amp;rsquo;t want to install packages globally. Make sure that the venv is active.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; pip install django
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;django-admin&lt;/code&gt; to create the new Django application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; django-admin startproject djangosite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That created a new folder called &lt;code&gt;djangosite&lt;/code&gt; and it placed boilerplate files inside. &lt;code&gt;manage.py&lt;/code&gt; is one of those files and it&amp;rsquo;s what will used from now on to run Django commands.&lt;/p&gt;

&lt;p&gt;Run the development Django server from inside the site&amp;rsquo;s folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; cd djangosite
(django-env)&amp;gt; python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visit localhost:8000 to verify that it&amp;rsquo;s working. Then exit the server with Ctrl+Break.&lt;/p&gt;

&lt;p&gt;When the Django server ran, Django automatically created a db.sqlite3 file in the project folder. &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#34; target=&#34;_blank&#34;&gt;Read more about configuring different database backends&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Use VS Code to open the &lt;code&gt;django-project&lt;/code&gt; folder that houses the virtual environment folder and the Django app folder. This can be done from the terminal, or manually inside VS Code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; code ..\. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open &lt;code&gt;djangosite\urls.py&lt;/code&gt;. The imports for Django will probably be shown as missing modules because Django was installed in the venv and not globally. to fix this, press &lt;code&gt;ctrl+shift+p&lt;/code&gt; then execute the command &lt;code&gt;Python: Select Interpretter&lt;/code&gt;. Find &lt;code&gt;.\django-env\Scripts\python.exe&lt;/code&gt; from the list and select it. Then VS Code will stop showing the Django imports as errors.
&amp;gt; For more VS Code information visit &lt;a href=&#34;https://code.visualstudio.com/docs/python/python-tutorial&#34; target=&#34;_blank&#34;&gt;Getting Started with Python in VS Code&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;add-a-custom-django-view&#34;&gt;Add a Custom Django View&lt;/h2&gt;

&lt;p&gt;To add a &amp;lsquo;Hello World&amp;rsquo; page, create a new file in &lt;code&gt;django-project\djangosite\djangosite&lt;/code&gt; called &lt;code&gt;views.py&lt;/code&gt;. Add the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.http import HttpResponse

def welcome(request):
  return HttpResponse(&amp;quot;Hello, World!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To tell Django when to execute this welcome view, edit &lt;code&gt;urls.py&lt;/code&gt; so it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, re_path

from .views import welcome

urlpatterns = [
    path(&#39;admin/&#39;, admin.site.urls),
    re_path(&#39;^$&#39;, welcome)
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Browse to localhost:8000 and see the custom message.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/python_django_hello_world.png&#34; alt=&#34;Django Hello World&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s take a quick break to go over some Django concepts.&lt;/p&gt;

&lt;h3 id=&#34;app&#34;&gt;App&lt;/h3&gt;

&lt;p&gt;A Django App is a python package that acts as a little web application of its own. With it&amp;rsquo;s own Models, Views, Templates, and URLs. Most Django sites use several apps. It is also possible to write an app such that it can be reused in other Django projects.&lt;/p&gt;

&lt;h3 id=&#34;model&#34;&gt;Model&lt;/h3&gt;

&lt;p&gt;A Django Model is a data model that maps to a database table. This introduces the concept of &lt;em&gt;Migrations&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;migrations&#34;&gt;Migrations&lt;/h3&gt;

&lt;p&gt;The model will usually change as the site is developed.
A migration will update the corresponding database table from previous versions to the new version of the code. As migrations get more complicated, there may be need to write custom migration scripts.&lt;/p&gt;

&lt;h3 id=&#34;views&#34;&gt;Views&lt;/h3&gt;

&lt;p&gt;Views in Django are like Controllers in ASP.NET MVC. They are what connect a model with a template.&lt;/p&gt;

&lt;h3 id=&#34;templates&#34;&gt;Templates&lt;/h3&gt;

&lt;p&gt;Templates in Django are like Views in ASP.NET MVC. They are the display layer; the HTML that will render in the browser.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;add-a-custom-django-model&#34;&gt;Add a Custom Django Model&lt;/h2&gt;

&lt;p&gt;Show migrations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py showmigrations
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Execute those migrations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create a new Django app. For this example, it will handle the functionality for a contact form.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py startapp contactform
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Move into the new &lt;code&gt;contactform&lt;/code&gt; directory and notice that Django has created a bunch of boilerplate code for us.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; cd contactform
(django-env)&amp;gt; dir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add this new app to the Django site. Open &lt;code&gt;settings.py&lt;/code&gt; in the &lt;code&gt;djangosite&lt;/code&gt; folder, and add the &lt;code&gt;contactform&lt;/code&gt; app to the list of installed apps. &lt;code&gt;INSTALLED_APPS&lt;/code&gt; should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INSTALLED_APPS = [
    &#39;django.contrib.admin&#39;,
    &#39;django.contrib.auth&#39;,
    &#39;django.contrib.contenttypes&#39;,
    &#39;django.contrib.sessions&#39;,
    &#39;django.contrib.messages&#39;,
    &#39;django.contrib.staticfiles&#39;,
    &#39;contactform&#39;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, open the &lt;code&gt;models.py&lt;/code&gt; file in the contact form app and add the class that will represent the contact form.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.db import models

class ContactForm(models.Model):
    HOW_DID_YOU_HEAR_ABOUT_US_CHOICES = (
        (&#39;SE&#39;, &#39;Search Engine&#39;),
        (&#39;Q&#39;, &#39;Quakkels.com&#39;),
        (&#39;F&#39;, &#39;From a friend&#39;),
        (&#39;O&#39;, &#39;Other&#39;)
    )

    name = models.CharField(max_length=50)
    email = models.EmailField(max_length=50)
    comments = models.CharField(max_length=500)
    how_did_you_hear_about_us = models.CharField(max_length=2, choices=HOW_DID_YOU_HEAR_ABOUT_US_CHOICES)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;More information about Django models can be found &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/db/models/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After the model is saved, create the new migration script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py makemigrations
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the migration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;If you&amp;rsquo;re curious about what the sqlite database tables look like, you can download something like &lt;a href=&#34;https://sqlitebrowser.org/dl/&#34; target=&#34;_blank&#34;&gt;DB Browser for SQLite&lt;/a&gt;. Table names will be named after the model with the app name as the prefix. So the table for ContactForm will be called &lt;code&gt;contactform_contactform&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;register-custom-model-in-admin&#34;&gt;Register Custom Model in Admin&lt;/h2&gt;

&lt;p&gt;To make contact form submissions available to be read by a site administrator, &lt;code&gt;ContactForm&lt;/code&gt; needs to be registered in the admin area.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;contactform\admin.py&lt;/code&gt; and add this code to register the ContactForm model.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.contrib import admin
from .models import ContactForm

@admin.register(ContactForm)
class ContactFormAdmin(admin.ModelAdmin):
    list_display = (&#39;name&#39;, &#39;email&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a super user for logging into the site&amp;rsquo;s admin area.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when the development server runs, you&amp;rsquo;ll be able to view and edit ContactForms in the Admin area by navigating to localhost:8000/admin and using the new super user to log in.&lt;/p&gt;

&lt;h2 id=&#34;create-a-custom-django-template&#34;&gt;Create a Custom Django Template&lt;/h2&gt;

&lt;p&gt;Double check the terminal&amp;rsquo;s working directory is the &lt;code&gt;contactform&lt;/code&gt; folder inside of &lt;code&gt;djangosite&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; pwd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Switch to &lt;code&gt;contactform&lt;/code&gt; if it&amp;rsquo;s not the working directory.&lt;/p&gt;

&lt;p&gt;Create a new folder for custom templates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; mdkir templates
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In VS Code, create a file in the new templates folder called &lt;code&gt;contactform.html&lt;/code&gt; for the contact form. Put the following code in the file for now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
      &amp;lt;title&amp;gt;Contact Form&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;Contact Form&amp;lt;/h1&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, update &lt;code&gt;contactform\views.py&lt;/code&gt; with this code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.shortcuts import render

def contactform(request):
    return render(request, &amp;quot;contactform.html&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the &lt;code&gt;render()&lt;/code&gt; function is used here instead of returning &lt;code&gt;HttpResponse()&lt;/code&gt; directly like the &amp;ldquo;Hello, World!&amp;rdquo; view does. The &lt;code&gt;render()&lt;/code&gt; function will use the template for the html.&lt;/p&gt;

&lt;p&gt;To make the template visible from the browser, we need to route requests to the view based on the URL.&lt;/p&gt;

&lt;p&gt;Use VS Code to create a &lt;code&gt;urls.py&lt;/code&gt; file inside the &lt;code&gt;contactform&lt;/code&gt; folder. Put this code inside it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.urls import re_path

from .views import contactform

urlpatterns = [
    re_path(&#39;contactform$&#39;, contactform)
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;re_path()&lt;/code&gt; method uses a string as a regular expression. The &lt;code&gt;&#39;contactform$&#39;&lt;/code&gt; ensures that it only matches on paths that end in &lt;code&gt;contactform&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;djangosite\urls.py&lt;/code&gt; is what Django uses to route urls, it needs to be aware of the new &lt;code&gt;contactform\urls.py&lt;/code&gt;. Update it with this code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, re_path, include

from .views import welcome

urlpatterns = [
    path(&#39;admin/&#39;, admin.site.urls),
    re_path(&#39;^contactform/&#39;, include(&#39;contactform.urls&#39;)),
    path(&#39;&#39;, welcome),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&#39;^contactform/&#39;&lt;/code&gt; is a regular expression that makes sure matching paths begin with &lt;code&gt;contactform&lt;/code&gt;. This is a prefix for everything in the contactform app. So the complete matching path will be &lt;code&gt;localhost:8000/contactform/contactform&lt;/code&gt;. For more information read the &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/http/urls/&#34; target=&#34;_blank&#34;&gt;Django documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;create-a-form&#34;&gt;Create a Form&lt;/h1&gt;

&lt;p&gt;Create a new file in &lt;code&gt;contactform&lt;/code&gt; called &lt;code&gt;forms.py&lt;/code&gt; and put this code in it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.forms import ModelForm
from .models import ContactForm

class ContactFormForm(ModelForm):
    class Meta:
        model = ContactForm
        fields = (&#39;name&#39;, &#39;email&#39;, &#39;comments&#39;, &#39;how_did_you_hear_about_us&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;It was at this time that I started regretting how the &lt;code&gt;ContactForm&lt;/code&gt; model was named. To stick with Django conventions, this form class will be the name of the model with &amp;ldquo;Form&amp;rdquo; appended to it. Hence; &lt;code&gt;ContactFormForm&lt;/code&gt;. Future me will not make this mistake.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Update &lt;code&gt;contactform\views.py&lt;/code&gt; so it will send the new form class as an object to the template.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.shortcuts import render
from django.http import HttpResponse
from .forms import ContactFormForm
from .models import ContactForm

def contactform(request):
    form = ContactFormForm()
    context = { 
        &#39;form&#39; : form,
    }

    return render(request, &amp;quot;contactform.html&amp;quot;, context)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update the &lt;code&gt;contactform.html&lt;/code&gt; template to use the &lt;code&gt;form&lt;/code&gt; object in the &lt;code&gt;context&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
      &amp;lt;title&amp;gt;Contact Form&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;Contact Form&amp;lt;/h1&amp;gt;
        &amp;lt;form method=&amp;quot;POST&amp;quot;&amp;gt;
            {% csrf_token %} &amp;lt;!--this token is required in order to prevent CSRF attacks--&amp;gt;
            {{ form }} &amp;lt;!-- the form object will render our FormModel --&amp;gt;
            &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Send&amp;lt;/button&amp;gt;
        &amp;lt;/form&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find more details about how to properly use templates &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/templates/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. The code above has much room for improvement.&lt;/p&gt;

&lt;p&gt;Two things worth noting here are &lt;code&gt;{% csrf_token %}&lt;/code&gt; and &lt;code&gt;{{ form }}&lt;/code&gt;. The code for CSRF Token prevents this page from being vulnerable to cross site request forgery attacks. The &lt;code&gt;form&lt;/code&gt; object is the &lt;code&gt;ContactFrom&lt;/code&gt; model converted to HTML form elements via the &lt;code&gt;ModelForm&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Update the view to accept and save a Contact Form submission.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.shortcuts import render, redirect
from django.http import HttpResponse
from .forms import ContactFormForm
from .models import ContactForm

def contactform(request):
    form = ContactFormForm()
    context = { &amp;quot;form&amp;quot; : form }

    if request.method != &amp;quot;POST&amp;quot;:
        return render(request, &amp;quot;contactform.html&amp;quot;, context)
    
    form = ContactFormForm(data=request.POST)

    if not form.is_valid():
        context[&amp;quot;form&amp;quot;] = form
        return render(request, &amp;quot;contactform.html&amp;quot;, context)
    
    form.save()
    return redirect(&amp;quot;/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will render the form on first request. When the form is submitted it will check the values against what the model expects. If the values aren&amp;rsquo;t valid it will render the form again (ideally to inform the user there were problems and give them a chance to correct mistakes.) If the values are valid, then it will save a new record in the database which an admin will be able to see in Django&amp;rsquo;s administration section. Once the record is saved, the user gets redirected to the site root.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s a lot more to Django, but this is a fair amount of information to get started with it. What we wrote has an authenticated admin area, a &amp;lsquo;hello&amp;rsquo; home page, and a data driven form that persists data to a database. This isn&amp;rsquo;t a completed web application, but we did cover a lot of essential building blocks.&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/quakkels/companionresource_djangosite&#34; target=&#34;_blank&#34;&gt;Companion GitHub Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sqlitebrowser.org/dl/&#34; target=&#34;_blank&#34;&gt;DB Browser for SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/&#34; target=&#34;_blank&#34;&gt;Django Documentation&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#34; target=&#34;_blank&#34;&gt;Configure different database backends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/forms/&#34; target=&#34;_blank&#34;&gt;Forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/db/models/&#34; target=&#34;_blank&#34;&gt;Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/templates/&#34; target=&#34;_blank&#34;&gt;Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/http/urls/&#34; target=&#34;_blank&#34;&gt;URL Dispatcher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Configuring Vim When Using Git Bash on Windows</title>
      <link>http://quakkels.com/posts/configuring-vim-when-using-git-bash/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/configuring-vim-when-using-git-bash/</guid>
      <description>

&lt;p&gt;Occasionally I become enamored with the idea of becoming a Vim expert, or at least a competent Vim user. I work primarily in Windows environments so, though the desire exists, there aren&amp;rsquo;t many good opportunities to build Vim habits. There is a &lt;a href=&#34;https://www.vim.org/download.php/#pc&#34; target=&#34;_blank&#34;&gt;Vim on Windows release&lt;/a&gt; available. This has a GUI interface and an installer executable. Though if you have Git for Windows installed, then you already have Vim available. Git for Windows comes with the ever useful, Git Bash. And, lo! Git Bash has Vim.&lt;/p&gt;

&lt;p&gt;Firing up a quick Git Bash session is simple enough. And firing up vim from there is straightforward. Thankfully, my previous experience with exiting Vim saved me from an embarrassing search query in my browser history.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;http://quakkels.com/images/exiting_vim_orly.jpeg&#34; alt=&#34;How to exit Vim&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It&amp;rsquo;s an old meme, but it checks out. (&lt;code&gt;esc&lt;/code&gt;, &lt;code&gt;:&lt;/code&gt; then &lt;code&gt;q!&lt;/code&gt; to quit without saving, btw)&lt;/em&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;configuring-vim-in-git-bash&#34;&gt;Configuring Vim in Git Bash&lt;/h2&gt;

&lt;p&gt;Vim&amp;rsquo;s configuration can be customized with vimrc files. These files are scripts written in Vimscript. They run at initialization when Vim is opened. We can find out more information by using help commands inside Vim.&lt;/p&gt;

&lt;p&gt;First, open a Git Bash terminal and then open &lt;code&gt;vim&lt;/code&gt;. Then, in &lt;a href=&#34;https://www.howtoforge.com/vim-basics&#34; target=&#34;_blank&#34;&gt;command mode&lt;/a&gt;, open the configuration help information with &lt;code&gt;:help vimrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this point we can see where Vim will look for custom vimrc files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Places for your personal initializations:
    Unix            $HOME/.vimrc or $HOME/.vim/vimrc
    OS/2            $HOME/.vimrc, $HOME/vimfiles/vimrc
                    or $VIM/.vimrc (or _vimrc)
    MS-Windows      $HOME/_vimrc, $HOME/vimfiles/vimrc
                    or $VIM/_vimrc
    Amiga           s:.vimrc, home:.vimrc, home:vimfiles:vimrc
                    or $VIM/.vimrc

  The files are searched in the order specified above and only the first
  one that is found is read.

  RECOMMENDATION: Put all your Vim configuration stuff in the
  $HOME/.vim/ directory ($HOME/vimfiles/ for MS-Windows). That makes it
  easy to copy it to another system.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t be fooled. Since &lt;a href=&#34;https://github.com/git/git/commit/df5218b4c30b2fa1ba0d1ada4166ad85bc83be26&#34; target=&#34;_blank&#34;&gt;Git Bash uses msys2&lt;/a&gt; to imitate a Unixy/Linuxy style system, Vim running inside Git Bash will be following Unix&amp;rsquo;s Conventions, rather than MS-Windows&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Also let&amp;rsquo;s follow Vim&amp;rsquo;s recommendation for using the &lt;code&gt;$HOME/.vim/&lt;/code&gt; directory for configuration files.&lt;/p&gt;

&lt;p&gt;Make the directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir $HOME/.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then create the vimrc file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ touch $HOME/.vim/vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, we have our empty initialization file for Vim. To make sure it&amp;rsquo;s working, I&amp;rsquo;ll add a command to turn on line numbering.&lt;/p&gt;

&lt;p&gt;Open the vimrc file using Vim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim $HOME/.vim/vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, enter Insert Mode by pressing &lt;code&gt;i&lt;/code&gt; and enter three lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot; Custom Vim configuration

set number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save these changes by pressing &lt;code&gt;esc&lt;/code&gt; to leave Insert Mode and then enter &lt;code&gt;:wq&lt;/code&gt; to write the changes and then quit Vim.&lt;/p&gt;

&lt;p&gt;To check that it worked, open up the same file in Vim again and look for the line numbers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/vim_line_numbers.png&#34; alt=&#34;Vim configured to show line numbers&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It worked!&lt;/p&gt;

&lt;p&gt;There are many more configuration changes you can make. Be aware that Vim already has default configuration set that is targeted towards programmers. To find all scripts (remember that configuration is set via initialization scripts) you can use the command &lt;code&gt;:scriptnames&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When I execute &lt;code&gt;:scriptnames&lt;/code&gt; in Vim running in Git Bash, I see &lt;code&gt;/etc/vimrc&lt;/code&gt; at the very top of the list. This makes sense since the &lt;code&gt;etc&lt;/code&gt; folder is where Linux systems place a lot of their configuration. However, since this is in Windows, we need to figure out where the &lt;code&gt;etc&lt;/code&gt; folder is. It&amp;rsquo;s not in &lt;code&gt;C:\&lt;/code&gt; nor in the &lt;code&gt;$HOME&lt;/code&gt; directory. But, since Git Bash is mimicking a Linux system, we should be able to find it along with the other Git Bash files.&lt;/p&gt;

&lt;p&gt;Since I&amp;rsquo;m running the 64 bit version of Git, I found the etc folder in &lt;code&gt;C:\Program Files\Git&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside Git Bash, we can get there with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd c\&amp;quot;Program Files&amp;quot;\Git\etc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, to take a quick peek at &lt;code&gt;vimrc&lt;/code&gt; just execute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I would &lt;em&gt;not&lt;/em&gt; recommend attempting to change anything in &lt;code&gt;etc&lt;/code&gt;. Instead modify Vim&amp;rsquo;s configuration using files in the &lt;code&gt;$HOME\.vim\&lt;/code&gt; folder.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Armed with this information there&amp;rsquo;s a lot of stuff you can now customize. Here are a few more resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://benmccormick.org/2014/07/14/learning-vim-in-2014-configuring-vim&#34; target=&#34;_blank&#34;&gt;Learning Vim in 2014: Configuring Vim&lt;/a&gt;&lt;br&gt;A few years old, but I really like how this author gets into the details rather than just telling you to copy/paste a &lt;code&gt;.vimrc&lt;/code&gt; file from GitHub.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linuxhint.com/configure_vim_vimrc/&#34; target=&#34;_blank&#34;&gt;Configure Vim with vimrc&lt;/a&gt;&lt;br&gt;
Similar to Learning Vim in 2014, but more recent. Also has Linux specific informmatin which you will want to ignore if you&amp;rsquo;re running in Windows.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://learnvimscriptthehardway.stevelosh.com/&#34; target=&#34;_blank&#34;&gt;Learn Vimscript the Hard Way&lt;/a&gt;&lt;br&gt; This ebook has an incredible amount of detail. It may be too much if you&amp;rsquo;re looking to just make quick changes. But it has a lot of great information if you want to dive into the deep end.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vim.rtorr.com/&#34; target=&#34;_blank&#34;&gt;Vim Cheat Sheet&lt;/a&gt;&lt;br&gt;Excellent for discovering all the Vim shortcuts that people love so much.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don&amp;rsquo;t forget to do ridiculous things like to configure VSCode&amp;rsquo;s terminal to use Git Bash which allows you to open Vim from inside VSCode. ;-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/vim_inside_vscode.png&#34; alt=&#34;Run Vim from inside VSCode on Windows&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL Quick Reference</title>
      <link>http://quakkels.com/posts/mysql-quick-reference/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/mysql-quick-reference/</guid>
      <description>

&lt;h2 id=&#34;shell-commands&#34;&gt;Shell Commands&lt;/h2&gt;

&lt;h3 id=&#34;set-up-security-requirements&#34;&gt;Set up security requirements:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;open-the-mysql-cli-client-and-login-using-a-password-and-the-specified-user&#34;&gt;Open the MySQL CLI client and login using a password and the specified user:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mysql -u {user} -p
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-queries-and-commands&#34;&gt;MySQL Queries and Commands&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that MySQL will not execute anything until it encounters a semicolon &lt;code&gt;;&lt;/code&gt; which indicates the end of a statement. This allows us to enter multi-line statements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;create-user&#34;&gt;Create User&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; CREATE USER &#39;newuser&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;give-user-access-to-a-database&#34;&gt;Give User Access to a Database&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; GRANT ALL PRIVILEGES ON * . * TO &#39;newuser&#39;@&#39;localhost&#39;;
&amp;gt; FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-a-database-called-newstore&#34;&gt;Create a database called &lt;code&gt;newStore&lt;/code&gt;:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; CREATE DATABASE IF NOT EXISTS newStore;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-a-new-table-in-a-database&#34;&gt;Create a new table in a database:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; CREATE TABLE IF NOT EXISTS newTable (
&amp;gt;   newTableID INT PRIMARY KEY AUTO_INCREMENT,
&amp;gt;   firstName VARCHAR(255) not null,
&amp;gt;   lastName VARCHAR(255) not null,
&amp;gt;   email VARCHAR(255) not null
&amp;gt; );
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-all-databases&#34;&gt;List all databases:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; SHOW DATABASES;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;connect-to-a-database&#34;&gt;Connect to a database:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; USE newStore;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-tables-in-a-database&#34;&gt;List tables in a database&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; SHOW TABLES;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-columns-in-a-table&#34;&gt;List columns in a table&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; SHOW COLUMNS FROM newTable
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;execute-a-sql-script-from-file&#34;&gt;Execute a sql script from file&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; source /path/to/script.sql;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;more-resources&#34;&gt;More Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-create-a-new-user-and-grant-permissions-in-mysql&#34;&gt;How To Create a New User and Grant Permissions in MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/&#34;&gt;MySQL Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mariadb.com/kb/en/library/documentation/&#34;&gt;MariaDB Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Gogs on Raspberry PI</title>
      <link>http://quakkels.com/posts/gogs-on-raspberry-pi/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/gogs-on-raspberry-pi/</guid>
      <description>

&lt;p&gt;In a previous article &lt;a href=&#34;http://quakkels.com/posts/configure-headless-raspberry-pi-for-wifi-and-ssh/&#34;&gt;I configured a headless Raspberry Pi for Wifi and SSH&lt;/a&gt;. Next, I&amp;rsquo;ll set up a personal Gogs server on it.&lt;/p&gt;

&lt;h2 id=&#34;change-the-password&#34;&gt;Change the Password&lt;/h2&gt;

&lt;p&gt;First things first, change the password for the &lt;code&gt;pi&lt;/code&gt; user to something different than &lt;code&gt;raspberry&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ passwd
Changing password for pi.
(current) UNIX password:
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Please tweet your new password to @quakkels /s&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;arrange-the-prerequisites&#34;&gt;Arrange the Prerequisites&lt;/h2&gt;

&lt;p&gt;Next, I&amp;rsquo;ll make sure the &lt;a href=&#34;https://gogs.io/docs/installation&#34;&gt;prerequisites&lt;/a&gt; are set up. Since Raspbian is based on Debian I can use the Debian/Ubuntu commands. I&amp;rsquo;m skipping the database step because I&amp;rsquo;m happy with this Gogs instance using SQLite3.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before proceeding farther, I&amp;rsquo;m going to create a brand new user specifically for Gogs. This new user will be everything Gogs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo adduser iamgogs 
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If I were a more experienced Gogs administrator I would have created a user named &lt;code&gt;git&lt;/code&gt; since that&amp;rsquo;s Gogs&amp;rsquo; best practice and it&amp;rsquo;s less work later on. Scripts and default configuration use &lt;code&gt;git&lt;/code&gt; as the Gogs user by default.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Be prepared to have a password ready for the new &lt;code&gt;iamgogs&lt;/code&gt; user.&lt;/p&gt;

&lt;p&gt;Add the &lt;code&gt;iamgogs&lt;/code&gt; user to the sudo group.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo usermod -aG sudo iamgogs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now switch to the &lt;code&gt;iamgogs&lt;/code&gt; user with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ su - iamgogs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And test the sudo ability by running any command as sudo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo pwd
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-gogs-from-binary&#34;&gt;Install Gogs from Binary&lt;/h2&gt;

&lt;p&gt;From here, I could install Go and proceed to install from source. But instead, to keep the number of steps to a minimum, I&amp;rsquo;m going to &lt;a href=&#34;https://gogs.io/docs/installation/install_from_binary&#34;&gt;install from binary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Being currently logged in as the &lt;code&gt;iamgogs&lt;/code&gt; user, I&amp;rsquo;ll use the &lt;code&gt;wget&lt;/code&gt; command to download the Raspberry PI build from &lt;a href=&#34;https://gogs.io/docs/installation/install_from_binary&#34;&gt;this download page&lt;/a&gt;. Use &lt;code&gt;wget&lt;/code&gt; with the url for the binary built specifically for Raspberry PI.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget {raspberrypibinaryurl}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that I&amp;rsquo;ve got it downloaded, I can unzip it using the &lt;code&gt;unzip&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ unzip {gogszipfilename}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run the &lt;code&gt;ls&lt;/code&gt; command you should see the new &lt;code&gt;gogs&lt;/code&gt; folder that was extracted into the &lt;code&gt;iamgogs&lt;/code&gt; home directory.&lt;/p&gt;

&lt;p&gt;And now for something completely expected&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;configuring-and-running-gogs-on-raspberry-pi&#34;&gt;Configuring and Running Gogs on Raspberry PI&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gogs.io/docs/installation/configuration_and_run.html&#34;&gt;Running and configuring the Gogs server&lt;/a&gt; is handled by the Gogs install process. There&amp;rsquo;s lots of information online about manually creating and editing custom app.ini configuration file, but it looks like (for the most recent versions of Gogs) all I need to do is run the &lt;code&gt;gogs&lt;/code&gt; executable from the &lt;code&gt;$HOME/gogs&lt;/code&gt; folder with the &lt;code&gt;web&lt;/code&gt; parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd $HOME/gogs
$ ./gogs web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I saw server information appear in the console. Since my Raspberry Pi is set up for headless operation, I don&amp;rsquo;t have the benefit of being able to access Gogs via a graphical web browser over localhost. So, from my windows machine, I navigated to {IpAddressOfRPi}:3000 and was greeted by a pleasant installation form which I filled out. Upon submitting the form, I had an admin account and a functioning Gogs server.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m nearing the end of this Gogs journey, but I still need to set this up as a service running in the background. Otherwise I&amp;rsquo;m stuck with this SSH session running Gogs forever.&lt;/p&gt;

&lt;p&gt;I was able to find some &lt;a href=&#34;https://blog.meinside.dev/Gogs-on-Raspberry-Pi/#2-for-systemd&#34;&gt;instructions&lt;/a&gt; for configuring a Gogs service with systemd that seemed straightforward enough.&lt;/p&gt;

&lt;p&gt;Copy the systemd service file from Gogs to the appropriate folder&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp /home/iamgogs/scripts/systemd/gogs.service /lib/systemd/system/gogs.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I edited the new file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo nano /lib/systemd/system/gogs.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I updated the values for:
- User
- Group
- WorkingDirectory
- ExecStart
- Environment&lt;/p&gt;

&lt;p&gt;Since my Gogs user is &lt;code&gt;iamgogs&lt;/code&gt; rather than &lt;code&gt;git&lt;/code&gt; I needed to make sure the paths and users got updated accordingly. Once the file is updated and saved I tested to make sure it was working with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl start gogs.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After switching over to my windows machine and confirming the site loads in the browser, I returned to my ssh session to make sure systemd will automatically start the Gogs service on reboot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl enable gogs.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then a final test to make sure Gogs will start automatically when the RPi boots:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo and behold, it works.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I Prioritize Strength Training</title>
      <link>http://quakkels.com/posts/why-i-prioritize-strength-training/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/why-i-prioritize-strength-training/</guid>
      <description>&lt;p&gt;Over the last few years, I&amp;rsquo;ve taken up a new hobby; strength training. It&amp;rsquo;s something I&amp;rsquo;ve really grown to love. Though, sometimes it&amp;rsquo;s hard to articulate exactly why strength training has taken such a permanent position in my weekly routine.&lt;/p&gt;

&lt;p&gt;When I was a sedentary person my quality of life decreased every year. Even when I was in my mid 20s I was not &amp;ldquo;strong&amp;rdquo; and frequent back and shoulder pain would frustrate me for weeks at a time. Every year my bodyweight would creep up, my strength would diminish, and I&amp;rsquo;d be a little less capable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You don&amp;rsquo;t own anything in your life. You don&amp;rsquo;t own your fitness. You don&amp;rsquo;t own your health&amp;hellip; You&amp;rsquo;re always constantly needing to work at it&amp;hellip; If you don&amp;rsquo;t, you lose it. So, you&amp;rsquo;re &amp;ldquo;paying the man.&amp;rdquo; ― &lt;a href=&#34;https://www.youtube.com/watch?v=si_w5Jze-zg&amp;amp;t=330s&#34;&gt;Josh Bridges&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was losing my physical liberty. I was getting slower, weaker, and less resilient to everyday life. I&amp;rsquo;d spend my time being anxious about whether my back pain would get unbearable if I sat in the wrong chair for too long. I&amp;rsquo;d wake up in the morning in pain because I slept on my shoulder the wrong way. Utterly miserable.&lt;/p&gt;

&lt;p&gt;So this is why strength training is important. It &amp;ldquo;pays the man&amp;rdquo; so I can keep my physical liberty. It makes me more useful to my family and my community. It sets an example for my offspring that it important to be active and work hard.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Strong people are harder to kill than weak people and more useful in general.
― &lt;a href=&#34;https://www.goodreads.com/quotes/432892-strong-people-are-harder-to-kill-than-weak-people-and&#34;&gt;Mark Rippetoe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Muscular strength is inversely and independently associated with death from all causes and cancer in men, even after adjusting for cardiorespiratory fitness and other potential confounders. ― &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2453303/&#34;&gt;Association between muscular strength and mortality in men: prospective cohort study&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#39;http://quakkels.com/images/first400plusdeadlift.png&#39; style=&#34;float:right;padding:5px&#34;&gt;Strength training is an exercise in success. A person who follows a strength program and is disciplined will see improvements in their strength. They will be able to lift more, move more, and do more. That success reinforces confidence in one&amp;rsquo;s ability.  The first time I deadlifted over 400 pounds was hard hard work paying off, and it felt great.&lt;/p&gt;

&lt;p&gt;Finally, I have not seen anyone come up with a better list for &amp;ldquo;why train&amp;rdquo; than Jim Wendler:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;For physical and mental health.&lt;/li&gt;
&lt;li&gt;For self-improvement.&lt;/li&gt;
&lt;li&gt;To challenge yourself physically and mentally.&lt;/li&gt;
&lt;li&gt;To develop the bite that may help you through difficult times.&lt;/li&gt;
&lt;li&gt;To honor all the men who have fought before you; it is part of your DNA to fight.&lt;/li&gt;
&lt;li&gt;To show/prove to yourself that you can change through will.&lt;/li&gt;
&lt;li&gt;In a world of &amp;ldquo;easy&amp;rdquo;, it keeps your teeth sharp.&lt;/li&gt;
&lt;li&gt;Because we don&amp;rsquo;t have to chop wood anymore.&lt;/li&gt;
&lt;li&gt;Being stronger is ALWAYS better.&lt;/li&gt;
&lt;li&gt;To understand that there is cause and effect to action; and inaction.&lt;/li&gt;
&lt;li&gt;A stronger body can equal a stronger mind can equal a stronger body.&lt;/li&gt;
&lt;li&gt;There is zero negative consequence to being a stronger man.&lt;/li&gt;
&lt;li&gt;To be a great example to your children; fat, weak and ignorant is not a good role model.&lt;/li&gt;
&lt;li&gt;To exhaust your body and mind so as to put up with weak fools and ignorant beggars who demand what you have earned.&lt;/li&gt;
&lt;li&gt;To learn self-reliance.&lt;/li&gt;
&lt;li&gt;To understand that compassion and empathy is noble but not given lightly.&lt;/li&gt;
&lt;li&gt;Because a mentally and physically dangerous man will always be needed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;― &lt;a href=&#34;https://jimwendler.com/blogs/jimwendler-com/what-is-the-reason-for-me-to-do-this&#34;&gt;Jim Wendler&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s why I train strength.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configure Headless Raspberry Pi for Wifi and SSH</title>
      <link>http://quakkels.com/posts/configure-headless-raspberry-pi-for-wifi-and-ssh/</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/configure-headless-raspberry-pi-for-wifi-and-ssh/</guid>
      <description>

&lt;p&gt;Raspberry Pis are great little computers. Wonderful for running hobby services. But, whenever I start a new RPi project, I dislike needing to dig out my spare HDMI monitor and USB keyboard. I don&amp;rsquo;t like having to take up room and connect all that hardware to just enable SSH and Wifi which renders all that equipment unnecessary.&lt;/p&gt;

&lt;p&gt;Recently I learned how to flash a new micro SD card and configure it to connect to my Wifi network and enable SSH before even turning on the RPi for the first time.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi (mine is an RPi 3 Model B V1.2)&lt;/li&gt;
&lt;li&gt;Micro USB charge cable&lt;/li&gt;
&lt;li&gt;A powered USB hub or wall charger to plug the USB cable into&lt;/li&gt;
&lt;li&gt;Micro SD card&lt;/li&gt;
&lt;li&gt;Wifi network (and credentials to sign in to the router)&lt;/li&gt;
&lt;li&gt;A computer that&amp;rsquo;s on previously mentioned network&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Download &lt;a href=&#34;https://www.raspberrypi.org/downloads/raspbian/&#34;&gt;Raspbian Lite&lt;/a&gt;. This version is stripped down and doesn&amp;rsquo;t include things like a graphical desktop.

&lt;ul&gt;
&lt;li&gt;Save the zip file to disk, and unzip. You should see the image file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/documentation/installation/installing-images/windows.md&#34;&gt;Flash&lt;/a&gt; the Micro SD card with Raspbian Lite. I used Etcher.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/documentation/remote-access/ssh/&#34;&gt;Enable SSH&lt;/a&gt; by saving an empty file called &lt;code&gt;ssh&lt;/code&gt; to the new boot partition on the SD card.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Now this is the magic ingredient.&lt;/em&gt; &lt;a href=&#34;https://foxrow.com/raspberry-pi-headless-wifi-config&#34;&gt;Add a configuration file containing your Wifi information&lt;/a&gt; to the boot partition so that raspbian can connect on startup.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, if you&amp;rsquo;ve followed the previous steps correctly, you can eject the SD card from your reader and place it in you RPi and plug it in.&lt;/p&gt;

&lt;p&gt;After waiting a minute or two for the RPi to boot (for the first time) you can log into your router and you will be able to find it in the list of connected devices. That list should have the IP address shown so you can use it to SSH into it.&lt;/p&gt;

&lt;p&gt;Execute &lt;code&gt;ssh {IpAddress} -l pi&lt;/code&gt; and use the password &lt;code&gt;raspberry&lt;/code&gt; to login.&lt;/p&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got a functioning Raspberry Pi, &lt;a href=&#34;http://quakkels.com/posts/gogs-on-raspberry-pi/&#34;&gt;let&amp;rsquo;s do something useful with it&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Identify Valid Standards</title>
      <link>http://quakkels.com/posts/identify-valid-standards/</link>
      <pubDate>Thu, 16 Feb 2017 07:26:36 -0600</pubDate>
      
      <guid>http://quakkels.com/posts/identify-valid-standards/</guid>
      <description>

&lt;p&gt;I can&amp;rsquo;t tell you how many times I&amp;rsquo;ve been in software planning meetings when an engineer addressed the team and claimed that we should use {insert technology here} because it&amp;rsquo;s the &amp;ldquo;Industry Standard.&amp;rdquo; I also can&amp;rsquo;t tell you how many times I&amp;rsquo;ve done the same thing. I&amp;rsquo;ve gone into my boss&amp;rsquo;s office and claimed that we should use a particular stack or technology because it&amp;rsquo;s an &amp;ldquo;industry standard.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;This reasoning is attractive because on the surface it seems valid. I mean, it
must be an industry standard for a reason. Right? We&amp;rsquo;d be silly not to use it
as well. Doesn&amp;rsquo;t that make sense?&lt;/p&gt;

&lt;h2 id=&#34;hype-mentality&#34;&gt;Hype mentality&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Hey coach, I think we should run screens because it&amp;rsquo;s the league standard.
Everyone runs screens. If we want our team to win, we need to be
running screens all the time.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Choosing technology based on popularity is easy. As programmers, it&amp;rsquo;s important
to us to stay current and not let any good technology get past us. As a result,
there are many ways that we can be influenced; industry publications, surveys,
Blogs, Twitter, Reddit, even chatter in the break room. However, we need to be
careful to weigh arguments based on technical merit and not succumb to the
subliminal effects of hype.&lt;/p&gt;

&lt;h2 id=&#34;hair-on-fire-mentality&#34;&gt;Hair-on-fire mentality&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Hey coach, I think we should stop using back-shoulder passes down the field. We should remove them from our playbook entirely. Last time we ran a back-shoulder pass, we went three and out.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When bugs that appear in staging (or even worse&amp;#151;production)  people will look for a root cause for why it occurred. This is good to do and it&amp;rsquo;s definitely the correct response. But those investigating should be sure to focus on the root cause of the bug. If they find a bug in code that relies on a third party library, there is a temptation to question the decisions of the team that added the library. This is usually due to a misplaced concern that the bug is a result of using a less popular (or non-standard) library. Instead, the investigation should focus on things like logic errors, syntax errors, and whether behavior is unit tested.&lt;/p&gt;

&lt;p&gt;Sweeping rules dictating which libraries engineering teams must use are not the answer. Such a reaction result in standards that halt progress, stifle problem solving, and impede innovation.&lt;/p&gt;

&lt;h2 id=&#34;how-standards-help&#34;&gt;How standards help&lt;/h2&gt;

&lt;p&gt;When programming systems, standards should exist around the parts that need ‘glue’. Anytime there are two applications that need to talk to each other, they should follow a contract to ease communication between them. Examples of these kinds of standards include specifications for protocols such as HTTP, SAML, and OAuth.&lt;/p&gt;

&lt;p&gt;Another area that benefits from industry standards is when describing languages. There must be a standard for what an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; represents in HTML, and for how a CSS rule such as &lt;code&gt;h1 { color: red; }&lt;/code&gt; affects it. I wouldn&amp;rsquo;t be very productive in a language if when I wrote &lt;code&gt;string&lt;/code&gt; it would treat it like a &lt;code&gt;float&lt;/code&gt;. So having a language standard that defines the expected behavior of syntax and types is very helpful.&lt;/p&gt;

&lt;p&gt;The key to these standards is that they are &lt;em&gt;defining expected behavior for a given tool&lt;/em&gt;. These standards do not dictate which tool to use.&lt;/p&gt;

&lt;h2 id=&#34;picking-the-right-tool-for-a-job&#34;&gt;Picking the right tool for a job&lt;/h2&gt;

&lt;p&gt;Some may claim that one software framework or language is an “industry standard”. Often, this is a result of the person seeing it used by others or featured in articles. So, they conclude that they should use it on every project. If there is even a vague similarity between their current project and the tool’s stated goals, then some people assume they’ve found the best tool for their job. More should be considered when choosing tools.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Good reasons to use a tool:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It is stable&lt;/li&gt;
&lt;li&gt;It does what we need&lt;/li&gt;
&lt;li&gt;It is well supported&lt;/li&gt;
&lt;li&gt;Ease of use&lt;/li&gt;
&lt;li&gt;Compatible with existing system&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Bad reasons to use a tool:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It&amp;rsquo;s popular&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s new&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s been trending on Blogs and industry news sources.&lt;/li&gt;
&lt;li&gt;The current tool is boring. We could use a change.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;don-t-flippantly-swing-the-industry-standard-club&#34;&gt;Don’t flippantly swing the “Industry Standard” club&lt;/h2&gt;

&lt;p&gt;Promoting a tool by claiming that it&amp;rsquo;s an industry standard, rather than because it adheres to standards, is a mistake. There is a key difference between adhering to standards and being a standard. Industry standards are most effective when describing protocols and language behavior. We should select our tools based on how well they adhere to standards.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Don&#39;t Take Frameworks for Granted</title>
      <link>http://quakkels.com/posts/dont-take-frameworks-for-granted/</link>
      <pubDate>Sat, 28 Jan 2017 07:41:18 -0600</pubDate>
      
      <guid>http://quakkels.com/posts/dont-take-frameworks-for-granted/</guid>
      <description>&lt;p&gt;Frameworks can help jump-start productivity on projects. But be careful.
Relying too much on frameworks could also limit yourself in the long run.&lt;/p&gt;

&lt;p&gt;Whenever the opportunity presents itself, programmers should carefully consider
whether using a framework is beneficial. It may provide immediate benefits, but
there should be no magic happening that isn&amp;rsquo;t understood by the programmer.&lt;/p&gt;

&lt;p&gt;Years ago, I learned how to make websites with C#. I had help from many books,
tutorials, and co-workers. With those resources I used the ASP.NET MVC 1
framework to build websites in a new way. However, while building my sample MVC
sites, the code I wrote was there just because that&amp;rsquo;s how it was written in a
tutorial somewhere. At the time, I had very little understanding of how the
internals worked. I didn&amp;rsquo;t understand how routing worked, or how reflection
worked, or how factories fit in, or anything about what a view engine did, or
model binding. It was all just magic that I accepted and had faith in.&lt;/p&gt;

&lt;p&gt;I was able to build a working website with C# and ASP.NET MVC, and I did it
fairly quickly. It was certainly done faster than it would have been without the
framework. This fact can&amp;rsquo;t be ignored. Learning a technology while achieving
results is important for any beginner. The experience of finishing something
is valuable for the sense of accomplishment and for the motivation to keep
going. But, it&amp;rsquo;s important to understand that once a project is finished, the
learning should not stop. Understanding the building blocks of any framework is
the foundation for every solid programmer.&lt;/p&gt;

&lt;p&gt;In my case, it was very important that I continued to build up my foundation of
understanding. That&amp;rsquo;s because projects in the real world don&amp;rsquo;t just end like
side projects could. They live on and they evolve. Real projects keep receiving
feature requests. New requirements will appear. Technology will change.
Eventually, the chosen framework might lose support, or might not keep up with
requirements. When that happens, knowledge of how the framework functions is
imperative. Without that knowledge, programmers are at the mercy of tutorial
writers and the framework creators. But with a knowledgeable foundation,
programmers are equipped to continue building and shipping their projects.&lt;/p&gt;

&lt;p&gt;The bottom line is this: frameworks can be wielded much more effectively
&lt;em&gt;after&lt;/em&gt; the programmer understands enough of the language and design concepts
so that the framework&amp;rsquo;s behavior isn&amp;rsquo;t magic anymore. Programmers equipped with
such understanding will know where to look for seams in the execution pipeline,
and they will be able to add customizations where appropriate.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello, I&#39;m Brandon Quakkelaar</title>
      <link>http://quakkels.com/about/</link>
      <pubDate>Fri, 27 Jan 2017 14:36:35 -0600</pubDate>
      
      <guid>http://quakkels.com/about/</guid>
      <description>

&lt;p&gt;I believe that programming is a craft. My goal is to continuously study this
craft, and to always refine my thinking and my execution while practicing
it. I have a decade of experience and even though I have come a long way since
I started, there&amp;rsquo;s always something fresh to study that I can add to my toolbox.&lt;/p&gt;

&lt;p&gt;Software development is a wonderful discipline that requires creativity,
ingenuity, and logic. It&amp;rsquo;s wonderful because a programmer can sit at a computer
and literally create new value from nothing. I get a strong sense of
satisfaction whenever I&amp;rsquo;m able to use my code to solve real world problems that
affect real people and businesses.&lt;/p&gt;

&lt;h2 id=&#34;my-projects&#34;&gt;My Projects&lt;/h2&gt;

&lt;p&gt;When I&amp;rsquo;m not working, I like to continue growing as a programmer by having
side projects. Each side project has given me new insights and experiences. You
can read more about some of my favorite projects &lt;a href=&#34;http://quakkels.com/projects&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;my-family&#34;&gt;My Family&lt;/h2&gt;

&lt;p&gt;I am very happy to be living with my lovely wife and my
dog, in the American Midwest.&lt;/p&gt;

&lt;h2 id=&#34;my-digital-footprint&#34;&gt;My Digital Footprint&lt;/h2&gt;

&lt;p&gt;You can find me on some social network sites including:
&lt;a href=&#34;https://github.com/quakkels&#34;&gt;https://github.com/quakkels&lt;/a&gt;, and &lt;a href=&#34;https://twitter.com/quakkels&#34;&gt;https://twitter.com/quakkels&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I launched Quakkels.com on February 5th, 2017 after blogging on a different
platform since 2013. This current version of my blog uses
&lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;, a static site generator written in
&lt;a href=&#34;http://golang.com&#34;&gt;Go&lt;/a&gt;. I host using &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;.
The theme for this blog was written by myself and can be found
&lt;a href=&#34;https://github.com/quakkels/hugo-quakkels-theme&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pointing-online</title>
      <link>http://quakkels.com/projects/pointing-online/</link>
      <pubDate>Fri, 27 Jan 2017 14:36:35 -0600</pubDate>
      
      <guid>http://quakkels.com/projects/pointing-online/</guid>
      <description>&lt;p&gt;Pointing-online is a .Net Core project written in C# that was inspired by real
world needs of distributed teams practicing Agile Scrum.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Roast.it</title>
      <link>http://quakkels.com/projects/roast-it/</link>
      <pubDate>Fri, 27 Jan 2017 14:36:35 -0600</pubDate>
      
      <guid>http://quakkels.com/projects/roast-it/</guid>
      <description>&lt;p&gt;Roast.it is a simple JavaScript unit testing library designed for providing a
fast feedback loop with minimal fuss. There are no frills here. No unnecessary
dependencies. This will run unit tests for you from &lt;code&gt;npm test&lt;/code&gt;. It will not get
in your way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5 Slack Tricks that Changed My Life</title>
      <link>http://quakkels.com/posts/5-slack-tricks-that-changed-my-life/</link>
      <pubDate>Mon, 29 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/5-slack-tricks-that-changed-my-life/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/clickbait.png&#34; alt=&#34;&#34; /&gt;
&lt;em&gt;Please excuse the &amp;ldquo;click-baity&amp;rdquo; title. Sometimes I like to exaggerate.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Slack plays a significant role in my daily communication. My team at work has been using Slack as our primary mode of textual communication for over a year. It is also used by developer communities in my local area. At first, it felt a little clumsy. No more clumsy than a typical chat program. But, channels started to accumulate. The number of Direct Message feeds grew. Navigating and filtering all the conversations became more cumbersome. The tricks I will discuss here have helped me to stay nimble in Slack&amp;rsquo;s user interface. At first, I looked at Slack as a swamp of messages that I needed to wade through. But, with these small tricks, Slack has become easier to use and it even plays more of a productivity role.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ctrl+k&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you are in a large Slack room with many channels, &lt;code&gt;ctrl+k&lt;/code&gt; can be a lifesaver! It gives you quick access to a list of channels that have new conversations. It also has an easy to use search feature that allows the user to navigate from their current conversation to a different channel or user. For someone like me, this is life changing. I love being able to use as much software as I can without needing to use my mouse.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;/remind&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;At first, I thought the &lt;code&gt;/remind&lt;/code&gt; feature was a gimmick that wasn&amp;rsquo;t useful. So it took me a few months to even try it out for the first time. Once I tried it, I became dependent on it. Some of the ways to use this include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remind yourself to follow up with a colleague the next day.&lt;/li&gt;
&lt;li&gt;Remind yourself to start or end work on a project.&lt;/li&gt;
&lt;li&gt;Right before leaving work, you can remind yourself to run an errand on the way home.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My favorite way to use &lt;code&gt;/remind&lt;/code&gt; is to set time-limits on periods of
concentration. Outlook does a similar thing for meetings. About 15 minutes
ahead of time, Outlook can pop up reminders that a meeting is approaching.
I like to use &lt;code&gt;/remind&lt;/code&gt; in a similar way for things that aren&amp;rsquo;t on my calendar.&lt;/p&gt;

&lt;p&gt;For example, I may need to switch concentration contexts midway through the
day. I can use &lt;code&gt;/remind me to work on XyzProject in 2 hours&lt;/code&gt;. Once the
reminder has been set, it&amp;rsquo;s easier for me to concentrate on the current
task because I don&amp;rsquo;t need to keep project &amp;lsquo;XyzProject&amp;rsquo; in the back of my mind.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/remind&lt;/code&gt; is also useful for helping me remember the state a project was in
when I left it. For example, I can say &lt;code&gt;/remind me to bind new service 
implementations with Ninject on Monday at 8am&lt;/code&gt;. This has been a great tool
to get me working on a project right where I left off.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Star important channels&lt;/p&gt;

&lt;p&gt;This is a cool little trick the helps me group my highest priority channels together. At work, I have a handful of channels that are team specific. I like to star those so they all get prioritized at the top of the list. Then all the other channels, which are company-wide, get grouped below the starred channels. It&amp;rsquo;s the simplest thing, but works so well. Just select the channel and hover over the channel&amp;rsquo;s name at the top. Then a click-able star button will appear.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;/mute&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/mute&lt;/code&gt; has been useful for me at work where I&amp;rsquo;m in many channels. However, I don&amp;rsquo;t need constant notifications whenever someone has added a post. &lt;code&gt;/mute&lt;/code&gt; has been a great tool for alleviating the tsunami of push notifications that I would have otherwise received.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;/collapse&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If people are going nuts with &lt;code&gt;/giphy&lt;/code&gt; or posting URLs that automatically show previews, then use &lt;code&gt;/collapse&lt;/code&gt; to clean up that clutter in one giant swoop!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So those are my 5 Slack tips. But wait! There&amp;rsquo;s more. So here are a few bonus tips.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;up-arrow&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I know I&amp;rsquo;ve made posts that have errors in them. You can use the up arrow key to edit your last post, or even delete it entirely. If editing, I recommend surrounding the part that was wrong with &lt;code&gt;~&lt;/code&gt; and then adding your new edit after that. This is good helps people see what has changed.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ctrl+/&lt;/code&gt; brings up a help menu.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Into the Nether: Linux</title>
      <link>http://quakkels.com/posts/into-the-nether-linux/</link>
      <pubDate>Wed, 12 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/into-the-nether-linux/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/Debian_FVWM_Green_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The first movie I saw that really got me excited about computers was WarGames. The WOPR was an inanimate object that just sat there on screen. But, it was still a complete character all by itself. It reacted to the Matthew Broderick character&amp;rsquo;s commands and questions and became something more clever than just a boring piece of hardware. The fictional software running inside the WOPR and Broderick&amp;rsquo;s character&amp;rsquo;s ability to interface with it created a story that was incredibly mystical and exciting. It made computers seem exclusive. Only a few skilled people could understand them. People who had these skills were members of an exclusive club. They knew how things worked, and how to do the coolest tricks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/wargames.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;WarGames&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Green and blue text on black screens became a symbol of those skills. Hackers didn&amp;rsquo;t need pictures or windowed interfaces. They were the best, and therefore didn&amp;rsquo;t need any extra ornamentation. The coolest interfaces were both simple and complex. Simple because it was text, and complex because of the heavy tasks these techno elites were accomplishing. Something as simple as &amp;ldquo;knock, knock, Neo.&amp;rdquo; blew my mind the first time I saw it, not because of flashy graphics. Rather, it was because I was immersed in that fictional universe. I believed that a hacker, at a keyboard somewhere in another dimension, that was talking directly to Mr. Anderson with the text on that black screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/matrix.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Matrix&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Around this same time I learned about real people that changed the world with their computer ninja skills. Language designers, operating system inventors, and application developers who changed how we live every day. These titans of technology all knew how to build things using a black screen and green text. So let&amp;rsquo;s follow suite, hey? Let&amp;rsquo;s swallow the red pill, drink the Cool-Aid, and nerd up!&lt;/p&gt;

&lt;h2 id=&#34;enter-linux&#34;&gt;Enter Linux&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve been led to believe there is a great big computing world out there with
green text in the form of Linux. The amount of time I&amp;rsquo;ve already spent on
tangents about awesome movies means that I won&amp;rsquo;t go into the history of Linux
here. If you don&amp;rsquo;t know what Linux is, you should watch &lt;a href=&#34;https://www.youtube.com/watch?v=jw8K460vx1c&amp;amp;feature=youtu.be&#34;&gt;Revolution OS&lt;/a&gt;. It&amp;rsquo;s free. Do it now.&lt;/p&gt;

&lt;h2 id=&#34;debian-linux-on-a-virtual-machine&#34;&gt;Debian Linux on a virtual machine&lt;/h2&gt;

&lt;p&gt;I knew that installing Linux would involve climbing a learning curve. This can often lead to a little frustration. My frustration started early, but interestingly it was due to proprietary technology. Not due to Linux. I work in Windows 8.1 Pro for nearly all of my day to day development work. Windows 8.1 Pro includes Microsoft&amp;rsquo;s virtualization software called Hyper-V. From what I understand, Hyper-V can be very good. But it gave me a significant headache. My efforts to install Linux were derailed when I had trouble getting my Hyper-V VM to connect to my network. This was beyond frustrating. I eventually experienced the giant annoyance of breaking my host machine&amp;rsquo;s WiFi configuration. The only way my laptop could connect to the Internet was through a wired connection. I was beyond perturbed at this point, so once I restored my laptop&amp;rsquo;s networking settings I abandoned the idea of using Hyper-V in favor of virtualization software that I am much more familiar with: &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt;. VirtualBox is probably a better choice for this anyway because it runs on more operating systems than Hyper-V, and it doesn&amp;rsquo;t cost anything.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you have turned on Hyper-V on your Windows machine and have since decided to use different virtualization software, turn it off in the &amp;ldquo;Turn Windows Features On/Off&amp;rdquo; section of the Control Panel. If you leave it on it will compete with your new virtualization software causing unusual behavior — such as being almost completely borked.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once VirtualBox was installed, then I needed to choose a distribution of Linux
to install. After asking around on IRC, I decided to use Debian Testing for
this endeavor. Debian has three main releases. Stable, Testing, and Development.
Stable is usually very, very stable. But, to be so stable, it sacrifices current
software in favor of older software that has been tested for a longer period of
time, as in &lt;em&gt;years&lt;/em&gt; longer. The development release is (shockingly) the version of
Debian that is in development, thus it is the least stable version and prone to
breaking. The Testing release is the &amp;ldquo;just right&amp;rdquo; flavor of Debian that strikes
a balance between age and stability. Or so I&amp;rsquo;ve been told.&lt;/p&gt;

&lt;p&gt;I had a hard time finding the download link for Debian Testing. With help from IRC, I eventually came across a &lt;a href=&#34;https://www.debian.org/releases/testing/&#34;&gt;page&lt;/a&gt; explaining that the Testing release of Debian (at this time) is code-named Stretch. I decided that the most likely link to download the release I&amp;rsquo;m looking for was on &lt;a href=&#34;https://www.debian.org/devel/debian-installer/&#34;&gt;this page&lt;/a&gt;. I chose a CD ISO image for netinst (perhaps standing for &amp;lsquo;Network Installer&amp;rsquo;) and the only reason I felt somewhat sure that I was downloading the right ISO is because &amp;ldquo;stretch&amp;rdquo; was in the file name. Seems this whole section of the Debian web site could be easily improved to be more user friendly. Maybe a site that is hard to use is just a hazing ritual people have to go through in order to join the ranks of the &amp;ldquo;green text elite&amp;rdquo; programmers. If so, okay. I&amp;rsquo;m willing to jump through a couple of hoops. Remember WarGames? That shit&amp;rsquo;s awesome.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  The Debian devs seem to like Toy Story.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After the ISO finished downloading, I created a new virtual machine in VirtualBox. It got 4GB of memory and 30GB for its hard drive. I called it Luke. The next VM I spin up will probably be called Leia. I like Star Wars. Part of being a programmer is naming your stuff whatever the hell you want. Yus!&lt;/p&gt;

&lt;p&gt;Since the ISO I have is the network installer version, the networking configuration has to work, or it will not be able to get the rest of the packages it needs to finish installation. Luke was configured for Bridged networking. It should work, I won&amp;rsquo;t really know until I load the ISO as a fake CD into Luke&amp;rsquo;s fake CD drive and try to install Debian from the network. Use the network, Luke.&lt;/p&gt;

&lt;p&gt;Installing Debian was pretty easy. Being in the United States, just about all the default settings were what I wanted. Really I just had to tell the installation process which timezone I wanted and to use the entire virtual hard drive for Linux. I did decide to not install any desktop or GUI. The typical desktop experience is not the goal here. Let&amp;rsquo;s start with just the essentials. A command terminal is essential. I think it&amp;rsquo;s important to use a terminal so I can feel comfortable working in most other Linux configurations. And, I should be able to SSH into a networked Linux machine to perform maintenance, programming, configuration adjustments, and any other task a programmer may want to perform.&lt;/p&gt;

&lt;h2 id=&#34;it-s-installed-now-what&#34;&gt;It&amp;rsquo;s installed. Now what?&lt;/h2&gt;

&lt;p&gt;After it finished booting up, Debian presented a nice login screen. Really simple and uncluttered. It was nice. The green text that I like so much wasn&amp;rsquo;t there, but it had a black background. At this point I&amp;rsquo;m thinking I can probably figure out how to configure green to be the default text color. But for now, I can&amp;rsquo;t help but feel pleased with myself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/01loginscreen.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So I entered my username and my password and was greeted by a really nice, simple command prompt.&lt;/p&gt;

&lt;h2 id=&#34;where-is-sudo&#34;&gt;Where is sudo?&lt;/h2&gt;

&lt;p&gt;Apparently, some pretty standard items were missing from my current Debian setup. The obvious thing that is missing is any kind of desktop environment. I skipped that on purpose, so not a problem there. However, the plan was to install a very minimal window manager called &lt;a href=&#34;http://i3wm.org/&#34;&gt;i3wm&lt;/a&gt; that looked like it would be fun to use instead of a desktop environment that was just imitating Windows and OSX. i3 promised that it was really configurable, and the screenshots on their site had green and blue text on a black background. In short, it looked like an environment I would enjoy working in. But as I started trying to install the software I ran into problems.&lt;/p&gt;

&lt;p&gt;One of the most basic operations to perform in Linux is installing software using a package manager. Windows doesn&amp;rsquo;t have a culture around package managers, so this might seem odd to you if you are coming from a Windows only world. But, in Linux world, package managers are one of the best ways to install new programs.&lt;/p&gt;

&lt;p&gt;The package manager that Debian uses is called apt-get. This allows you to install software with a command that gets entered into the terminal. So if I wanted to install a program to be my window manager (like i3wm) I could install it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get install i3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The thing is, that command only works of the user who is entering the command had permission to install software. A user like root would need to do that. The root user in Linux is like the equivalent of an Administrator account in Windows. Root has permission to install programs. However, there is a pretty big rule that you don&amp;rsquo;t usually want to log into Linux as root. It&amp;rsquo;s just safer to not be root when you use Linux. So the typical way to install software with apt-get changes to use another program called sudo. The modified command looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install i3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The sudo command will temporarily changes your regular user&amp;rsquo;s permissions to root level so that the next command (apt-get) will be executed with elevated permissions. At least, that&amp;rsquo;s how it is supposed to be. But for me, it didn&amp;rsquo;t work!&lt;/p&gt;

&lt;p&gt;Not sure why, but for some reason my Debian instance did not have sudo installed. &lt;strike&gt;Maybe it was somehow related to me not installing a desktop environment. I don&amp;rsquo;t know for sure. But it struck me as odd.&lt;/strike&gt; &lt;a href=&#34;https://www.reddit.com/r/linux/comments/3guj67/into_the_nether_linux/cu1suqk/&#34;&gt;It seems that the reason sudo wasn&amp;rsquo;t installed is because I set a root password during installation&lt;/a&gt;. So I used a series of commands to install sudo so I could use it for all software installs going forward. Here are the commands I ran:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ su root
$ apt-get install sudo
$ sudo adduser quakkels sudo
$ su quakkels
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The su command (pronounced like soo) is the command to switch the current user to the user that is specified. Once I switched to root I was able to install sudo and add my regular user to the list of sudo-ers. Once that was completed, I switched back to my regular user account. Now I was able to install i3wm.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install i3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think it worked. Excellent!!! I sat there, looking at my screen. It didn&amp;rsquo;t change. I tried a reboot thinking that it would start up with i3wm working.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same login screen came up as before. I logged in and then thought that maybe I need to run i3 in order to start the window manager.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ i3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that definitely did not work.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo i3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That also definitely did not work. But, thanks to some advice from IRC and &lt;a href=&#34;http://blog.erikd.org/&#34;&gt;this guy&lt;/a&gt;, I knew enough that i3 has a dependency on xorg. So let&amp;rsquo;s install that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install xorg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was all well and good. But, I still had no idea why i3 wasn&amp;rsquo;t managing my windows yet! Starting to get a little annoyed. I should be patient though. It&amp;rsquo;s all about the learning experience right now. So after some googling, I found &lt;a href=&#34;https://faq.i3wm.org/question/6126/how-do-i-start-i3/&#34;&gt;this on the i3 FAQ&lt;/a&gt;. That FAQ question described almost exactly what I was experiencing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;From the FAQ:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to get started is to edit (or create, if misisng) ~/.xinitrc. If it didn&amp;rsquo;t exist, simply put exec i3 in there. If it exists, check the bottom for some exec call, comment it out and put exec i3 instead.
Once the file is saved, run startx from the TTY. This will start an X server, read the file and then start i3.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, note that the character ~ represents the current user&amp;rsquo;s home directory.&lt;/p&gt;

&lt;p&gt;After following the advice in that FAQ answer, I was able to start the i3 window manager with the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ startx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After I entered that command and pressed &amp;lsquo;enter&amp;rsquo; celebration ensued. Now I had a working i3 environment. A little google/bing/duckduckgo&amp;rsquo;ing revealed that I could open a new terminal using the keyboard shortcut alt+enter. If a user needs to launch a program that doesn&amp;rsquo;t run in a terminal, it can be started using a special prompt launched with the shortcut alt+d. Then the name of the program you want to type can be entered and launched. I quickly isntalled a few must have programs: an IRC client called irssi, and a web browser called Ice Weasel.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install irssi
$ sudo apt-get install iceweasel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;02i3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;but-but-i-thought-there-would-be-a-black-background&#34;&gt;But, but — I thought there would be a black background?&lt;/h2&gt;

&lt;p&gt;Things are going pretty well, so far. But I&amp;rsquo;m not going to hide that I felt a pang of disappointment when I opened a terminal in i3 and it had black text on a white background. That is unfortunate. When I use this VM I want to feel like I&amp;rsquo;m in the movies. I know that&amp;rsquo;s a totally shallow goal, but it&amp;rsquo;s still fun. And I&amp;rsquo;m a little stubborn. So I will have to figure this out sometime, but for now it is working.&lt;/p&gt;

&lt;h2 id=&#34;a-little-vm-housekeeping&#34;&gt;A little VM housekeeping&lt;/h2&gt;

&lt;p&gt;VirtualBox provides something called Guest Additions that can be installed in operating systems running in their VMs. Guest Additions are nice because it lets the guest machine interact with the host in a much more streamlined way. I installed it primarily because I wanted the Linux workspace to resize when I resized the VirtualBox window. There are a couple of websites out there that have decent instructions. The instructions I followed are &lt;a href=&#34;http://www.swiftsoftwaregroup.com/debian-wheezy-guest-windows-8-1-host-using-virtualbox/&#34;&gt;here&lt;/a&gt;. Configuring the VM and inserting the Guest Additions cd wasn&amp;rsquo;t an issue. But Linux has this concept of &amp;lsquo;mounting&amp;rsquo; a drive before you can use it. Maybe Windows and other OS&amp;rsquo;s have this concept too, but it may have been behind the scenes. I struggled with the mounting concept because it wasn&amp;rsquo;t in the step by step instructions that I followed. After pounding my head against the wall for way too long, I kind of stumbled on the &amp;lsquo;mount&amp;rsquo; command. The commands I used in Linux to install Guest Additions were these (executed in a root terminal):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get install module-assistant
$ m-a prepare
$ mount /media/cdrom
$ sh /media/cdrom/VBoxLinuxAdditions.run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a quick reboot, the desktop environment was working with Guest Additions nicely.&lt;/p&gt;

&lt;h2 id=&#34;chasing-that-black-background&#34;&gt;Chasing that black background&lt;/h2&gt;

&lt;p&gt;It was still important to me that the terminal in i3 had light text on a black (or dark) background. A simple command told me what terminal i3 used.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo $TERM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That printed out &amp;lsquo;xterm&amp;rsquo;. According to online search results, xterm is one of the older terminals that exist. And, it is configurable. So I got busy &lt;a href=&#34;http://scarygliders.net/2011/12/01/customize-xterm-the-original-and-best-terminal/&#34;&gt;configuring&lt;/a&gt; it according to my own tastes.&lt;/p&gt;

&lt;p&gt;At that point, I started getting frustrated. My Linux VM had no ~/.Xresources file, so I went ahead and created one. That wasn&amp;rsquo;t a problem. The first problem was when I tried to copy and paste from my web browser into the Nano text editor that I was using to edit the new .Xresources file. Ctrl+c and Ctrl+v weren&amp;rsquo;t working for me. To avoid that issue in the short term, I decided to just manually edit two configuration settings: the foreground and background colors. My patience was starting to wear thin.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xterm*foreground: rgb:4f/a3/43
xterm*background: rgb:00/00/00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I added those configuration settings to the file, closed the terminal, and opened a new terminal. Nothing changed. At this point I really was expecting the configuration file to take effect and overwrite the default settings. But it didn&amp;rsquo;t. I sat at my desk thinking about how it should have worked. It should have worked. Every other time I changed a config file it took effect as soon as the program restarted. Sure, cache might need to be cleared too. But this is how I understood computers to work. Adding or changing configuration should result in the program&amp;rsquo;s behavior changing to match. But it didn&amp;rsquo;t happen.&lt;/p&gt;

&lt;p&gt;Reading further down the &lt;a href=&#34;http://scarygliders.net/2011/12/01/customize-xterm-the-original-and-best-terminal/&#34;&gt;instructions&lt;/a&gt; led me to a command that seemed to somehow &amp;lsquo;merge&amp;rsquo; the .Xresources file with the actual configuration. This seemed odd to me. But, okay. That&amp;rsquo;s just how this works I suppose. So I ran the command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ xrdb -merge ~/.Xresources
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we&amp;rsquo;re getting somewhere! I closed the terminal and reopened it. Success! I wrote a few words and then sat back in satisfaction. I ended the day feeling great about my new Linux environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/03greenonblack.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-next-day-losing-my-cool&#34;&gt;The next day, losing my cool&lt;/h2&gt;

&lt;p&gt;What is this crap? This is some kind of messed up shit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/04blackonwhite.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The terminal colors were wrong. I changed them the day before, but the original colors were back. I checked my .Xresources config file and it hadn&amp;rsquo;t changed from the way I left it the previous day. It still had the color settings. This ticked me off. Configuration settings shouldn&amp;rsquo;t just reset themselves like this. Apparently they do in in this case though. Bad. I was beyond annoyed.&lt;/p&gt;

&lt;p&gt;Thanks to some help from this &lt;a href=&#34;http://www.linuxquestions.org/questions/slackware-14/xrdb-merge-xresources-how-can-i-get-rid-of-that-776844/#post3797806&#34;&gt;post&lt;/a&gt;,  I figured out that there is yet another step to configuring applications with .Xresources. So I added the line to my .xinitrc file and rebooted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xrdb -merge .Xresources
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That did not work. Then I changed it again, and rebooted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xrdb -merge ~/.Xresources
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This did not work. What the Hell, man? Let me guess. I probably need to not only configure the .Xresources configuration file with .xinitrc. I probably need to configure the .xinitrc configuration file inside some other configuration file. It&amp;rsquo;s configuration-ception!&lt;/p&gt;

&lt;p&gt;The actual fix was not that rage inducing as configuration-ception. Instead, there is a rational reason it isn&amp;rsquo;t working. Apparently, the .xinitrc is not a configuration file in the way that a typical XML or JSON file is a configuration file. The &amp;lsquo;rc&amp;rsquo; stands for &lt;a href=&#34;https://en.wikipedia.org/wiki/Run_commands&#34;&gt;run commands&lt;/a&gt;. The order of each line matters. I put the merge command at the end of the .xinitrc file. This means that the i3 window manager was starting before the .Xresources configuration file was merged in. So I updated the .xinitrc file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xrdb -merge ~/.Xresources
exec i3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seems so simple now. I should have realized this earlier. For crying out loud, the only two lines in this file are both commands. Well, that&amp;rsquo;s hindsight for you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Maintaining Your Vision</title>
      <link>http://quakkels.com/posts/maintaining-your-vision/</link>
      <pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/maintaining-your-vision/</guid>
      <description>&lt;p&gt;Programmers are often creators. Being a creator takes vision. Vision to see the destination, and vision to see the course. The destination could be learning a new language or technology stack. The destination could be a product to be released to customers. It could be something done for personal edification. The course is determined by taking that larger goal and breaking it down to manageable steps.&lt;/p&gt;

&lt;p&gt;The trick for successfully creating something, is to maintain that vision. But often the vision becomes lost and projects end up stalled or abandoned entirely.&lt;/p&gt;

&lt;p&gt;Patience in our work as programmers may be one of the most underrated skills a programmer could possess. There have been many articles &lt;sup&gt;(&lt;a href=&#34;http://blogoscoped.com/archive/2005-08-24-n14.html&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;http://www.jerf.org/programming/lazyProgrammersGuide.html&#34;&gt;2&lt;/a&gt;)&lt;/sup&gt; written about the benefits of being a so-called &amp;ldquo;lazy programmer&amp;rdquo; which can lead to the benefits of automating common tasks. Though, the role that patience plays in persevering in a project is something that seems to get lost in the conversation.&lt;/p&gt;

&lt;p&gt;Patience is important on many levels, but two come to mind in particular. There&amp;rsquo;s the project level, and then there&amp;rsquo;s the module level.&lt;/p&gt;

&lt;p&gt;Patience is useful on the project level when you can see your ultimate goal, but there are barriers to getting it done. A type of project that I frequently undertake is learning a new programming language. It often presents itself as &amp;ldquo;I want to write X application using X language.&amp;rdquo; I can see the application in my mind. The barrier to finishing the application is the syntax and ecosystem of the language I intend to learn. Of course, right? The point of the whole project is learn those new things. This is when impatience can be a project killer because shortcuts get taken. The original goal was twofold: 1) language and 2) application. Impatience can shift that goal into becoming a singular goal based on an exciting app, rather than the dual target of learning and also building. Project level impatience is what usually causes my personal projects to languish.&lt;/p&gt;

&lt;p&gt;What I&amp;rsquo;ll call module level impatience is the kind of thing that rears its head when you&amp;rsquo;re eyeballs deep in code. The ultimate function of the feature being written becomes the focus, and the voice of impatience starts nagging about taking shortcuts to get to the finish line faster. This impatience clouds the reasoning about the individual pieces of the feature being implemented. It is the enemy of clean and maintainable code.&lt;/p&gt;

&lt;p&gt;The truth is that when we code with an impatient mindset, then the results will suffer. Patience is required to maintain the project&amp;rsquo;s vision.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>