<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Quakkels.com</title>
    <link>http://quakkels.com/tags/programming/index.xml</link>
    <description>Recent content in Programming on Quakkels.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://quakkels.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Flat is Better Than Nested Versus Single Entry Single Exit</title>
      <link>http://quakkels.com/posts/single-entry-single-exit/</link>
      <pubDate>Thu, 26 Dec 2019 07:00:00 -0500</pubDate>
      
      <guid>http://quakkels.com/posts/single-entry-single-exit/</guid>
      <description>

&lt;p&gt;As a program ages and receives updates, more and more features are built. Logic is added and the code becomes increasingly more complicated to read and understand. So programmers invent recommended practices to manage the complexity and to preserve the maintainability of their code. The goal being to keep the cognitive load to minimum levels so the programmer can work efficiently.&lt;/p&gt;

&lt;p&gt;One popular practice is to avoid nested code when possible. The concept that flat is better than nested has been widely adopted by Python programmers who have included it in their &lt;a href= &#34;https://www.python.org/dev/peps/pep-0020/&#34; target=&#34;_blank&#34;&gt;guidelines&lt;/a&gt;. Python programmers aren&amp;rsquo;t the only group to adopt this preference. Resharper, a code analysis tool popular among C# programmers, &lt;a href=&#34;https://stackoverflow.com/q/268132&#34; target=&#34;_blank&#34;&gt;recommends coding styles that result in less nested code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, there&amp;rsquo;s another recommended practice called Single Entry Single Exit (SE/SE). When applied in modern languages, it avoids exiting a program early with multiple return statements. This can be in direct opposition to &amp;ldquo;Flatter is Better&amp;rdquo; since an important flattening technique is to return early.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public bool ValidatePassword(CredentialService credentials, string username, string password)
{
  var isValid = false;

  if (credentials.Exists(username))
  {
    if (!credentials.IsLockedOut(username))
    {
      if (credentials.IsHashValid(password, credentials.GetHashByUsername(username)))
      {
        LogValidPassword(username);
        isValid = true;
      }
      else
      {
        LogInvalidPassword(username);
      }
    }
    else
    {
      LogLockedOutUser(username);
    }
  }
  else
  {
    LogMissingUsername(username);
  }

  return isValid;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code is sound. But we can easily see that nested if/else statements quickly become difficult to read. And keep in mind that as this codebase matures it&amp;rsquo;s very likely that additional features, checks, and logging will be required by business rules.&lt;/p&gt;

&lt;p&gt;Now, consider how easy it is to read the following code which uses multiple early returns to exit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public bool ValidatePassword(CredentialService credentials, string username, string password)
{
  if (!credentials.Exists(username))
  {
    LogMissingUsername(username);
    return false;
  }

  if (credentials.IsLockedOut(username))
  {
    LogLockedOutUser(username);
    return false;
  }

  if (!credentials.IsHashValid(password, credentials.GetHashByUsername(username)))
  {
    LogInvalidPassword(username);
    return false;
  }
      
  LogValidPassword(username);
  return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My preference is to favor returning early. Composing functions such that there&amp;rsquo;s just one final return statement results in code that has more &lt;code&gt;else&lt;/code&gt; statements and multiple levels of nesting. I find these are characteristics of code that&amp;rsquo;s difficult to read. A &lt;code&gt;return&lt;/code&gt; is the end of function execution. When an early &lt;code&gt;return&lt;/code&gt; is encountered then the final result is apparent. This is not the case when setting a result value which can be changed later in execution. So a programmer would need to handle the cognitive load of more scenarios with SE/SE than they would if early returns were adopted.&lt;/p&gt;

&lt;h2 id=&#34;origins-of-single-entry-single-exit&#34;&gt;Origins of Single Entry Single Exit&lt;/h2&gt;

&lt;p&gt;The history of SE/SE is rooted in a pioneering programming paradigm called Structured Programming. The term Structured Programming was &lt;a href=&#34;https://www.cs.utexas.edu/users/EWD/ewd02xx/EWD249.PDF&#34; target=&#34;_blank&#34;&gt;coined by Edsger Dijkstra&lt;/a&gt;. It&amp;rsquo;s used to refer to programming with control structures like if/then/else, loops like for and while, and subroutines. This paradigm gained popularity thanks in part to a 1968 letter called &lt;a href=&#34;https://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF&#34; target=&#34;_blank&#34;&gt;Go-to Statement Considered Harmful&lt;/a&gt; by Dijkstra.&lt;/p&gt;

&lt;p&gt;The argument for SE/SE has it&amp;rsquo;s foundation in the argument against using &lt;code&gt;goto&lt;/code&gt;. Essentially highlighting the benefits of avoiding flows that become tangled and obfuscated to the programmer. Such code is referred to as &lt;a href=&#34;https://en.wikipedia.org/wiki/Spaghetti_code#Meaning&#34; target=&#34;_blank&#34;&gt;spaghetti code&lt;/a&gt;. Bertrand Meyer criticizes returning early, and even advises against using &lt;code&gt;continue&lt;/code&gt; and &lt;code&gt;break&lt;/code&gt; in loops. He writes about it in his book called Touch of Class: Learning to Program Well with Objects and Contracts. Regarding &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, and &lt;code&gt;break&lt;/code&gt; he says they &amp;ldquo;are just the old goto in sheep&amp;rsquo;s clothing.&amp;rdquo; His opinion seems to be overly dogmatic to me because those three keywords always jump to the same place. A &lt;code&gt;return&lt;/code&gt; will always exit the function. A &lt;code&gt;continue&lt;/code&gt; will always jump to the top of the loop. A &lt;code&gt;break&lt;/code&gt; will always exit a loop. Those behaviors are consistent and programmers have mental models for them and they&amp;rsquo;re transferable to other programs. This is unlike &lt;code&gt;goto&lt;/code&gt; which requires the programmer to hunt for the location that&amp;rsquo;s being jumped to, and therefore they must create a new mental model for each flow.&lt;/p&gt;

&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;SE/SE was for a time when the programmer handled the structure of the function rather than just the logic of it. Languages that offered multiple points of entry to subroutines can certainly become confusing. I agree that multiple entry points is a practice to be avoided. But, modern languages offer greater protections than earlier ones. So the rule is less relevant today.&lt;/p&gt;

&lt;p&gt;My disagreement is specifically with the single exit rule. I think flat code is just easier to understand than nested. Now, there are cases where a single exit is important. Multiple exit points could certainly be an issue in languages like C which require you to clean up after yourself. But the rule is not nearly as useful for languages that have features like garbage collection, &lt;code&gt;try...finally&lt;/code&gt;, and &lt;code&gt;using&lt;/code&gt; blocks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Functions for Documentation Instead of Comments</title>
      <link>http://quakkels.com/posts/functions-for-documentation-instead-of-comments/</link>
      <pubDate>Mon, 23 Dec 2019 07:00:00 -0500</pubDate>
      
      <guid>http://quakkels.com/posts/functions-for-documentation-instead-of-comments/</guid>
      <description>

&lt;p&gt;Using good function naming and composition will decrease the need for gratuitous comments and increase your code’s readability.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve become convinced that comments are often worth avoiding. Comments aren&amp;rsquo;t subject to a compiler nor to an interpreter. Code may change and the corresponding comment often remains as it was. Except now the comment is misleading. This makes maintaining the code unnecessarily difficult.&lt;/p&gt;

&lt;h2 id=&#34;use-function-names-to-document-code&#34;&gt;Use Function Names to Document Code&lt;/h2&gt;

&lt;p&gt;Consider this code that determines the &amp;ldquo;Day of the Programmer&amp;rdquo;. The &lt;code&gt;GetDay&lt;/code&gt; method (method being a function on an object) gets the date that represents the 256th day of the year. And, it accounts for when the calendar changed from Julian to Gregorian.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static DayOfTheProgrammer 
{
  public static string GetDay(int year)
  {
    var september256Day = 13;

    // Find whether the year is missing 14 days.
    if (year == 1918)
    {
      september256Day = 26;
    }
    // Find whether it&#39;s a leap year
    else if (year &amp;gt;= 1918 &amp;amp;&amp;amp; (year % 400 == 0 || year % 4 == 0 &amp;amp;&amp;amp; year % 100 != 0) || year &amp;lt; 1918 &amp;amp;&amp;amp; year % 4 == 0)
    {
      september256Day = 12;
    }

    return $&amp;quot;{september256Day}.09.{year}&amp;quot;;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code works. But it is difficult to read. The programmer has considered future maintainers by adding explanations in comments above each &lt;code&gt;if&lt;/code&gt; statement. That is a step in the right direction, however comments are particularly vulnerable to &amp;ldquo;code rot&amp;rdquo; since the compiler (or interpreter) is unaware of their content. As the code is maintained it&amp;rsquo;s easy for neglected comments to have misleading or even false information in them. I prefer using descriptive names in lieu of comments.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class DayOfTheProgrammer
{
  public static string GetDay(int year)
  {
    var september256Day = 13;

    if (IsMissing14Days(year))
    {
      september256Day = 26;
    }
    else if (IsLeapYear(year))
    {
      september256Day = 12;
    }

    return $&amp;quot;{september256Day}.09.{year}&amp;quot;;
  }
sxz
  private static bool IsMissing14Days(int year)
  {
    return year == 1918;
  }

  private static bool IsLeapYear(int year)
  {
    return year &amp;gt;= 1918 
      &amp;amp;&amp;amp; (year % 400 == 0 || year % 4 == 0 &amp;amp;&amp;amp; year % 100 != 0) 
      || year &amp;lt; 1918 
      &amp;amp;&amp;amp; year % 4 == 0;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refactoring the code into functions with meaningful names has eliminated the need for the original comments. The same information is being communicated in both versions of the code. However, the original is vulnerable to comment rot while the refactored code that uses descriptive names is easier to maintain.&lt;/p&gt;

&lt;p&gt;The programmer may decide to refactor further. The conditional statement in &lt;code&gt;IsLeapYear&lt;/code&gt; is still pretty long and requires effort to read and understand. We can add documentation by using descriptive variable names.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static bool IsLeapYear(int year)
{
  var isGregorianCalendar = year &amp;gt;= 1918;
  var isGregorianLeapYear = year % 400 == 0 || year % 4 == 0 &amp;amp;&amp;amp; year % 100 != 0;

  if (isGregorianCalendar &amp;amp;&amp;amp; isGregorianLeapYear)
  {
    return true;
  }

  var isJulianCalendar = !isGregorianCalendar;
  var isJulianLeapYear = year % 4 == 0;

  return isJulianCalendar &amp;amp;&amp;amp; isJulianLeapYear;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(For more information about the Day of the Programmer problem visit &lt;a href=&#34;https://www.hackerrank.com/challenges/day-of-the-programmer/problem&#34; target=&#34;_blank&#34;&gt;HackerRank&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&#34;prefer-smaller-functions&#34;&gt;Prefer Smaller Functions&lt;/h2&gt;

&lt;p&gt;Long functions typically suffer from multiple code flows, varying levels of abstraction, and they often have &amp;ldquo;sections&amp;rdquo; delineated by comments. If the programmer feels the need to use comments to separate a program into sections, that could be an opportunity to write smaller functions with descriptive names.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The first rule of functions is that they should be small. The second rule of functions is that &lt;em&gt;they should be smaller than that.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;— Clean Code by Robert C. Martin (pp. 34)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;useful-comments&#34;&gt;Useful Comments&lt;/h2&gt;

&lt;p&gt;Though I believe that comments are often worth avoiding, there are times when comments are useful.&lt;/p&gt;

&lt;p&gt;Useful comments often fall into one of the following categories.&lt;/p&gt;

&lt;h3 id=&#34;legal&#34;&gt;Legal&lt;/h3&gt;

&lt;p&gt;Legal comments such as copyright and license information.&lt;/p&gt;

&lt;h3 id=&#34;explanation-of-intent&#34;&gt;Explanation of Intent&lt;/h3&gt;

&lt;p&gt;Good comments can explain the programmer&amp;rsquo;s intention rather than explaining the implementation. Don&amp;rsquo;t explain how it works, rather explain the reason why it works that way.&lt;/p&gt;

&lt;h3 id=&#34;warning&#34;&gt;Warning&lt;/h3&gt;

&lt;p&gt;Comments can be useful for communicating warnings about possible consequences. Things like &lt;code&gt;// takes a long time to run&lt;/code&gt;, or &lt;code&gt;// not thread safe&lt;/code&gt; are good to know and difficult to document without a brief comment.&lt;/p&gt;

&lt;p&gt;If a comment falls outside of the previous three categorizations, explore the idea of removing it. The message might be a good candidate for documenting with function names, or variable names.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Naming Things Clearly</title>
      <link>http://quakkels.com/posts/clean-names/</link>
      <pubDate>Tue, 17 Dec 2019 07:00:00 -0500</pubDate>
      
      <guid>http://quakkels.com/posts/clean-names/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&#34; target=&#34;_blank&#34;&gt;Clean Code by Robert C. Martin&lt;/a&gt; is one of my favorite programming texts. It has a chapter called Meaningful Names wherein principles for the clear and clean naming of code elements are explained.&lt;/p&gt;

&lt;p&gt;When we write code we should be considering the programmer who follows us. Sometimes it may be ourselves who have not touched the code for months or years. The programmer working in previously written code will need to study it to try and recognize the intention and systems of the original author. Making the code as easy to understand as possible is the author&amp;rsquo;s responsibility. When writing professional code, resist urges to &amp;lsquo;be clever&amp;rsquo; or to sacrifice clarity for brevity.&lt;/p&gt;

&lt;p&gt;Use these good naming principles and the programmers who follow us will be grateful.&lt;/p&gt;

&lt;h2 id=&#34;use-names-that-show-intent&#34;&gt;Use Names That Show Intent&lt;/h2&gt;

&lt;p&gt;Name things so that we can identify them. Consider the variable declared below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DateTime z;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can clearly see there is a variable. We can tell it&amp;rsquo;s a &lt;code&gt;DateTime&lt;/code&gt;. Though, we can&amp;rsquo;t tell what it&amp;rsquo;s used for from just the name. A programmer may try to add clarity be adding a few more keystrokes to the names.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DateTime login;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This improves readability somewhat. But it the programmer still isn&amp;rsquo;t clear about what purpose this variable is intended to serve. The name could be further improved by adding more details.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DateTime lastLoginUtc;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a better name because it communicates several things about the intent of the variable. It is intended to hold a UTC date representing the last time there was a login. The original name, &lt;code&gt;z&lt;/code&gt;, communicated none of that intent. The program using &lt;code&gt;z&lt;/code&gt; would have been harder to decipher.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a slightly more complex example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public bool GetResult(Dictionary&amp;lt;string, string&amp;gt; a, string x, string y)
{
  if (!a.ContainsKey(x)) 
  {
    return false;
  }

  return compare(y, a[x]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This isn&amp;rsquo;t doing anything complex, but it&amp;rsquo;s not obvious what&amp;rsquo;s happening. See how much cleaner things get when meaningful names are applied.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public bool ValidatePassword(Dictionary&amp;lt;string, string&amp;gt; credentials, string username, string password)
{
  if (!credentials.ContainsKey(username)) 
  {
    return false;
  }

  return CheckHash(password, credentials[username]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When names show intention we have a much better idea of the job this code performs.&lt;/p&gt;

&lt;h2 id=&#34;avoid-false-clues&#34;&gt;Avoid False Clues&lt;/h2&gt;

&lt;p&gt;Programmers should not use names that have common meanings which could mislead the reader from what the variable actually represents. For example &lt;code&gt;ee&lt;/code&gt; is a bad variable name. Depending on the reader&amp;rsquo;s background they may be led to believe it stands for Expected Error, Employee Experience, or just Employee.&lt;/p&gt;

&lt;p&gt;Similarly, if a variable refers to a collection of employees, avoid using &lt;code&gt;employeeList&lt;/code&gt; unless it&amp;rsquo;s actually a list. In fact, often it&amp;rsquo;s preferable to not indicate data type in the variable&amp;rsquo;s name. A pluralized name, such as &lt;code&gt;employees&lt;/code&gt;, communicates that it can hold multiple employee objects.&lt;/p&gt;

&lt;h2 id=&#34;avoid-noise&#34;&gt;Avoid Noise&lt;/h2&gt;

&lt;p&gt;When attempting to write descriptive names, be careful to avoid meaningless noise. For example, words like &amp;ldquo;info&amp;rdquo; or &amp;ldquo;detail&amp;rdquo; can easily become noise. Consider the method name &lt;code&gt;GetUserClaims()&lt;/code&gt;. Some may be inclined to name it &lt;code&gt;GetUserClaimsInfo()&lt;/code&gt; or &lt;code&gt;GetUserClaimsDetail()&lt;/code&gt; even though the extra words don&amp;rsquo;t add any new information for the reader.&lt;/p&gt;

&lt;h2 id=&#34;names-should-fit-in-conversation&#34;&gt;Names Should Fit in Conversation&lt;/h2&gt;

&lt;p&gt;Abbreviating terms or using acronyms can produce names that are awkward to verbalize in regular conversation. Avoid difficult to pronounce names in favor of names that are easily said.&lt;/p&gt;

&lt;p&gt;Prefer &lt;code&gt;originalLoginDate&lt;/code&gt; over &lt;code&gt;ogLgnDt&lt;/code&gt;. Also prefer &lt;code&gt;EnableLongDescription&lt;/code&gt; over &lt;code&gt;ENBLNGDESC&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;don-t-use-encodings&#34;&gt;Don&amp;rsquo;t Use Encodings&lt;/h2&gt;

&lt;p&gt;Names that use encodings often violate more than one of the previously recommended rules. They introduce an additional learning curve and require programmers to be subjected to unnecessary extra effort to decipher such names.&lt;/p&gt;

&lt;p&gt;The most egregious offenses I&amp;rsquo;ve seen are names for database tables and columns in ERP software. From a real ERP we find this example, &lt;code&gt;CO00101&lt;/code&gt;. The name provides next to no clues regarding the table&amp;rsquo;s purpose. The programmer is expected to know that it refers to the table representing &amp;ldquo;Document Attachment Master.&amp;rdquo; Not only does this example use encodings, it also violates the principle that names should show intent. It&amp;rsquo;s an unfortunate name on multiple levels.&lt;/p&gt;

&lt;p&gt;Hungarian Notation is an encoding scheme that has historically been popular. But it is a violation of this avoid-encodings rule. In some pioneering programming languages it was necessary to encode information about the variable within the variable name itself using mnemonics. Today our languages and IDEs are advanced enough to have nearly eliminate any need for Hungarian Notation style encodings.&lt;/p&gt;

&lt;h3 id=&#34;don-t-use-encodings-exceptions-to-the-rule&#34;&gt;Don&amp;rsquo;t Use Encodings: Exceptions to the Rule&lt;/h3&gt;

&lt;p&gt;Using prefixes for names of class members is still a commonly encountered encoding technique. Uncle Bob  recommends avoiding member prefixes entirely. He writes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;people quickly learn to ignore the prefix (or suffix) to see the meaningful part of the name. The more we read the code, the less we see the prefixes. Eventually the prefixes become unseen clutter and a marker of older code.&lt;/p&gt;

&lt;p&gt;— Clean Code by Robert C. Martin (pp. 24)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I haven&amp;rsquo;t yet decided whether I agree with avoiding member prefixes. Consider this class with member prefixes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class User
{
  private string _username;

  public User(string username)
  {
    _username = username;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And compare it to a version without the member prefix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class User
{
  private string username;

  public User(string username)
  {
    this.username = username;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m hard pressed to say one is superior to the other. Ultimately, I don&amp;rsquo;t think this is a hill worth dying on. I would object to a more involved member prefix, such as &lt;code&gt;m_&lt;/code&gt; instead of just &lt;code&gt;_&lt;/code&gt;. But I think both versions of the &lt;code&gt;User&lt;/code&gt; class are easy to read. However, I would advocate for either &lt;code&gt;this.username&lt;/code&gt; or &lt;code&gt;_username&lt;/code&gt; when assigning the field rather than &lt;code&gt;username = username&lt;/code&gt;. While &lt;code&gt;username = username&lt;/code&gt; does work in languages like C#, it appears redundant. And, it violates the &amp;ldquo;avoid false clues&amp;rdquo; rule.&lt;/p&gt;

&lt;p&gt;Another exception comes up when dealing with interfaces and concrete classes. If we have need for a configuration service with an interface and a concrete implementation, then how would the names be different between the two. It&amp;rsquo;s common to use an &lt;code&gt;I&lt;/code&gt; prefix to indicate an interface. So &lt;code&gt;IConfigurationService&lt;/code&gt; and &lt;code&gt;ConfigurationService&lt;/code&gt; for the concrete class implementation. But Uncle Bob prefers having the encoding on the concrete class, rather than on the interface. His reasoning for this is that the users of the configuration service interface have no need to know that they&amp;rsquo;ve been given an interface. So, he&amp;rsquo;d name them something like &lt;code&gt;ConfigurationService&lt;/code&gt;, and &lt;code&gt;ConfigurationServiceImp&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;use-nouns-for-class-names&#34;&gt;Use Nouns For Class Names&lt;/h2&gt;

&lt;p&gt;This is a straightforward rule. Classes and objects should be thought of as nouns. So, they should be named that way. They shouldn&amp;rsquo;t have verbs.&lt;/p&gt;

&lt;h2 id=&#34;use-verbs-for-method-names&#34;&gt;Use Verbs For Method Names&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s another straightforward rule. Methods are &amp;ldquo;doers&amp;rdquo; so their name should have a verb for what they are doing. &lt;code&gt;GetCredentials&lt;/code&gt;, &lt;code&gt;ValidatePassword&lt;/code&gt;, and &lt;code&gt;AddUser&lt;/code&gt; are all good method names.&lt;/p&gt;

&lt;h2 id=&#34;avoid-inside-jokes-references-and-general-cleverness&#34;&gt;Avoid Inside Jokes, References, and General &amp;ldquo;Cleverness&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;As fun as it might be, avoid using &amp;ldquo;easter eggs&amp;rdquo; or cultural references in your code. Instead, just be direct and write what you mean. Don&amp;rsquo;t require the reader to resist a distraction and map a label to a concept while they&amp;rsquo;re trying to understand your code.&lt;/p&gt;

&lt;h3 id=&#34;exceptions-to-avoiding-jokes-and-references&#34;&gt;Exceptions to Avoiding Jokes and References&lt;/h3&gt;

&lt;p&gt;There is a very specific exception to this rule. Cultural references and inside jokes &lt;em&gt;must&lt;/em&gt; be encouraged whenever you&amp;rsquo;re writing in the &lt;a href=&#34;https://lhartikk.github.io/ArnoldC/&#34; target=&#34;_blank&#34;&gt;ArnoldC&lt;/a&gt; language&lt;/p&gt;

&lt;h2 id=&#34;pick-one-word-per-concept&#34;&gt;Pick One Word Per Concept&lt;/h2&gt;

&lt;p&gt;Some words could be used interchangeably to use the same thing. In such scenarios settle on one word for each abstract concept. For example, using &lt;code&gt;Configuration&lt;/code&gt; and &lt;code&gt;Settings&lt;/code&gt; to represent the same concept could be confusing. Likewise, avoid using &lt;code&gt;Fetch&lt;/code&gt; alongside &lt;code&gt;Get&lt;/code&gt;. Having consistent terminology is very useful for teams working together. I&amp;rsquo;ve been part of many conversations over the difference between a &lt;code&gt;UserManager&lt;/code&gt; class and a &lt;code&gt;UserService&lt;/code&gt; class. The important thing is to identify the concept, and settle on a single word to represent it.&lt;/p&gt;

&lt;h2 id=&#34;don-t-pun&#34;&gt;Don&amp;rsquo;t Pun&lt;/h2&gt;

&lt;p&gt;Don&amp;rsquo;t have one word mean more than one thing. Uncle Bob highlights that doing so is essentially making a pun. The example he gives is &lt;code&gt;Add&lt;/code&gt;. A codebase may have many &lt;code&gt;Add&lt;/code&gt; methods in it, and they all create a new value by adding or concatenating two values. A programmer may want to add a value to a collection, and for consistency&amp;rsquo;s sake use the word &lt;code&gt;Add&lt;/code&gt; as the method name, even though the operation being performed is different than every other use of the word. &lt;code&gt;Insert&lt;/code&gt; or &lt;code&gt;Append&lt;/code&gt; would be better choices for such a method.&lt;/p&gt;

&lt;h2 id=&#34;use-solution-domain-names&#34;&gt;Use Solution Domain Names&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s okay to use computer science terms, algorithm names, and so on, in our code. Our readers will be other programmers, so it&amp;rsquo;s alright to expect them to know these things.&lt;/p&gt;

&lt;h2 id=&#34;use-problem-domain-names&#34;&gt;Use Problem Domain Names&lt;/h2&gt;

&lt;p&gt;Don&amp;rsquo;t invent new terms to represent concepts in the problem domain. Instead use the terms that the problem domain experts use. This will aid in communication, and when someone takes maintains the code after you, they&amp;rsquo;ll be able to ask questions using terminology that the problem domain expert will understand.&lt;/p&gt;

&lt;h2 id=&#34;add-meaningful-context&#34;&gt;Add Meaningful Context&lt;/h2&gt;

&lt;p&gt;Names usually require some amount of context to be meaningful. The context can be provided by well named classes inside of well names namespaces. For example, a &lt;code&gt;State&lt;/code&gt; variable might not be immediately obvious as part of an address. But if it&amp;rsquo;s a property on an &lt;code&gt;Address&lt;/code&gt; class then what &lt;code&gt;Address.State&lt;/code&gt; is becomes much clearer.&lt;/p&gt;

&lt;h2 id=&#34;don-t-add-gratuitous-context&#34;&gt;Don&amp;rsquo;t Add Gratuitous Context&lt;/h2&gt;

&lt;p&gt;Most of the rules explored so far tend to lead us toward longer more descriptive names. But, a short name that is clear is always better than a longer name that is equally clear.&lt;/p&gt;

&lt;h3 id=&#34;gratuitous-context-comments&#34;&gt;Gratuitous Context: Comments&lt;/h3&gt;

&lt;p&gt;I submit that comments are a code smell that indicates poorly named code. Comments become stale easily because they&amp;rsquo;re not subject to a compiler nor an interpreter. Following the previous rules will help reduce the need for comments because the code&amp;rsquo;s intent and readability will be improved enough to eliminate the need for many of them.&lt;/p&gt;

&lt;p&gt;A general rule I like is to limit my comments to &amp;ldquo;why&amp;rsquo;s&amp;rdquo;. Comments explaining what is happening or how it&amp;rsquo;s happening are usually vestigial because the code itself should be communicating the &amp;ldquo;what&amp;rdquo; and &amp;ldquo;how&amp;rdquo;. However, the sometimes does a poor job of explaining the &amp;ldquo;why&amp;rdquo;. If you identify a section of your code that may be confusing because it&amp;rsquo;s not obvious why it needs to be there then double check whether it&amp;rsquo;s possible to refactor to make the code clearer. Then, if &amp;ldquo;why&amp;rdquo; is still a question, then a comment may be appropriate. Though it should be a very rare occurrence.&lt;/p&gt;

&lt;h2 id=&#34;takeaways&#34;&gt;Takeaways&lt;/h2&gt;

&lt;p&gt;Solving problems with code is the programmer&amp;rsquo;s primary concern. But, a professional programmer also bears the responsibility of writing code that can be understood by others. If he fails at that task his code will rot, and eventually become too cumbersome to improve and use. Strive to infuse these previous guidelines into your code writing process. The results will be programs that are crafted together with a clarity that you, and those who follow you, will appreciate.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Our goal, as authors, is to make our code as easy as possible to understand. We want our code to be a quick skim, not an intense study. We want to use the popular paperback model whereby the author is responsible for making himself clear and not the academic model where it is the scholar&amp;rsquo;s job to dig the meaning out of the paper.&lt;/p&gt;

&lt;p&gt;— Clean Code by Robert C. Martin (pp. 27)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Mobile Development and Xamarin</title>
      <link>http://quakkels.com/posts/getting-started-with-mobile-development-and-xamarin/</link>
      <pubDate>Tue, 04 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/getting-started-with-mobile-development-and-xamarin/</guid>
      <description>

&lt;p&gt;Xamarin enables programmers to write native mobile applications for both Android and iOS using C# and free development tools like Visual Studio Community Edition. This means that if you&amp;rsquo;re invested in the .NET ecosystem and the C# language, you can write cross-platform mobile applications using technology that&amp;rsquo;s already familiar to you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A note on development for iOS:&lt;/strong&gt; You will need a mac in order to build iOS versions of the app. I don&amp;rsquo;t have a Mac available, so I&amp;rsquo;ll be getting started with a cross-platform project, but I&amp;rsquo;ll just be using Windows and testing the Android version.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Visit &lt;a href=&#34;https://visualstudio.microsoft.com/&#34;&gt;https://visualstudio.microsoft.com/&lt;/a&gt; to download Visual Studio Community (the free version) and install it. Be sure to select Mobile Development Tools during installation so Xamarin projects will be available.&lt;/p&gt;

&lt;h2 id=&#34;intended-audience&#34;&gt;Intended Audience&lt;/h2&gt;

&lt;p&gt;This is written for C# programmers who want to start working with mobile apps. If you&amp;rsquo;re not somewhat familiar with using Visual Studio, C#, or XML then this may be challenging to follow.&lt;/p&gt;

&lt;h2 id=&#34;mvvm&#34;&gt;MVVM&lt;/h2&gt;

&lt;p&gt;Before we create the first project, a quick word on practices. There are many ways of organizing an app, and one of the best practices is to use the MVVM pattern. MVVM stands for Model, View, View Model.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt; (Data)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;View&lt;/strong&gt; (Presentation)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;View Model&lt;/strong&gt; (Business Rules)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By keeping our data in the Model, our presentation code in the View, and our business logic in the View Model we&amp;rsquo;re keeping concerns separate. This will make the project simpler to understand and maintain as it grows.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s funny how different ecosystems have different names for very similar concepts. Django has Model/View/Template. ASP.NET MVC has Model/View/Controller. XAML has MVVM. The consistent core idea is to separate concerns to make things simple to understand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;create-a-new-project&#34;&gt;Create a New Project&lt;/h2&gt;

&lt;p&gt;In Visual Studio select File &amp;gt; New &amp;gt; Project from the menu.&lt;/p&gt;

&lt;p&gt;In the New Project Dialog select the category Installed &amp;gt; Visual C# &amp;gt; Cross-Platform from the list on the left. Then choose the Mobile App (Xamarin.Forms) project type and name it. I named mine &amp;ldquo;Lavender&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/xamarin-create-project.png&#34; alt=&#34;Create a Xamarin project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then in the next dialog, select Blank.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/xamarin-create-cross-platform-project.png&#34; alt=&#34;Create a Xamarin cross-platform mobile project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that &amp;ldquo;Code Sharing Strategy&amp;rdquo; is .NET Standard. This is very interesting if you&amp;rsquo;re familiar with the new .NET Standard approach that Microsoft is implementing for the .NET ecosystem. .NET Core and ASP.NET are both proceeding using the same .NET Standard libraries supporting them. Having this option for Xamarin projects means that .NET programmers will have access to the same libraries for mobile that they&amp;rsquo;re used to using in their other projects.&lt;/p&gt;

&lt;p&gt;Now we have a solution called Lavender and three projects in that solution. The main Lavender project, and a project each for Android and iOS.&lt;/p&gt;

&lt;p&gt;Create folders inside the Lavender project to support the MVVM pattern. Create Models, Views, and ViewModels folders. To do this, right click on the Lavender project (not the Lavender solution,) and go to Add &amp;gt; New Folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/xamarin-create-mvvm-folders.png&#34; alt=&#34;Create MVVM folders&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When Visual Studio created the Lavender project, it automatically created a view for us called &lt;code&gt;MainPage.xaml&lt;/code&gt;, and it has &lt;code&gt;MainPage.xaml.cs&lt;/code&gt; behind it. Move those two files into the Views folder by dragging and dropping &lt;code&gt;MainPage.xaml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/xamarin-move-mainpage-into-views-folder.png&#34; alt=&#34;Move MainPage.xaml into Views folder&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;MainPage.xaml&lt;/code&gt; and give it this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&amp;quot;http://xamarin.com/schemas/2014/forms&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             xmlns:local=&amp;quot;clr-namespace:Lavender&amp;quot;
             x:Class=&amp;quot;Lavender.MainPage&amp;quot;&amp;gt;
  &amp;lt;ContentPage.Content&amp;gt;
    &amp;lt;StackLayout&amp;gt;
      &amp;lt;Label Text=&amp;quot;Hello World!&amp;quot; FontSize=&amp;quot;Large&amp;quot; /&amp;gt;
    &amp;lt;/StackLayout&amp;gt;
  &amp;lt;/ContentPage.Content&amp;gt;
&amp;lt;/ContentPage&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A XAML &lt;code&gt;&amp;lt;ContentPage&amp;gt;&lt;/code&gt; can only have one object in it. But, the reason we are using the &lt;code&gt;&amp;lt;ContentPage.Content&amp;gt;&lt;/code&gt; object is because it can contain multiple objects. The &lt;code&gt;&amp;lt;StackLayout&amp;gt;&lt;/code&gt; will literally stack objects either vertically (by default) or horizontally. The &lt;code&gt;&amp;lt;Label&amp;gt;&lt;/code&gt; object is easiest way to get text to display on screen.&lt;/p&gt;

&lt;p&gt;Save the file, then launch the debugger. The first time launching in the emulator may take some time&amp;hellip; maybe several minutes&amp;hellip; but eventually you will see it running.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since this is running on Windows without a Mac, the project that runs needs to be the Lavender.Android project. Also, when you run this, you&amp;rsquo;ll want to make sure you have the Android SDK installed for the version(s) of Android you&amp;rsquo;re targeting.
To manage your SDK tools, you can find a button for &amp;ldquo;Open Android SDK Manager&amp;rdquo; in the toolbar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/xamarin-manage-android-sdks.png&#34; alt=&#34;Manage Android SDKs&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will see this once the project finishes building, the emulator starts, and the app installs in the emulator:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/xamarin-debug-mobile-project.png&#34; alt=&#34;Debugging a Xamarin project&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;add-data-binding-between-the-view-and-the-view-model&#34;&gt;Add Data Binding Between the View and the View Model&lt;/h2&gt;

&lt;p&gt;Add a label control that will bind to the &lt;code&gt;Name&lt;/code&gt; attribute of a view model. Update &lt;code&gt;MainPage.xaml&lt;/code&gt; to have this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&amp;quot;http://xamarin.com/schemas/2014/forms&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             xmlns:local=&amp;quot;clr-namespace:Lavender&amp;quot;
             x:Class=&amp;quot;Lavender.MainPage&amp;quot;&amp;gt;
  &amp;lt;ContentPage.Content&amp;gt;
    &amp;lt;StackLayout&amp;gt;
      &amp;lt;Label Text=&amp;quot;{Binding Name,StringFormat=&#39;Hello, \{0\}!&#39;}&amp;quot; FontSize=&amp;quot;Large&amp;quot; /&amp;gt;
    &amp;lt;/StackLayout&amp;gt;
  &amp;lt;/ContentPage.Content&amp;gt;
&amp;lt;/ContentPage&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s worth highlighting that these UI changes are being made in the shared library. This is reusable code that both Android and iOS will leverage. The Android and iOS specific projects are &lt;em&gt;not&lt;/em&gt; being modified. Yet, the controls being displayed are the same native controls that you would get if you were building this app for Android using Java or for iOS using Objective-C or Swift. Not only is the code in a shared library, but the executable is &lt;em&gt;not&lt;/em&gt; running in a VM like would be the case for portable JavaScript solutions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create a new class in the &lt;code&gt;ViewModels&lt;/code&gt; folder. Call it &lt;code&gt;MainPageViewModel.cs&lt;/code&gt; and put this code inside:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace Lavender.ViewModels
{
  public class MainPageViewModel
  {
    public string Name { get; set; }

    public MainPageViewModel()
    {
      Name = &amp;quot;Anonymous&amp;quot;;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Name&lt;/code&gt; property is what we&amp;rsquo;ll use for data binding. And, we&amp;rsquo;re setting the value to &lt;code&gt;Anonymous&lt;/code&gt; for now.&lt;/p&gt;

&lt;p&gt;Then, update the &lt;code&gt;MainPage.xaml.cs&lt;/code&gt; code-behind file to use the &lt;code&gt;MainPageViewModel&lt;/code&gt; class as its binding context.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Lavender.ViewModels;
using Xamarin.Forms;

namespace Lavender
{
  public partial class MainPage : ContentPage
  {
    private readonly MainPageViewModel viewModel;

    public MainPage()
    {
      InitializeComponent();
      viewModel = new MainPageViewModel();
      BindingContext = viewModel;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compile and debug the project with that change. You will see it in the emulator.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/xamarin-hello-anonymous.png&#34; alt=&#34;Xamarin Hello Anonymous&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This shows that &lt;code&gt;MainPageViewModel&lt;/code&gt; is being bound as the context in &lt;code&gt;MainPage.xaml.cs&lt;/code&gt; and the value that was set on initialization is &amp;ldquo;Anonymous&amp;rdquo; and that is being passed to the &lt;code&gt;MainPage.xaml&lt;/code&gt; view correctly.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s do something with the value entered by the user.&lt;/p&gt;

&lt;h2 id=&#34;add-form-to-let-the-user-update-their-name&#34;&gt;Add Form to Let the User Update Their Name&lt;/h2&gt;

&lt;p&gt;Update &lt;code&gt;MainPage.xaml&lt;/code&gt; to add form controls allowing the user to enter and submit their actual name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&amp;quot;http://xamarin.com/schemas/2014/forms&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             xmlns:local=&amp;quot;clr-namespace:Lavender&amp;quot;
             x:Class=&amp;quot;Lavender.MainPage&amp;quot;&amp;gt;
  &amp;lt;ContentPage.Content&amp;gt;
    &amp;lt;StackLayout&amp;gt;
      &amp;lt;Label Text=&amp;quot;{Binding Name,StringFormat=&#39;Hello, \{0\}!&#39;}&amp;quot; FontSize=&amp;quot;Large&amp;quot; /&amp;gt;
      &amp;lt;Label Text=&amp;quot;Name&amp;quot; /&amp;gt;
      &amp;lt;Entry Text=&amp;quot;{Binding NameEntry}&amp;quot; /&amp;gt;
      &amp;lt;Button x:Name=&amp;quot;Button&amp;quot; Text=&amp;quot;Submit&amp;quot; Command=&amp;quot;{Binding SubmitCommand}&amp;quot; /&amp;gt;
    &amp;lt;/StackLayout&amp;gt;
  &amp;lt;/ContentPage.Content&amp;gt;
&amp;lt;/ContentPage&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two elements that bind to properties that we haven&amp;rsquo;t created yet. &lt;code&gt;&amp;lt;Entry Text=&amp;quot;{Binding NameEntry}&amp;quot; /&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Button x:Name=&amp;quot;Button&amp;quot; Text=&amp;quot;Submit&amp;quot; Command=&amp;quot;{Binding SubmitCommand}&amp;quot; /&amp;gt;&lt;/code&gt; will require us to change the view model.&lt;/p&gt;

&lt;p&gt;But, before we make changes to the view model, we need to create a new class that will facilitate notifying the view when the data in the view model changes.&lt;/p&gt;

&lt;p&gt;Create a new file in the &lt;code&gt;ViewModels&lt;/code&gt; folder and call it &lt;code&gt;ViewModelBase.cs&lt;/code&gt;. Then put this code inside:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace Lavender.ViewModels
{
  public abstract class ViewModelBase : INotifyPropertyChanged
  {

    public event PropertyChangedEventHandler PropertyChanged;
    protected void OnPropertyChanged([CallerMemberName] string propertyName = &amp;quot;&amp;quot;)
    {
      var changed = PropertyChanged;
      if (changed == null)
        return;

      changed.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    protected bool SetProperty&amp;lt;T&amp;gt;(ref T backingStore, T value,
      [CallerMemberName]string propertyName = &amp;quot;&amp;quot;,
      Action onChanged = null)
    {
      if (EqualityComparer&amp;lt;T&amp;gt;.Default.Equals(backingStore, value))
      {
        return false;
      }

      backingStore = value;
      onChanged?.Invoke();
      OnPropertyChanged(propertyName);
      return true;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This abstract class gives us the &lt;code&gt;SetProperty&amp;lt;T&amp;gt;()&lt;/code&gt; method which both changes the property&amp;rsquo;s value, &lt;em&gt;and&lt;/em&gt; it notifies the UI so it knows to display the new value.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s update &lt;code&gt;MainPageViewModel.cs&lt;/code&gt; to use this new abstract class. We&amp;rsquo;ll also add the new properties that the view needs for binding.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Windows.Input;
using Xamarin.Forms;

namespace Lavender.ViewModels
{
  public class MainPageViewModel : ViewModelBase
  {
    public string NameEntry { get; set; }

    private string _name;
    public string Name
    {
      get { return _name; }
      set { SetProperty(ref _name, value); }
    }

    public ICommand SubmitCommand { get; }

    public MainPageViewModel()
    {
      Name = &amp;quot;Anonymous&amp;quot;;
      SubmitCommand = new Command(() =&amp;gt; { Name = NameEntry; });
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;MainPageViewModel&lt;/code&gt; now inherits from &lt;code&gt;ViewModelBase&lt;/code&gt; which give us the &lt;code&gt;SetProperty()&lt;/code&gt; method. This class also has new properties now: &lt;code&gt;NameEntry&lt;/code&gt; to support the name entry field, and &lt;code&gt;SubmitCommand&lt;/code&gt; to support the submit button. The property &lt;code&gt;Name&lt;/code&gt; has also been updated to use the &lt;code&gt;SetProperty()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;When we run the debugger, now we see this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/xamarin-hello-anonymous-form.png&#34; alt=&#34;Xamarin mobile app with a form to enter the user&#39;s name.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And submitting a name shows this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/xamarin-hello-anonymous-form-showing-name.png&#34; alt=&#34;Xamarin mobile app with a form showing user&#39;s name.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There you have it. These are the basic building blocks to get started building mobile applications using Xamarin.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Django</title>
      <link>http://quakkels.com/posts/getting-started-python-django-vs-code/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/getting-started-python-django-vs-code/</guid>
      <description>

&lt;p&gt;Django is a Python framework that I&amp;rsquo;ve written about before. I&amp;rsquo;ve &lt;a href=&#34;http://quakkels.com/posts/asp-net-mvc-compared-to-dango/&#34;&gt;compared Django to ASP.NET MVC&lt;/a&gt;. But, I didn&amp;rsquo;t go into much detail about how to actually use Django to create a data driven website. That&amp;rsquo;s what I&amp;rsquo;ll cover now.&lt;/p&gt;

&lt;p&gt;The goal for this &amp;lsquo;Getting Started&amp;rsquo; project is to get familiar with the basics of developing data driven web applications using Django, Models, Views, Templates, URLs, and Forms. By the end we&amp;rsquo;ll have a simple contact form that saves user submissions to the database, and displays that data to an administrator user. It will not be a completed site, but it will introduce basic the building blocks of website development in Django.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like to refer to the end goal of this article, you can &lt;a href=&#34;https://github.com/quakkels/companionresource_djangosite&#34; target=&#34;_blank&#34;&gt;find it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Windows 10

&lt;ul&gt;
&lt;li&gt;Or your own favorite OS. But I&amp;rsquo;ll be writing from a Windows perspective.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Python 3.6 or above.&lt;/li&gt;
&lt;li&gt;VS Code with Microsoft&amp;rsquo;s Python extension installed.

&lt;ul&gt;
&lt;li&gt;Or your own favorite Python IDE/editor, but I&amp;rsquo;ll be writing from the VS Code perspective&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;create-project&#34;&gt;Create Project&lt;/h2&gt;

&lt;p&gt;Make the project directory and navigate inside.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; mkdir django-project &amp;amp;&amp;amp; cd django-project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a Virtual Environment to isolate project specific dependencies.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; python -m venv django-env
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Activate the venv. (This is the Windows command.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; django-env\Scripts\activate.bat
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Once inside an activated venv, you can leave it to work on other things by using the &lt;code&gt;deactivate&lt;/code&gt; command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Install Django inside the active venv. (You don&amp;rsquo;t want to install packages globally. Make sure that the venv is active.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; pip install django
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;django-admin&lt;/code&gt; to create the new Django application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; django-admin startproject djangosite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That created a new folder called &lt;code&gt;djangosite&lt;/code&gt; and it placed boilerplate files inside. &lt;code&gt;manage.py&lt;/code&gt; is one of those files and it&amp;rsquo;s what will used from now on to run Django commands.&lt;/p&gt;

&lt;p&gt;Run the development Django server from inside the site&amp;rsquo;s folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; cd djangosite
(django-env)&amp;gt; python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visit localhost:8000 to verify that it&amp;rsquo;s working. Then exit the server with Ctrl+Break.&lt;/p&gt;

&lt;p&gt;When the Django server ran, Django automatically created a db.sqlite3 file in the project folder. &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#34; target=&#34;_blank&#34;&gt;Read more about configuring different database backends&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Use VS Code to open the &lt;code&gt;django-project&lt;/code&gt; folder that houses the virtual environment folder and the Django app folder. This can be done from the terminal, or manually inside VS Code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; code ..\. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open &lt;code&gt;djangosite\urls.py&lt;/code&gt;. The imports for Django will probably be shown as missing modules because Django was installed in the venv and not globally. to fix this, press &lt;code&gt;ctrl+shift+p&lt;/code&gt; then execute the command &lt;code&gt;Python: Select Interpretter&lt;/code&gt;. Find &lt;code&gt;.\django-env\Scripts\python.exe&lt;/code&gt; from the list and select it. Then VS Code will stop showing the Django imports as errors.
&amp;gt; For more VS Code information visit &lt;a href=&#34;https://code.visualstudio.com/docs/python/python-tutorial&#34; target=&#34;_blank&#34;&gt;Getting Started with Python in VS Code&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;add-a-custom-django-view&#34;&gt;Add a Custom Django View&lt;/h2&gt;

&lt;p&gt;To add a &amp;lsquo;Hello World&amp;rsquo; page, create a new file in &lt;code&gt;django-project\djangosite\djangosite&lt;/code&gt; called &lt;code&gt;views.py&lt;/code&gt;. Add the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.http import HttpResponse

def welcome(request):
  return HttpResponse(&amp;quot;Hello, World!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To tell Django when to execute this welcome view, edit &lt;code&gt;urls.py&lt;/code&gt; so it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, re_path

from .views import welcome

urlpatterns = [
    path(&#39;admin/&#39;, admin.site.urls),
    re_path(&#39;^$&#39;, welcome)
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Browse to localhost:8000 and see the custom message.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/python_django_hello_world.png&#34; alt=&#34;Django Hello World&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s take a quick break to go over some Django concepts.&lt;/p&gt;

&lt;h3 id=&#34;app&#34;&gt;App&lt;/h3&gt;

&lt;p&gt;A Django App is a python package that acts as a little web application of its own. With it&amp;rsquo;s own Models, Views, Templates, and URLs. Most Django sites use several apps. It is also possible to write an app such that it can be reused in other Django projects.&lt;/p&gt;

&lt;h3 id=&#34;model&#34;&gt;Model&lt;/h3&gt;

&lt;p&gt;A Django Model is a data model that maps to a database table. This introduces the concept of &lt;em&gt;Migrations&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;migrations&#34;&gt;Migrations&lt;/h3&gt;

&lt;p&gt;The model will usually change as the site is developed.
A migration will update the corresponding database table from previous versions to the new version of the code. As migrations get more complicated, there may be need to write custom migration scripts.&lt;/p&gt;

&lt;h3 id=&#34;views&#34;&gt;Views&lt;/h3&gt;

&lt;p&gt;Views in Django are like Controllers in ASP.NET MVC. They are what connect a model with a template.&lt;/p&gt;

&lt;h3 id=&#34;templates&#34;&gt;Templates&lt;/h3&gt;

&lt;p&gt;Templates in Django are like Views in ASP.NET MVC. They are the display layer; the HTML that will render in the browser.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;add-a-custom-django-model&#34;&gt;Add a Custom Django Model&lt;/h2&gt;

&lt;p&gt;Show migrations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py showmigrations
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Execute those migrations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create a new Django app. For this example, it will handle the functionality for a contact form.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py startapp contactform
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Move into the new &lt;code&gt;contactform&lt;/code&gt; directory and notice that Django has created a bunch of boilerplate code for us.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; cd contactform
(django-env)&amp;gt; dir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add this new app to the Django site. Open &lt;code&gt;settings.py&lt;/code&gt; in the &lt;code&gt;djangosite&lt;/code&gt; folder, and add the &lt;code&gt;contactform&lt;/code&gt; app to the list of installed apps. &lt;code&gt;INSTALLED_APPS&lt;/code&gt; should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INSTALLED_APPS = [
    &#39;django.contrib.admin&#39;,
    &#39;django.contrib.auth&#39;,
    &#39;django.contrib.contenttypes&#39;,
    &#39;django.contrib.sessions&#39;,
    &#39;django.contrib.messages&#39;,
    &#39;django.contrib.staticfiles&#39;,
    &#39;contactform&#39;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, open the &lt;code&gt;models.py&lt;/code&gt; file in the contact form app and add the class that will represent the contact form.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.db import models

class ContactForm(models.Model):
    HOW_DID_YOU_HEAR_ABOUT_US_CHOICES = (
        (&#39;SE&#39;, &#39;Search Engine&#39;),
        (&#39;Q&#39;, &#39;Quakkels.com&#39;),
        (&#39;F&#39;, &#39;From a friend&#39;),
        (&#39;O&#39;, &#39;Other&#39;)
    )

    name = models.CharField(max_length=50)
    email = models.EmailField(max_length=50)
    comments = models.CharField(max_length=500)
    how_did_you_hear_about_us = models.CharField(max_length=2, choices=HOW_DID_YOU_HEAR_ABOUT_US_CHOICES)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;More information about Django models can be found &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/db/models/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After the model is saved, create the new migration script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py makemigrations
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the migration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;If you&amp;rsquo;re curious about what the SQLite database tables look like, you can download something like &lt;a href=&#34;https://sqlitebrowser.org/dl/&#34; target=&#34;_blank&#34;&gt;DB Browser for SQLite&lt;/a&gt;. Table names will be named after the model with the app name as the prefix. So the table for ContactForm will be called &lt;code&gt;contactform_contactform&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;register-custom-model-in-admin&#34;&gt;Register Custom Model in Admin&lt;/h2&gt;

&lt;p&gt;To make contact form submissions available to be read by a site administrator, &lt;code&gt;ContactForm&lt;/code&gt; needs to be registered in the admin area.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;contactform\admin.py&lt;/code&gt; and add this code to register the ContactForm model.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.contrib import admin
from .models import ContactForm

@admin.register(ContactForm)
class ContactFormAdmin(admin.ModelAdmin):
    list_display = (&#39;name&#39;, &#39;email&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a super user for logging into the site&amp;rsquo;s admin area.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when the development server runs, you&amp;rsquo;ll be able to view and edit ContactForms in the Admin area by navigating to localhost:8000/admin and using the new super user to log in.&lt;/p&gt;

&lt;h2 id=&#34;create-a-custom-django-template&#34;&gt;Create a Custom Django Template&lt;/h2&gt;

&lt;p&gt;Double check the terminal&amp;rsquo;s working directory is the &lt;code&gt;contactform&lt;/code&gt; folder inside of &lt;code&gt;djangosite&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; pwd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Switch to &lt;code&gt;contactform&lt;/code&gt; if it&amp;rsquo;s not the working directory.&lt;/p&gt;

&lt;p&gt;Create a new folder for custom templates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; mdkir templates
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In VS Code, create a file in the new templates folder called &lt;code&gt;contactform.html&lt;/code&gt; for the contact form. Put the following code in the file for now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
      &amp;lt;title&amp;gt;Contact Form&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;Contact Form&amp;lt;/h1&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, update &lt;code&gt;contactform\views.py&lt;/code&gt; with this code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.shortcuts import render

def contactform(request):
    return render(request, &amp;quot;contactform.html&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the &lt;code&gt;render()&lt;/code&gt; function is used here instead of returning &lt;code&gt;HttpResponse()&lt;/code&gt; directly like the &amp;ldquo;Hello, World!&amp;rdquo; view does. The &lt;code&gt;render()&lt;/code&gt; function will use the template for the html.&lt;/p&gt;

&lt;p&gt;To make the template visible from the browser, we need to route requests to the view based on the URL.&lt;/p&gt;

&lt;p&gt;Use VS Code to create a &lt;code&gt;urls.py&lt;/code&gt; file inside the &lt;code&gt;contactform&lt;/code&gt; folder. Put this code inside it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.urls import re_path

from .views import contactform

urlpatterns = [
    re_path(&#39;contactform$&#39;, contactform)
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;re_path()&lt;/code&gt; method uses a string as a regular expression. The &lt;code&gt;&#39;contactform$&#39;&lt;/code&gt; ensures that it only matches on paths that end in &lt;code&gt;contactform&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;djangosite\urls.py&lt;/code&gt; is what Django uses to route urls, it needs to be aware of the new &lt;code&gt;contactform\urls.py&lt;/code&gt;. Update it with this code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, re_path, include

from .views import welcome

urlpatterns = [
    path(&#39;admin/&#39;, admin.site.urls),
    re_path(&#39;^contactform/&#39;, include(&#39;contactform.urls&#39;)),
    path(&#39;&#39;, welcome),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&#39;^contactform/&#39;&lt;/code&gt; is a regular expression that makes sure matching paths begin with &lt;code&gt;contactform&lt;/code&gt;. This is a prefix for everything in the contactform app. So the complete matching path will be &lt;code&gt;localhost:8000/contactform/contactform&lt;/code&gt;. For more information read the &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/http/urls/&#34; target=&#34;_blank&#34;&gt;Django documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;create-a-form&#34;&gt;Create a Form&lt;/h1&gt;

&lt;p&gt;Create a new file in &lt;code&gt;contactform&lt;/code&gt; called &lt;code&gt;forms.py&lt;/code&gt; and put this code in it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.forms import ModelForm
from .models import ContactForm

class ContactFormForm(ModelForm):
    class Meta:
        model = ContactForm
        fields = (&#39;name&#39;, &#39;email&#39;, &#39;comments&#39;, &#39;how_did_you_hear_about_us&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;It was at this time that I started regretting how the &lt;code&gt;ContactForm&lt;/code&gt; model was named. To stick with Django conventions, this form class will be the name of the model with &amp;ldquo;Form&amp;rdquo; appended to it. Hence; &lt;code&gt;ContactFormForm&lt;/code&gt;. Future me will not make this mistake.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Update &lt;code&gt;contactform\views.py&lt;/code&gt; so it will send the new form class as an object to the template.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.shortcuts import render
from django.http import HttpResponse
from .forms import ContactFormForm
from .models import ContactForm

def contactform(request):
    form = ContactFormForm()
    context = { 
        &#39;form&#39; : form,
    }

    return render(request, &amp;quot;contactform.html&amp;quot;, context)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update the &lt;code&gt;contactform.html&lt;/code&gt; template to use the &lt;code&gt;form&lt;/code&gt; object in the &lt;code&gt;context&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
      &amp;lt;title&amp;gt;Contact Form&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;Contact Form&amp;lt;/h1&amp;gt;
        &amp;lt;form method=&amp;quot;POST&amp;quot;&amp;gt;
            {% csrf_token %} &amp;lt;!--this token is required in order to prevent CSRF attacks--&amp;gt;
            {{ form }} &amp;lt;!-- the form object will render our FormModel --&amp;gt;
            &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Send&amp;lt;/button&amp;gt;
        &amp;lt;/form&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find more details about how to properly use templates &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/templates/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. The code above has much room for improvement.&lt;/p&gt;

&lt;p&gt;Two things worth noting here are &lt;code&gt;{% csrf_token %}&lt;/code&gt; and &lt;code&gt;{{ form }}&lt;/code&gt;. The code for CSRF Token prevents this page from being vulnerable to cross site request forgery attacks. The &lt;code&gt;form&lt;/code&gt; object is the &lt;code&gt;ContactFrom&lt;/code&gt; model converted to HTML form elements via the &lt;code&gt;ModelForm&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Update the view to accept and save a Contact Form submission.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.shortcuts import render, redirect
from django.http import HttpResponse
from .forms import ContactFormForm
from .models import ContactForm

def contactform(request):
    form = ContactFormForm()
    context = { &amp;quot;form&amp;quot; : form }

    if request.method != &amp;quot;POST&amp;quot;:
        return render(request, &amp;quot;contactform.html&amp;quot;, context)
    
    form = ContactFormForm(data=request.POST)

    if not form.is_valid():
        context[&amp;quot;form&amp;quot;] = form
        return render(request, &amp;quot;contactform.html&amp;quot;, context)
    
    form.save()
    return redirect(&amp;quot;/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will render the form on first request. When the form is submitted it will check the values against what the model expects. If the values aren&amp;rsquo;t valid it will render the form again (ideally to inform the user there were problems and give them a chance to correct mistakes.) If the values are valid, then it will save a new record in the database which an admin will be able to see in Django&amp;rsquo;s administration section. Once the record is saved, the user gets redirected to the site root.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s a lot more to Django, but this is a fair amount of information to get started with it. What we wrote has an authenticated admin area, a &amp;lsquo;hello&amp;rsquo; home page, and a data driven form that persists data to a database. This isn&amp;rsquo;t a completed web application, but we did cover a lot of essential building blocks.&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/quakkels/companionresource_djangosite&#34; target=&#34;_blank&#34;&gt;Companion GitHub Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sqlitebrowser.org/dl/&#34; target=&#34;_blank&#34;&gt;DB Browser for SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/&#34; target=&#34;_blank&#34;&gt;Django Documentation&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#34; target=&#34;_blank&#34;&gt;Configure different database backends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/forms/&#34; target=&#34;_blank&#34;&gt;Forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/db/models/&#34; target=&#34;_blank&#34;&gt;Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/templates/&#34; target=&#34;_blank&#34;&gt;Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/http/urls/&#34; target=&#34;_blank&#34;&gt;URL Dispatcher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Configuring Vim When Using Git Bash on Windows</title>
      <link>http://quakkels.com/posts/configuring-vim-when-using-git-bash/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/configuring-vim-when-using-git-bash/</guid>
      <description>

&lt;p&gt;Occasionally I become enamored with the idea of becoming a Vim expert, or at least a competent Vim user. I work primarily in Windows environments so, though the desire exists, there aren&amp;rsquo;t many good opportunities to build Vim habits. There is a &lt;a href=&#34;https://www.vim.org/download.php/#pc&#34; target=&#34;_blank&#34;&gt;Vim on Windows release&lt;/a&gt; available. This has a GUI interface and an installer executable. Though if you have Git for Windows installed, then you already have Vim available. Git for Windows comes with the ever useful, Git Bash. And, lo! Git Bash has Vim.&lt;/p&gt;

&lt;p&gt;Firing up a quick Git Bash session is simple enough. And firing up vim from there is straightforward. Thankfully, my previous experience with exiting Vim saved me from an embarrassing search query in my browser history.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;http://quakkels.com/images/exiting_vim_orly.jpeg&#34; alt=&#34;How to exit Vim&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It&amp;rsquo;s an old meme, but it checks out. (&lt;code&gt;esc&lt;/code&gt;, &lt;code&gt;:&lt;/code&gt; then &lt;code&gt;q!&lt;/code&gt; to quit without saving, btw)&lt;/em&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;configuring-vim-in-git-bash&#34;&gt;Configuring Vim in Git Bash&lt;/h2&gt;

&lt;p&gt;Vim&amp;rsquo;s configuration can be customized with vimrc files. These files are scripts written in Vimscript. They run at initialization when Vim is opened. We can find out more information by using help commands inside Vim.&lt;/p&gt;

&lt;p&gt;First, open a Git Bash terminal and then open &lt;code&gt;vim&lt;/code&gt;. Then, in &lt;a href=&#34;https://www.howtoforge.com/vim-basics&#34; target=&#34;_blank&#34;&gt;command mode&lt;/a&gt;, open the configuration help information with &lt;code&gt;:help vimrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this point we can see where Vim will look for custom vimrc files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Places for your personal initializations:
    Unix            $HOME/.vimrc or $HOME/.vim/vimrc
    OS/2            $HOME/.vimrc, $HOME/vimfiles/vimrc
                    or $VIM/.vimrc (or _vimrc)
    MS-Windows      $HOME/_vimrc, $HOME/vimfiles/vimrc
                    or $VIM/_vimrc
    Amiga           s:.vimrc, home:.vimrc, home:vimfiles:vimrc
                    or $VIM/.vimrc

  The files are searched in the order specified above and only the first
  one that is found is read.

  RECOMMENDATION: Put all your Vim configuration stuff in the
  $HOME/.vim/ directory ($HOME/vimfiles/ for MS-Windows). That makes it
  easy to copy it to another system.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t be fooled. Since &lt;a href=&#34;https://github.com/git/git/commit/df5218b4c30b2fa1ba0d1ada4166ad85bc83be26&#34; target=&#34;_blank&#34;&gt;Git Bash uses msys2&lt;/a&gt; to imitate a Unixy/Linuxy style system, Vim running inside Git Bash will be following Unix&amp;rsquo;s Conventions, rather than MS-Windows&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Also let&amp;rsquo;s follow Vim&amp;rsquo;s recommendation for using the &lt;code&gt;$HOME/.vim/&lt;/code&gt; directory for configuration files.&lt;/p&gt;

&lt;p&gt;Make the directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir $HOME/.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then create the vimrc file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ touch $HOME/.vim/vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, we have our empty initialization file for Vim. To make sure it&amp;rsquo;s working, I&amp;rsquo;ll add a command to turn on line numbering.&lt;/p&gt;

&lt;p&gt;Open the vimrc file using Vim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim $HOME/.vim/vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, enter Insert Mode by pressing &lt;code&gt;i&lt;/code&gt; and enter three lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot; Custom Vim configuration

set number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save these changes by pressing &lt;code&gt;esc&lt;/code&gt; to leave Insert Mode and then enter &lt;code&gt;:wq&lt;/code&gt; to write the changes and then quit Vim.&lt;/p&gt;

&lt;p&gt;To check that it worked, open up the same file in Vim again and look for the line numbers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/vim_line_numbers.png&#34; alt=&#34;Vim configured to show line numbers&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It worked!&lt;/p&gt;

&lt;p&gt;There are many more configuration changes you can make. Be aware that Vim already has default configuration set that is targeted towards programmers. To find all scripts (remember that configuration is set via initialization scripts) you can use the command &lt;code&gt;:scriptnames&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When I execute &lt;code&gt;:scriptnames&lt;/code&gt; in Vim running in Git Bash, I see &lt;code&gt;/etc/vimrc&lt;/code&gt; at the very top of the list. This makes sense since the &lt;code&gt;etc&lt;/code&gt; folder is where Linux systems place a lot of their configuration. However, since this is in Windows, we need to figure out where the &lt;code&gt;etc&lt;/code&gt; folder is. It&amp;rsquo;s not in &lt;code&gt;C:\&lt;/code&gt; nor in the &lt;code&gt;$HOME&lt;/code&gt; directory. But, since Git Bash is mimicking a Linux system, we should be able to find it along with the other Git Bash files.&lt;/p&gt;

&lt;p&gt;Since I&amp;rsquo;m running the 64 bit version of Git, I found the etc folder in &lt;code&gt;C:\Program Files\Git&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside Git Bash, we can get there with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd c\&amp;quot;Program Files&amp;quot;\Git\etc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, to take a quick peek at &lt;code&gt;vimrc&lt;/code&gt; just execute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I would &lt;em&gt;not&lt;/em&gt; recommend attempting to change anything in &lt;code&gt;etc&lt;/code&gt;. Instead modify Vim&amp;rsquo;s configuration using files in the &lt;code&gt;$HOME\.vim\&lt;/code&gt; folder.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Armed with this information there&amp;rsquo;s a lot of stuff you can now customize. Here are a few more resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://benmccormick.org/2014/07/14/learning-vim-in-2014-configuring-vim&#34; target=&#34;_blank&#34;&gt;Learning Vim in 2014: Configuring Vim&lt;/a&gt;&lt;br&gt;A few years old, but I really like how this author gets into the details rather than just telling you to copy/paste a &lt;code&gt;.vimrc&lt;/code&gt; file from GitHub.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linuxhint.com/configure_vim_vimrc/&#34; target=&#34;_blank&#34;&gt;Configure Vim with vimrc&lt;/a&gt;&lt;br&gt;
Similar to Learning Vim in 2014, but more recent. Also has Linux specific informmatin which you will want to ignore if you&amp;rsquo;re running in Windows.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://learnvimscriptthehardway.stevelosh.com/&#34; target=&#34;_blank&#34;&gt;Learn Vimscript the Hard Way&lt;/a&gt;&lt;br&gt; This ebook has an incredible amount of detail. It may be too much if you&amp;rsquo;re looking to just make quick changes. But it has a lot of great information if you want to dive into the deep end.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vim.rtorr.com/&#34; target=&#34;_blank&#34;&gt;Vim Cheat Sheet&lt;/a&gt;&lt;br&gt;Excellent for discovering all the Vim shortcuts that people love so much.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don&amp;rsquo;t forget to do ridiculous things like to configure VSCode&amp;rsquo;s terminal to use Git Bash which allows you to open Vim from inside VSCode. ;-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/vim_inside_vscode.png&#34; alt=&#34;Run Vim from inside VSCode on Windows&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL Quick Reference</title>
      <link>http://quakkels.com/posts/mysql-quick-reference/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/mysql-quick-reference/</guid>
      <description>

&lt;h2 id=&#34;shell-commands&#34;&gt;Shell Commands&lt;/h2&gt;

&lt;h3 id=&#34;set-up-security-requirements&#34;&gt;Set up security requirements:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;open-the-mysql-cli-client-and-login-using-a-password-and-the-specified-user&#34;&gt;Open the MySQL CLI client and login using a password and the specified user:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mysql -u {user} -p
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-queries-and-commands&#34;&gt;MySQL Queries and Commands&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that MySQL will not execute anything until it encounters a semicolon &lt;code&gt;;&lt;/code&gt; which indicates the end of a statement. This allows us to enter multi-line statements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;create-user&#34;&gt;Create User&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; CREATE USER &#39;newuser&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;give-user-access-to-a-database&#34;&gt;Give User Access to a Database&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; GRANT ALL PRIVILEGES ON * . * TO &#39;newuser&#39;@&#39;localhost&#39;;
&amp;gt; FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-a-database-called-newstore&#34;&gt;Create a database called &lt;code&gt;newStore&lt;/code&gt;:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; CREATE DATABASE IF NOT EXISTS newStore;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-a-new-table-in-a-database&#34;&gt;Create a new table in a database:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; CREATE TABLE IF NOT EXISTS newTable (
&amp;gt;   newTableID INT PRIMARY KEY AUTO_INCREMENT,
&amp;gt;   firstName VARCHAR(255) not null,
&amp;gt;   lastName VARCHAR(255) not null,
&amp;gt;   email VARCHAR(255) not null
&amp;gt; );
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-all-databases&#34;&gt;List all databases:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; SHOW DATABASES;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;connect-to-a-database&#34;&gt;Connect to a database:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; USE newStore;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-tables-in-a-database&#34;&gt;List tables in a database&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; SHOW TABLES;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-columns-in-a-table&#34;&gt;List columns in a table&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; SHOW COLUMNS FROM newTable
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;execute-a-sql-script-from-file&#34;&gt;Execute a sql script from file&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&amp;gt; source /path/to/script.sql;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;more-resources&#34;&gt;More Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-create-a-new-user-and-grant-permissions-in-mysql&#34;&gt;How To Create a New User and Grant Permissions in MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/&#34;&gt;MySQL Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mariadb.com/kb/en/library/documentation/&#34;&gt;MariaDB Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Gogs on Raspberry PI</title>
      <link>http://quakkels.com/posts/gogs-on-raspberry-pi/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/gogs-on-raspberry-pi/</guid>
      <description>

&lt;p&gt;In a previous article &lt;a href=&#34;http://quakkels.com/posts/configure-headless-raspberry-pi-for-wifi-and-ssh/&#34;&gt;I configured a headless Raspberry Pi for Wifi and SSH&lt;/a&gt;. Next, I&amp;rsquo;ll set up a personal Gogs server on it.&lt;/p&gt;

&lt;h2 id=&#34;change-the-password&#34;&gt;Change the Password&lt;/h2&gt;

&lt;p&gt;First things first, change the password for the &lt;code&gt;pi&lt;/code&gt; user to something different than &lt;code&gt;raspberry&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ passwd
Changing password for pi.
(current) UNIX password:
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Please tweet your new password to @quakkels /s&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;arrange-the-prerequisites&#34;&gt;Arrange the Prerequisites&lt;/h2&gt;

&lt;p&gt;Next, I&amp;rsquo;ll make sure the &lt;a href=&#34;https://gogs.io/docs/installation&#34;&gt;prerequisites&lt;/a&gt; are set up. Since Raspbian is based on Debian I can use the Debian/Ubuntu commands. I&amp;rsquo;m skipping the database step because I&amp;rsquo;m happy with this Gogs instance using SQLite3.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before proceeding farther, I&amp;rsquo;m going to create a brand new user specifically for Gogs. This new user will be everything Gogs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo adduser iamgogs 
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If I were a more experienced Gogs administrator I would have created a user named &lt;code&gt;git&lt;/code&gt; since that&amp;rsquo;s Gogs&amp;rsquo; best practice and it&amp;rsquo;s less work later on. Scripts and default configuration use &lt;code&gt;git&lt;/code&gt; as the Gogs user by default.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Be prepared to have a password ready for the new &lt;code&gt;iamgogs&lt;/code&gt; user.&lt;/p&gt;

&lt;p&gt;Add the &lt;code&gt;iamgogs&lt;/code&gt; user to the sudo group.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo usermod -aG sudo iamgogs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now switch to the &lt;code&gt;iamgogs&lt;/code&gt; user with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ su - iamgogs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And test the sudo ability by running any command as sudo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo pwd
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-gogs-from-binary&#34;&gt;Install Gogs from Binary&lt;/h2&gt;

&lt;p&gt;From here, I could install Go and proceed to install from source. But instead, to keep the number of steps to a minimum, I&amp;rsquo;m going to &lt;a href=&#34;https://gogs.io/docs/installation/install_from_binary&#34;&gt;install from binary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Being currently logged in as the &lt;code&gt;iamgogs&lt;/code&gt; user, I&amp;rsquo;ll use the &lt;code&gt;wget&lt;/code&gt; command to download the Raspberry PI build from &lt;a href=&#34;https://gogs.io/docs/installation/install_from_binary&#34;&gt;this download page&lt;/a&gt;. Use &lt;code&gt;wget&lt;/code&gt; with the url for the binary built specifically for Raspberry PI.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget {raspberrypibinaryurl}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that I&amp;rsquo;ve got it downloaded, I can unzip it using the &lt;code&gt;unzip&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ unzip {gogszipfilename}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run the &lt;code&gt;ls&lt;/code&gt; command you should see the new &lt;code&gt;gogs&lt;/code&gt; folder that was extracted into the &lt;code&gt;iamgogs&lt;/code&gt; home directory.&lt;/p&gt;

&lt;p&gt;And now for something completely expected&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;configuring-and-running-gogs-on-raspberry-pi&#34;&gt;Configuring and Running Gogs on Raspberry PI&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gogs.io/docs/installation/configuration_and_run.html&#34;&gt;Running and configuring the Gogs server&lt;/a&gt; is handled by the Gogs install process. There&amp;rsquo;s lots of information online about manually creating and editing custom app.ini configuration file, but it looks like (for the most recent versions of Gogs) all I need to do is run the &lt;code&gt;gogs&lt;/code&gt; executable from the &lt;code&gt;$HOME/gogs&lt;/code&gt; folder with the &lt;code&gt;web&lt;/code&gt; parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd $HOME/gogs
$ ./gogs web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I saw server information appear in the console. Since my Raspberry Pi is set up for headless operation, I don&amp;rsquo;t have the benefit of being able to access Gogs via a graphical web browser over localhost. So, from my windows machine, I navigated to {IpAddressOfRPi}:3000 and was greeted by a pleasant installation form which I filled out. Upon submitting the form, I had an admin account and a functioning Gogs server.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m nearing the end of this Gogs journey, but I still need to set this up as a service running in the background. Otherwise I&amp;rsquo;m stuck with this SSH session running Gogs forever.&lt;/p&gt;

&lt;p&gt;I was able to find some &lt;a href=&#34;https://blog.meinside.dev/Gogs-on-Raspberry-Pi/#2-for-systemd&#34;&gt;instructions&lt;/a&gt; for configuring a Gogs service with systemd that seemed straightforward enough.&lt;/p&gt;

&lt;p&gt;Copy the systemd service file from Gogs to the appropriate folder&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp /home/iamgogs/scripts/systemd/gogs.service /lib/systemd/system/gogs.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I edited the new file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo nano /lib/systemd/system/gogs.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I updated the values for:
- User
- Group
- WorkingDirectory
- ExecStart
- Environment&lt;/p&gt;

&lt;p&gt;Since my Gogs user is &lt;code&gt;iamgogs&lt;/code&gt; rather than &lt;code&gt;git&lt;/code&gt; I needed to make sure the paths and users got updated accordingly. Once the file is updated and saved I tested to make sure it was working with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl start gogs.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After switching over to my windows machine and confirming the site loads in the browser, I returned to my ssh session to make sure systemd will automatically start the Gogs service on reboot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl enable gogs.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then a final test to make sure Gogs will start automatically when the RPi boots:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo and behold, it works.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Identify Valid Standards</title>
      <link>http://quakkels.com/posts/identify-valid-standards/</link>
      <pubDate>Thu, 16 Feb 2017 07:26:36 -0600</pubDate>
      
      <guid>http://quakkels.com/posts/identify-valid-standards/</guid>
      <description>

&lt;p&gt;I can&amp;rsquo;t tell you how many times I&amp;rsquo;ve been in software planning meetings when an engineer addressed the team and claimed that we should use {insert technology here} because it&amp;rsquo;s the &amp;ldquo;Industry Standard.&amp;rdquo; I also can&amp;rsquo;t tell you how many times I&amp;rsquo;ve done the same thing. I&amp;rsquo;ve gone into my boss&amp;rsquo;s office and claimed that we should use a particular stack or technology because it&amp;rsquo;s an &amp;ldquo;industry standard.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;This reasoning is attractive because on the surface it seems valid. I mean, it
must be an industry standard for a reason. Right? We&amp;rsquo;d be silly not to use it
as well. Doesn&amp;rsquo;t that make sense?&lt;/p&gt;

&lt;h2 id=&#34;hype-mentality&#34;&gt;Hype mentality&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Hey coach, I think we should run screens because it&amp;rsquo;s the league standard.
Everyone runs screens. If we want our team to win, we need to be
running screens all the time.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Choosing technology based on popularity is easy. As programmers, it&amp;rsquo;s important
to us to stay current and not let any good technology get past us. As a result,
there are many ways that we can be influenced; industry publications, surveys,
Blogs, Twitter, Reddit, even chatter in the break room. However, we need to be
careful to weigh arguments based on technical merit and not succumb to the
subliminal effects of hype.&lt;/p&gt;

&lt;h2 id=&#34;hair-on-fire-mentality&#34;&gt;Hair-on-fire mentality&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Hey coach, I think we should stop using back-shoulder passes down the field. We should remove them from our playbook entirely. Last time we ran a back-shoulder pass, we went three and out.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When bugs that appear in staging (or even worse&amp;#151;production)  people will look for a root cause for why it occurred. This is good to do and it&amp;rsquo;s definitely the correct response. But those investigating should be sure to focus on the root cause of the bug. If they find a bug in code that relies on a third party library, there is a temptation to question the decisions of the team that added the library. This is usually due to a misplaced concern that the bug is a result of using a less popular (or non-standard) library. Instead, the investigation should focus on things like logic errors, syntax errors, and whether behavior is unit tested.&lt;/p&gt;

&lt;p&gt;Sweeping rules dictating which libraries engineering teams must use are not the answer. Such a reaction result in standards that halt progress, stifle problem solving, and impede innovation.&lt;/p&gt;

&lt;h2 id=&#34;how-standards-help&#34;&gt;How standards help&lt;/h2&gt;

&lt;p&gt;When programming systems, standards should exist around the parts that need ‘glue’. Anytime there are two applications that need to talk to each other, they should follow a contract to ease communication between them. Examples of these kinds of standards include specifications for protocols such as HTTP, SAML, and OAuth.&lt;/p&gt;

&lt;p&gt;Another area that benefits from industry standards is when describing languages. There must be a standard for what an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; represents in HTML, and for how a CSS rule such as &lt;code&gt;h1 { color: red; }&lt;/code&gt; affects it. I wouldn&amp;rsquo;t be very productive in a language if when I wrote &lt;code&gt;string&lt;/code&gt; it would treat it like a &lt;code&gt;float&lt;/code&gt;. So having a language standard that defines the expected behavior of syntax and types is very helpful.&lt;/p&gt;

&lt;p&gt;The key to these standards is that they are &lt;em&gt;defining expected behavior for a given tool&lt;/em&gt;. These standards do not dictate which tool to use.&lt;/p&gt;

&lt;h2 id=&#34;picking-the-right-tool-for-a-job&#34;&gt;Picking the right tool for a job&lt;/h2&gt;

&lt;p&gt;Some may claim that one software framework or language is an “industry standard”. Often, this is a result of the person seeing it used by others or featured in articles. So, they conclude that they should use it on every project. If there is even a vague similarity between their current project and the tool’s stated goals, then some people assume they’ve found the best tool for their job. More should be considered when choosing tools.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Good reasons to use a tool:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It is stable&lt;/li&gt;
&lt;li&gt;It does what we need&lt;/li&gt;
&lt;li&gt;It is well supported&lt;/li&gt;
&lt;li&gt;Ease of use&lt;/li&gt;
&lt;li&gt;Compatible with existing system&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Bad reasons to use a tool:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It&amp;rsquo;s popular&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s new&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s been trending on Blogs and industry news sources.&lt;/li&gt;
&lt;li&gt;The current tool is boring. We could use a change.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;don-t-flippantly-swing-the-industry-standard-club&#34;&gt;Don’t flippantly swing the “Industry Standard” club&lt;/h2&gt;

&lt;p&gt;Promoting a tool by claiming that it&amp;rsquo;s an industry standard, rather than because it adheres to standards, is a mistake. There is a key difference between adhering to standards and being a standard. Industry standards are most effective when describing protocols and language behavior. We should select our tools based on how well they adhere to standards.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Don&#39;t Take Frameworks for Granted</title>
      <link>http://quakkels.com/posts/dont-take-frameworks-for-granted/</link>
      <pubDate>Sat, 28 Jan 2017 07:41:18 -0600</pubDate>
      
      <guid>http://quakkels.com/posts/dont-take-frameworks-for-granted/</guid>
      <description>&lt;p&gt;Frameworks can help jump-start productivity on projects. But be careful.
Relying too much on frameworks could also limit yourself in the long run.&lt;/p&gt;

&lt;p&gt;Whenever the opportunity presents itself, programmers should carefully consider
whether using a framework is beneficial. It may provide immediate benefits, but
there should be no magic happening that isn&amp;rsquo;t understood by the programmer.&lt;/p&gt;

&lt;p&gt;Years ago, I learned how to make websites with C#. I had help from many books,
tutorials, and co-workers. With those resources I used the ASP.NET MVC 1
framework to build websites in a new way. However, while building my sample MVC
sites, the code I wrote was there just because that&amp;rsquo;s how it was written in a
tutorial somewhere. At the time, I had very little understanding of how the
internals worked. I didn&amp;rsquo;t understand how routing worked, or how reflection
worked, or how factories fit in, or anything about what a view engine did, or
model binding. It was all just magic that I accepted and had faith in.&lt;/p&gt;

&lt;p&gt;I was able to build a working website with C# and ASP.NET MVC, and I did it
fairly quickly. It was certainly done faster than it would have been without the
framework. This fact can&amp;rsquo;t be ignored. Learning a technology while achieving
results is important for any beginner. The experience of finishing something
is valuable for the sense of accomplishment and for the motivation to keep
going. But, it&amp;rsquo;s important to understand that once a project is finished, the
learning should not stop. Understanding the building blocks of any framework is
the foundation for every solid programmer.&lt;/p&gt;

&lt;p&gt;In my case, it was very important that I continued to build up my foundation of
understanding. That&amp;rsquo;s because projects in the real world don&amp;rsquo;t just end like
side projects could. They live on and they evolve. Real projects keep receiving
feature requests. New requirements will appear. Technology will change.
Eventually, the chosen framework might lose support, or might not keep up with
requirements. When that happens, knowledge of how the framework functions is
imperative. Without that knowledge, programmers are at the mercy of tutorial
writers and the framework creators. But with a knowledgeable foundation,
programmers are equipped to continue building and shipping their projects.&lt;/p&gt;

&lt;p&gt;The bottom line is this: frameworks can be wielded much more effectively
&lt;em&gt;after&lt;/em&gt; the programmer understands enough of the language and design concepts
so that the framework&amp;rsquo;s behavior isn&amp;rsquo;t magic anymore. Programmers equipped with
such understanding will know where to look for seams in the execution pipeline,
and they will be able to add customizations where appropriate.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Into the Nether: Linux</title>
      <link>http://quakkels.com/posts/into-the-nether-linux/</link>
      <pubDate>Wed, 12 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/into-the-nether-linux/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/Debian_FVWM_Green_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The first movie I saw that really got me excited about computers was WarGames. The WOPR was an inanimate object that just sat there on screen. But, it was still a complete character all by itself. It reacted to the Matthew Broderick character&amp;rsquo;s commands and questions and became something more clever than just a boring piece of hardware. The fictional software running inside the WOPR and Broderick&amp;rsquo;s character&amp;rsquo;s ability to interface with it created a story that was incredibly mystical and exciting. It made computers seem exclusive. Only a few skilled people could understand them. People who had these skills were members of an exclusive club. They knew how things worked, and how to do the coolest tricks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/wargames.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;WarGames&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Green and blue text on black screens became a symbol of those skills. Hackers didn&amp;rsquo;t need pictures or windowed interfaces. They were the best, and therefore didn&amp;rsquo;t need any extra ornamentation. The coolest interfaces were both simple and complex. Simple because it was text, and complex because of the heavy tasks these techno elites were accomplishing. Something as simple as &amp;ldquo;knock, knock, Neo.&amp;rdquo; blew my mind the first time I saw it, not because of flashy graphics. Rather, it was because I was immersed in that fictional universe. I believed that a hacker, at a keyboard somewhere in another dimension, that was talking directly to Mr. Anderson with the text on that black screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/matrix.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Matrix&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Around this same time I learned about real people that changed the world with their computer ninja skills. Language designers, operating system inventors, and application developers who changed how we live every day. These titans of technology all knew how to build things using a black screen and green text. So let&amp;rsquo;s follow suite, hey? Let&amp;rsquo;s swallow the red pill, drink the Cool-Aid, and nerd up!&lt;/p&gt;

&lt;h2 id=&#34;enter-linux&#34;&gt;Enter Linux&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve been led to believe there is a great big computing world out there with
green text in the form of Linux. The amount of time I&amp;rsquo;ve already spent on
tangents about awesome movies means that I won&amp;rsquo;t go into the history of Linux
here. If you don&amp;rsquo;t know what Linux is, you should watch &lt;a href=&#34;https://www.youtube.com/watch?v=jw8K460vx1c&amp;amp;feature=youtu.be&#34;&gt;Revolution OS&lt;/a&gt;. It&amp;rsquo;s free. Do it now.&lt;/p&gt;

&lt;h2 id=&#34;debian-linux-on-a-virtual-machine&#34;&gt;Debian Linux on a virtual machine&lt;/h2&gt;

&lt;p&gt;I knew that installing Linux would involve climbing a learning curve. This can often lead to a little frustration. My frustration started early, but interestingly it was due to proprietary technology. Not due to Linux. I work in Windows 8.1 Pro for nearly all of my day to day development work. Windows 8.1 Pro includes Microsoft&amp;rsquo;s virtualization software called Hyper-V. From what I understand, Hyper-V can be very good. But it gave me a significant headache. My efforts to install Linux were derailed when I had trouble getting my Hyper-V VM to connect to my network. This was beyond frustrating. I eventually experienced the giant annoyance of breaking my host machine&amp;rsquo;s WiFi configuration. The only way my laptop could connect to the Internet was through a wired connection. I was beyond perturbed at this point, so once I restored my laptop&amp;rsquo;s networking settings I abandoned the idea of using Hyper-V in favor of virtualization software that I am much more familiar with: &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt;. VirtualBox is probably a better choice for this anyway because it runs on more operating systems than Hyper-V, and it doesn&amp;rsquo;t cost anything.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you have turned on Hyper-V on your Windows machine and have since decided to use different virtualization software, turn it off in the &amp;ldquo;Turn Windows Features On/Off&amp;rdquo; section of the Control Panel. If you leave it on it will compete with your new virtualization software causing unusual behavior — such as being almost completely borked.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once VirtualBox was installed, then I needed to choose a distribution of Linux
to install. After asking around on IRC, I decided to use Debian Testing for
this endeavor. Debian has three main releases. Stable, Testing, and Development.
Stable is usually very, very stable. But, to be so stable, it sacrifices current
software in favor of older software that has been tested for a longer period of
time, as in &lt;em&gt;years&lt;/em&gt; longer. The development release is (shockingly) the version of
Debian that is in development, thus it is the least stable version and prone to
breaking. The Testing release is the &amp;ldquo;just right&amp;rdquo; flavor of Debian that strikes
a balance between age and stability. Or so I&amp;rsquo;ve been told.&lt;/p&gt;

&lt;p&gt;I had a hard time finding the download link for Debian Testing. With help from IRC, I eventually came across a &lt;a href=&#34;https://www.debian.org/releases/testing/&#34;&gt;page&lt;/a&gt; explaining that the Testing release of Debian (at this time) is code-named Stretch. I decided that the most likely link to download the release I&amp;rsquo;m looking for was on &lt;a href=&#34;https://www.debian.org/devel/debian-installer/&#34;&gt;this page&lt;/a&gt;. I chose a CD ISO image for netinst (perhaps standing for &amp;lsquo;Network Installer&amp;rsquo;) and the only reason I felt somewhat sure that I was downloading the right ISO is because &amp;ldquo;stretch&amp;rdquo; was in the file name. Seems this whole section of the Debian web site could be easily improved to be more user friendly. Maybe a site that is hard to use is just a hazing ritual people have to go through in order to join the ranks of the &amp;ldquo;green text elite&amp;rdquo; programmers. If so, okay. I&amp;rsquo;m willing to jump through a couple of hoops. Remember WarGames? That shit&amp;rsquo;s awesome.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  The Debian devs seem to like Toy Story.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After the ISO finished downloading, I created a new virtual machine in VirtualBox. It got 4GB of memory and 30GB for its hard drive. I called it Luke. The next VM I spin up will probably be called Leia. I like Star Wars. Part of being a programmer is naming your stuff whatever the hell you want. Yus!&lt;/p&gt;

&lt;p&gt;Since the ISO I have is the network installer version, the networking configuration has to work, or it will not be able to get the rest of the packages it needs to finish installation. Luke was configured for Bridged networking. It should work, I won&amp;rsquo;t really know until I load the ISO as a fake CD into Luke&amp;rsquo;s fake CD drive and try to install Debian from the network. Use the network, Luke.&lt;/p&gt;

&lt;p&gt;Installing Debian was pretty easy. Being in the United States, just about all the default settings were what I wanted. Really I just had to tell the installation process which timezone I wanted and to use the entire virtual hard drive for Linux. I did decide to not install any desktop or GUI. The typical desktop experience is not the goal here. Let&amp;rsquo;s start with just the essentials. A command terminal is essential. I think it&amp;rsquo;s important to use a terminal so I can feel comfortable working in most other Linux configurations. And, I should be able to SSH into a networked Linux machine to perform maintenance, programming, configuration adjustments, and any other task a programmer may want to perform.&lt;/p&gt;

&lt;h2 id=&#34;it-s-installed-now-what&#34;&gt;It&amp;rsquo;s installed. Now what?&lt;/h2&gt;

&lt;p&gt;After it finished booting up, Debian presented a nice login screen. Really simple and uncluttered. It was nice. The green text that I like so much wasn&amp;rsquo;t there, but it had a black background. At this point I&amp;rsquo;m thinking I can probably figure out how to configure green to be the default text color. But for now, I can&amp;rsquo;t help but feel pleased with myself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/01loginscreen.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So I entered my username and my password and was greeted by a really nice, simple command prompt.&lt;/p&gt;

&lt;h2 id=&#34;where-is-sudo&#34;&gt;Where is sudo?&lt;/h2&gt;

&lt;p&gt;Apparently, some pretty standard items were missing from my current Debian setup. The obvious thing that is missing is any kind of desktop environment. I skipped that on purpose, so not a problem there. However, the plan was to install a very minimal window manager called &lt;a href=&#34;http://i3wm.org/&#34;&gt;i3wm&lt;/a&gt; that looked like it would be fun to use instead of a desktop environment that was just imitating Windows and OSX. i3 promised that it was really configurable, and the screenshots on their site had green and blue text on a black background. In short, it looked like an environment I would enjoy working in. But as I started trying to install the software I ran into problems.&lt;/p&gt;

&lt;p&gt;One of the most basic operations to perform in Linux is installing software using a package manager. Windows doesn&amp;rsquo;t have a culture around package managers, so this might seem odd to you if you are coming from a Windows only world. But, in Linux world, package managers are one of the best ways to install new programs.&lt;/p&gt;

&lt;p&gt;The package manager that Debian uses is called apt-get. This allows you to install software with a command that gets entered into the terminal. So if I wanted to install a program to be my window manager (like i3wm) I could install it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get install i3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The thing is, that command only works of the user who is entering the command had permission to install software. A user like root would need to do that. The root user in Linux is like the equivalent of an Administrator account in Windows. Root has permission to install programs. However, there is a pretty big rule that you don&amp;rsquo;t usually want to log into Linux as root. It&amp;rsquo;s just safer to not be root when you use Linux. So the typical way to install software with apt-get changes to use another program called sudo. The modified command looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install i3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The sudo command will temporarily changes your regular user&amp;rsquo;s permissions to root level so that the next command (apt-get) will be executed with elevated permissions. At least, that&amp;rsquo;s how it is supposed to be. But for me, it didn&amp;rsquo;t work!&lt;/p&gt;

&lt;p&gt;Not sure why, but for some reason my Debian instance did not have sudo installed. &lt;strike&gt;Maybe it was somehow related to me not installing a desktop environment. I don&amp;rsquo;t know for sure. But it struck me as odd.&lt;/strike&gt; &lt;a href=&#34;https://www.reddit.com/r/linux/comments/3guj67/into_the_nether_linux/cu1suqk/&#34;&gt;It seems that the reason sudo wasn&amp;rsquo;t installed is because I set a root password during installation&lt;/a&gt;. So I used a series of commands to install sudo so I could use it for all software installs going forward. Here are the commands I ran:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ su root
$ apt-get install sudo
$ sudo adduser quakkels sudo
$ su quakkels
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The su command (pronounced like soo) is the command to switch the current user to the user that is specified. Once I switched to root I was able to install sudo and add my regular user to the list of sudo-ers. Once that was completed, I switched back to my regular user account. Now I was able to install i3wm.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install i3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think it worked. Excellent!!! I sat there, looking at my screen. It didn&amp;rsquo;t change. I tried a reboot thinking that it would start up with i3wm working.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same login screen came up as before. I logged in and then thought that maybe I need to run i3 in order to start the window manager.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ i3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that definitely did not work.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo i3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That also definitely did not work. But, thanks to some advice from IRC and &lt;a href=&#34;http://blog.erikd.org/&#34;&gt;this guy&lt;/a&gt;, I knew enough that i3 has a dependency on xorg. So let&amp;rsquo;s install that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install xorg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was all well and good. But, I still had no idea why i3 wasn&amp;rsquo;t managing my windows yet! Starting to get a little annoyed. I should be patient though. It&amp;rsquo;s all about the learning experience right now. So after some googling, I found &lt;a href=&#34;https://faq.i3wm.org/question/6126/how-do-i-start-i3/&#34;&gt;this on the i3 FAQ&lt;/a&gt;. That FAQ question described almost exactly what I was experiencing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;From the FAQ:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to get started is to edit (or create, if misisng) ~/.xinitrc. If it didn&amp;rsquo;t exist, simply put exec i3 in there. If it exists, check the bottom for some exec call, comment it out and put exec i3 instead.
Once the file is saved, run startx from the TTY. This will start an X server, read the file and then start i3.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, note that the character ~ represents the current user&amp;rsquo;s home directory.&lt;/p&gt;

&lt;p&gt;After following the advice in that FAQ answer, I was able to start the i3 window manager with the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ startx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After I entered that command and pressed &amp;lsquo;enter&amp;rsquo; celebration ensued. Now I had a working i3 environment. A little google/bing/duckduckgo&amp;rsquo;ing revealed that I could open a new terminal using the keyboard shortcut alt+enter. If a user needs to launch a program that doesn&amp;rsquo;t run in a terminal, it can be started using a special prompt launched with the shortcut alt+d. Then the name of the program you want to type can be entered and launched. I quickly isntalled a few must have programs: an IRC client called irssi, and a web browser called Ice Weasel.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install irssi
$ sudo apt-get install iceweasel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;02i3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;but-but-i-thought-there-would-be-a-black-background&#34;&gt;But, but — I thought there would be a black background?&lt;/h2&gt;

&lt;p&gt;Things are going pretty well, so far. But I&amp;rsquo;m not going to hide that I felt a pang of disappointment when I opened a terminal in i3 and it had black text on a white background. That is unfortunate. When I use this VM I want to feel like I&amp;rsquo;m in the movies. I know that&amp;rsquo;s a totally shallow goal, but it&amp;rsquo;s still fun. And I&amp;rsquo;m a little stubborn. So I will have to figure this out sometime, but for now it is working.&lt;/p&gt;

&lt;h2 id=&#34;a-little-vm-housekeeping&#34;&gt;A little VM housekeeping&lt;/h2&gt;

&lt;p&gt;VirtualBox provides something called Guest Additions that can be installed in operating systems running in their VMs. Guest Additions are nice because it lets the guest machine interact with the host in a much more streamlined way. I installed it primarily because I wanted the Linux workspace to resize when I resized the VirtualBox window. There are a couple of websites out there that have decent instructions. The instructions I followed are &lt;a href=&#34;http://www.swiftsoftwaregroup.com/debian-wheezy-guest-windows-8-1-host-using-virtualbox/&#34;&gt;here&lt;/a&gt;. Configuring the VM and inserting the Guest Additions cd wasn&amp;rsquo;t an issue. But Linux has this concept of &amp;lsquo;mounting&amp;rsquo; a drive before you can use it. Maybe Windows and other OS&amp;rsquo;s have this concept too, but it may have been behind the scenes. I struggled with the mounting concept because it wasn&amp;rsquo;t in the step by step instructions that I followed. After pounding my head against the wall for way too long, I kind of stumbled on the &amp;lsquo;mount&amp;rsquo; command. The commands I used in Linux to install Guest Additions were these (executed in a root terminal):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get install module-assistant
$ m-a prepare
$ mount /media/cdrom
$ sh /media/cdrom/VBoxLinuxAdditions.run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a quick reboot, the desktop environment was working with Guest Additions nicely.&lt;/p&gt;

&lt;h2 id=&#34;chasing-that-black-background&#34;&gt;Chasing that black background&lt;/h2&gt;

&lt;p&gt;It was still important to me that the terminal in i3 had light text on a black (or dark) background. A simple command told me what terminal i3 used.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo $TERM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That printed out &amp;lsquo;xterm&amp;rsquo;. According to online search results, xterm is one of the older terminals that exist. And, it is configurable. So I got busy &lt;a href=&#34;http://scarygliders.net/2011/12/01/customize-xterm-the-original-and-best-terminal/&#34;&gt;configuring&lt;/a&gt; it according to my own tastes.&lt;/p&gt;

&lt;p&gt;At that point, I started getting frustrated. My Linux VM had no ~/.Xresources file, so I went ahead and created one. That wasn&amp;rsquo;t a problem. The first problem was when I tried to copy and paste from my web browser into the Nano text editor that I was using to edit the new .Xresources file. Ctrl+c and Ctrl+v weren&amp;rsquo;t working for me. To avoid that issue in the short term, I decided to just manually edit two configuration settings: the foreground and background colors. My patience was starting to wear thin.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xterm*foreground: rgb:4f/a3/43
xterm*background: rgb:00/00/00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I added those configuration settings to the file, closed the terminal, and opened a new terminal. Nothing changed. At this point I really was expecting the configuration file to take effect and overwrite the default settings. But it didn&amp;rsquo;t. I sat at my desk thinking about how it should have worked. It should have worked. Every other time I changed a config file it took effect as soon as the program restarted. Sure, cache might need to be cleared too. But this is how I understood computers to work. Adding or changing configuration should result in the program&amp;rsquo;s behavior changing to match. But it didn&amp;rsquo;t happen.&lt;/p&gt;

&lt;p&gt;Reading further down the &lt;a href=&#34;http://scarygliders.net/2011/12/01/customize-xterm-the-original-and-best-terminal/&#34;&gt;instructions&lt;/a&gt; led me to a command that seemed to somehow &amp;lsquo;merge&amp;rsquo; the .Xresources file with the actual configuration. This seemed odd to me. But, okay. That&amp;rsquo;s just how this works I suppose. So I ran the command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ xrdb -merge ~/.Xresources
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we&amp;rsquo;re getting somewhere! I closed the terminal and reopened it. Success! I wrote a few words and then sat back in satisfaction. I ended the day feeling great about my new Linux environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/03greenonblack.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-next-day-losing-my-cool&#34;&gt;The next day, losing my cool&lt;/h2&gt;

&lt;p&gt;What is this crap? This is some kind of messed up shit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/04blackonwhite.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The terminal colors were wrong. I changed them the day before, but the original colors were back. I checked my .Xresources config file and it hadn&amp;rsquo;t changed from the way I left it the previous day. It still had the color settings. This ticked me off. Configuration settings shouldn&amp;rsquo;t just reset themselves like this. Apparently they do in in this case though. Bad. I was beyond annoyed.&lt;/p&gt;

&lt;p&gt;Thanks to some help from this &lt;a href=&#34;http://www.linuxquestions.org/questions/slackware-14/xrdb-merge-xresources-how-can-i-get-rid-of-that-776844/#post3797806&#34;&gt;post&lt;/a&gt;,  I figured out that there is yet another step to configuring applications with .Xresources. So I added the line to my .xinitrc file and rebooted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xrdb -merge .Xresources
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That did not work. Then I changed it again, and rebooted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xrdb -merge ~/.Xresources
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This did not work. What the Hell, man? Let me guess. I probably need to not only configure the .Xresources configuration file with .xinitrc. I probably need to configure the .xinitrc configuration file inside some other configuration file. It&amp;rsquo;s configuration-ception!&lt;/p&gt;

&lt;p&gt;The actual fix was not that rage inducing as configuration-ception. Instead, there is a rational reason it isn&amp;rsquo;t working. Apparently, the .xinitrc is not a configuration file in the way that a typical XML or JSON file is a configuration file. The &amp;lsquo;rc&amp;rsquo; stands for &lt;a href=&#34;https://en.wikipedia.org/wiki/Run_commands&#34;&gt;run commands&lt;/a&gt;. The order of each line matters. I put the merge command at the end of the .xinitrc file. This means that the i3 window manager was starting before the .Xresources configuration file was merged in. So I updated the .xinitrc file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xrdb -merge ~/.Xresources
exec i3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seems so simple now. I should have realized this earlier. For crying out loud, the only two lines in this file are both commands. Well, that&amp;rsquo;s hindsight for you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Maintaining Your Vision</title>
      <link>http://quakkels.com/posts/maintaining-your-vision/</link>
      <pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/maintaining-your-vision/</guid>
      <description>&lt;p&gt;Programmers are often creators. Being a creator takes vision. Vision to see the destination, and vision to see the course. The destination could be learning a new language or technology stack. The destination could be a product to be released to customers. It could be something done for personal edification. The course is determined by taking that larger goal and breaking it down to manageable steps.&lt;/p&gt;

&lt;p&gt;The trick for successfully creating something, is to maintain that vision. But often the vision becomes lost and projects end up stalled or abandoned entirely.&lt;/p&gt;

&lt;p&gt;Patience in our work as programmers may be one of the most underrated skills a programmer could possess. There have been many articles &lt;sup&gt;(&lt;a href=&#34;http://blogoscoped.com/archive/2005-08-24-n14.html&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;http://www.jerf.org/programming/lazyProgrammersGuide.html&#34;&gt;2&lt;/a&gt;)&lt;/sup&gt; written about the benefits of being a so-called &amp;ldquo;lazy programmer&amp;rdquo; which can lead to the benefits of automating common tasks. Though, the role that patience plays in persevering in a project is something that seems to get lost in the conversation.&lt;/p&gt;

&lt;p&gt;Patience is important on many levels, but two come to mind in particular. There&amp;rsquo;s the project level, and then there&amp;rsquo;s the module level.&lt;/p&gt;

&lt;p&gt;Patience is useful on the project level when you can see your ultimate goal, but there are barriers to getting it done. A type of project that I frequently undertake is learning a new programming language. It often presents itself as &amp;ldquo;I want to write X application using X language.&amp;rdquo; I can see the application in my mind. The barrier to finishing the application is the syntax and ecosystem of the language I intend to learn. Of course, right? The point of the whole project is learn those new things. This is when impatience can be a project killer because shortcuts get taken. The original goal was twofold: 1) language and 2) application. Impatience can shift that goal into becoming a singular goal based on an exciting app, rather than the dual target of learning and also building. Project level impatience is what usually causes my personal projects to languish.&lt;/p&gt;

&lt;p&gt;What I&amp;rsquo;ll call module level impatience is the kind of thing that rears its head when you&amp;rsquo;re eyeballs deep in code. The ultimate function of the feature being written becomes the focus, and the voice of impatience starts nagging about taking shortcuts to get to the finish line faster. This impatience clouds the reasoning about the individual pieces of the feature being implemented. It is the enemy of clean and maintainable code.&lt;/p&gt;

&lt;p&gt;The truth is that when we code with an impatient mindset, then the results will suffer. Patience is required to maintain the project&amp;rsquo;s vision.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s Scrape the Web with Python 3</title>
      <link>http://quakkels.com/posts/lets-scrape-the-web-with-python-3/</link>
      <pubDate>Sun, 10 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/lets-scrape-the-web-with-python-3/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/pythonWebScrapeCover.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the back of my mind I&amp;rsquo;ve always been intrigued by writing an application that can retrieve web pages over HTTP. It&amp;rsquo;s a fairly simple thing to do. We have a myriad of web browsers that do it for us. But there is just something about writing an application that operates independently of a browser and reaches out to touch the internet that I find fun and intriguing. So let&amp;rsquo;s do it&amp;hellip; in Python.&lt;/p&gt;

&lt;p&gt;First let&amp;rsquo;s define some specifications for this project. Basically we&amp;rsquo;re going to &amp;ldquo;scrape&amp;rdquo; Craigslist.org listings and display them in our terminal (command line). It should be able to scrape any (or nearly any) of Craigslist&amp;rsquo;s regions and categories.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Will be a command line application&lt;/li&gt;
&lt;li&gt;Will read and display posts from Craigslist.org&lt;/li&gt;
&lt;li&gt;Will be able to define desired Craigslist.org subdomain and path from the command line&lt;/li&gt;
&lt;li&gt;Will display results to the terminal&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;separating-the-web-scraper-into-pieces&#34;&gt;Separating the Web Scraper into Pieces&lt;/h2&gt;

&lt;p&gt;As I see it, there are three pieces to this application:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The user interface which handles input and displays ouput&lt;/li&gt;
&lt;li&gt;The HTTP client which actually accesses the HTML page and gets the information therein&lt;/li&gt;
&lt;li&gt;The HTML parser which reads the HTML and collects the parts we want to keep&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that the application&amp;rsquo;s functionality is defined and it is broken down into pieces. We can start thinking about the project&amp;rsquo;s name and structure. Let&amp;rsquo;s just call it MyScrape and let&amp;rsquo;s structure in the following folder and files.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MyScrape/ (the application folder)

&lt;ul&gt;
&lt;li&gt;MyHttp.py (This will be responsible for the HTTP client that gets the web pages)&lt;/li&gt;
&lt;li&gt;MyParser.py (To read the HTML and collect the good parts)&lt;/li&gt;
&lt;li&gt;MyScrape.py (This will be the executable that handles user input and displays the results from MyParser)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-http-client-and-python-3&#34;&gt;The HTTP Client and Python 3&lt;/h2&gt;

&lt;p&gt;Python 3 has a handly little module that we can use to make our lives easy. We&amp;rsquo;re going to import http.client into our MyHttp.py file and use it in our class.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import http.client
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we imported http.client, we can create our class to handle a page. Let&amp;rsquo;s keep things simple and just call this class Page. Page just needs to connect to a server, request a page using a path, and provide the result to the application. Here is the complete MyHttp.py file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;&#39;&#39;GET a webpage using http.&#39;&#39;&#39;

import http.client

class Page:

    def __init__(self, servername, path):
        &#39;&#39;&#39;This initialize function sets the servername and path&#39;&#39;&#39;
        self.set_target(servername, path)

    def set_target(self, servername, path):
        &#39;&#39;&#39;This is a utility function that will reset the servername and the path&#39;&#39;&#39;
        self.servername = servername
        self.path = path

    def __get_page(self):
        &#39;&#39;&#39;This is a private function that actually goes out 
        and gets the response from the server&#39;&#39;&#39;

        server = http.client.HTTPConnection(self.servername)
        server.putrequest(&#39;GET&#39;, self.path)
        server.putheader(&#39;Accept&#39;, &#39;text/html&#39;)
        server.endheaders()

        return server.getresponse()        

    def get_as_string(self):
        &#39;&#39;&#39;This function provides the webpage as a string&#39;&#39;&#39;
        page = &#39;&#39;
        reply = self.__get_page() # gets the page

        if reply.status != 200:
            page = &#39;Error sending request {0} {1}&#39;.format(reply.status, reply.reason)
        else:
            data = reply.readlines()
            reply.close()
            for line in data:
                page += line.decode(&#39;utf-8&#39;)
        return page
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have our class, we need to make sure it works by testing it. We can do that by using the Python interpreter to execute our code for us. First, start the Python interpreter by sending the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to the shell prompt (or the command prompt if you&amp;rsquo;re on Windows). This should give you a prompt that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To exit the interpreter, just enter exit() and press enter. &lt;em&gt;Note: More information about the Python interpreter can be found &lt;a href=&#34;http://docs.python.org/3.3/tutorial/interpreter.html&#34;&gt;here&lt;/a&gt; on the Python.org website&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To test our code in the Python interpreter, first navigate to the MyScrape folder that has the MyHttp.py file in it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd path/to/your/MyScrape
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then start the interpreter and enter the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import MyHttp
&amp;gt;&amp;gt;&amp;gt; page = MyHttp.Page(&#39;quakkels.com&#39;, &#39;&#39;)
&amp;gt;&amp;gt;&amp;gt; print(page.get_as_string())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should now see the HTML source code for quakkels.com in your terminal. It works!&lt;/p&gt;

&lt;h2 id=&#34;html-parsing-and-python-3&#34;&gt;HTML Parsing and Python 3&lt;/h2&gt;

&lt;p&gt;The next part of this project we need to write is the HTML parser that allows us to identify the pieces of the Craigslist page that we want to keep. There are several different techniques for doing this including: regular expression matching (don&amp;rsquo;t use this technique), &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/DOM&#34;&gt;DOM&lt;/a&gt;, and &lt;a href=&#34;http://sax.sourceforge.net/&#34;&gt;SAX&lt;/a&gt; parsing.
The DOM (Document Object Model) technique basically involves navigating an XML or HTML document through a tree of nodes. The SAX (Simple API for XML) technique does not involve navigating like the DOM technique does. Rather, it reads the file through once, sending information to the application as the file is read. This means it&amp;rsquo;s pretty quick, but because there is no navigation the application will need to keep track of the state of the document as the SAX style parser reads it. Our MyParser.py file is going to execute a SAX style parser using the html.parser module.&lt;/p&gt;

&lt;p&gt;Python 3 has a handy module called html.parser that we&amp;rsquo;ll use in our application. Our parser class is going to be designed to just read Cragslist.com listings. I&amp;rsquo;m going to name the parser class ClParser. ClParser will need to inherit from HTMLParser (which is in the html.parse module) so that we can override the methods that get executed as the file is read in a SAX manner.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the complete MyParser.py file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;&#39;&#39;
Parse html from craigslist
&#39;&#39;&#39;

from html.parser import HTMLParser

class ClParser(HTMLParser):

    # parser state
    # These variables store the current state of the parser as it reads the file
    date = &#39;&#39;           # The date for the current listing

    title = &#39;&#39;          # The title of the current listing

    link = &#39;&#39;           # The link to the current listing&#39;s details

    collectFor = None   # will use this to keep track of what kind of data we 
                        # are currently collecting for. valid options are:
                        # &#39;date&#39;, &#39;title&#39;, and &#39;link&#39;

    insideRow = False   # This flag keeps track of whether we are inside a &amp;quot;row&amp;quot;
                        # &amp;quot;rows&amp;quot; have listing information

    # parser output
    results = &#39;&#39;        # the parser&#39;s output will be stored here

    def handle_starttag(self, tag, attrs):
        &#39;&#39;&#39;This function gets called when the parser encounters a start tag&#39;&#39;&#39;
        if tag == &#39;a&#39; and self.insideRow:
            self.collectFor = &#39;title&#39;

        for key, value in attrs:

            if(self.collectFor == &#39;title&#39; 
                and key == &#39;href&#39;
                and not self.link): # and not self.link makes sure it doesn&#39;t overwrite a preexisting value
                self.link = value

            if key == &#39;class&#39;:
                if value == &#39;row&#39;:
                    self.insideRow = True
                if value == &#39;ban&#39;:
                    self.collectFor = &#39;date&#39;

    def handle_endtag(self,tag):
        &#39;&#39;&#39;This function is called when the parser encounters an end tag&#39;&#39;&#39;
        if tag == &#39;p&#39;:
            self.insideRow = False

            # is there data to output?
            if self.title + self.link:
                self.results += &amp;quot;\nDate: \t{0}\nTitle:\t{1}\nLink:\t{2}\n&amp;quot;.format(
                    self.date, 
                    self.title, 
                    self.link)
            self.__reset_row()

    def handle_data(self, data):
        &#39;&#39;&#39;This function is called when the parser encounters data inside to tags&#39;&#39;&#39;        
        if self.collectFor == &#39;date&#39;:
            self.date = data
        if self.collectFor == &#39;title&#39; and not self.title:
            self.title = data

        self.collectFor = None # when we&#39;re done collecting the data, reset this flag

    def __reset_row(self):
        &#39;&#39;&#39;This is a utility function to reset the parser&#39;s state after a row&#39;&#39;&#39;
        self.title = &#39;&#39;
        self.link = &#39;&#39;
        self.summary = &#39;&#39;
        self.collectFor = None
        self.insideRow = False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The HTMLParser class that we are inheriting from has a feed(string argument) function that has been applied to our ClParser class. To execute our parser, we just need to make an instance of the class and call the feed(string argument) function.&lt;/p&gt;

&lt;p&gt;We can test this in the Python interpreter in the same way that we tested MyHttp. In the interpreter enter the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import MyHttp, MyParser
&amp;gt;&amp;gt;&amp;gt; page = MyHttp.Page(&#39;milwaukee.craigslist.org&#39;, &#39;/sya/&#39;)
&amp;gt;&amp;gt;&amp;gt; parser = MyParser.ClParser()
&amp;gt;&amp;gt;&amp;gt; parser.feed(page.get_as_string())
&amp;gt;&amp;gt;&amp;gt; print(parser.results)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should print a list of nicely formatted Craiglist listings for computers in the Milwaukee area. We&amp;rsquo;re almost done!&lt;/p&gt;

&lt;h2 id=&#34;the-last-piece&#34;&gt;The Last Piece!&lt;/h2&gt;

&lt;p&gt;Alright, we have two of our three pieces built. The last thing to do is handle user input and display results. We&amp;rsquo;re going to implement these features in the MyScrape.py file. Here&amp;rsquo;s the whole MyScrape.py file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import sys, MyParser, MyHttp

# try to assign the subdomain and path values
# if the assignment fails, just use default values
try:
    subdomain, path = sys.argv[1:]
except:
    subdomain, path = &#39;milwaukee&#39;, &#39;/sya/&#39;

# instantiate the parser
parser = MyParser.ClParser()

# instantiate the page
page = MyHttp.Page(subdomain + &#39;.craigslist.org&#39;, path)

# get the page and feed it to the parser
parser.feed(page.get_as_string())

# display the results
print(&#39;################\n    Results:\n################\n&#39;, parser.results)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There you have it. MyScrape.py is the entry point to our application. It allows the user to set a subdomain and a path when calling the script. It brings the MyHttp and MyParser modules together. and it displays results to the screen. To use this application, enter the following command in your shell or command prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python3 MyScrape.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;or&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python3 MyScrape.py sierravista /ata/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can download the entire source &lt;a href=&#34;http://quakkels.com/files/MyScrape.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;improving-the-scrape&#34;&gt;Improving the Scrape&lt;/h2&gt;

&lt;p&gt;Feel free to take this code and experiment with it. Expand on it. Make it spider sub pages. Make it return a list of dictionaries instead of a string. Save the data in a sqlite database, or to a text file. Maybe make it into a web service. Do whatever you want with it. (Keep it legal.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Happens When You Login?</title>
      <link>http://quakkels.com/posts/what-happens-when-you-login/</link>
      <pubDate>Sat, 23 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/what-happens-when-you-login/</guid>
      <description>

&lt;p&gt;Your favorite website is asking you for your username and password.&lt;/p&gt;

&lt;p&gt;Username? Password? Sure, you&amp;rsquo;ve got those. [You enter your username] then [you enter your password] then [you press enter] then boom, you&amp;rsquo;re logged into the website.&lt;/p&gt;

&lt;p&gt;What actually just happened? Well, assuming that you entered correct login credentials, you can now access whatever members only area that site offers to those credentials. But before that, in the split seconds after you clicked login and before you saw your profile, the website had to verify that the credentials you entered were correct. It had to make sure that it knew the username you entered and it had to make sure that your password belonged with that username. That process is called &lt;em&gt;authentication&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-does-authentication-mean&#34;&gt;What Does Authentication Mean?&lt;/h2&gt;

&lt;p&gt;It is common for online applications (like websites) to want to identify their users. Take Facebook as an example. Facebook cannot operate unless it is able to reliably identify its users. So, Facebook provides a registration process for new users to create accounts. That registration asks the user to give login credentials. In Facebook&amp;rsquo;s case the credentials consist of an email address and a password. When a registered user visits Facebook, they can enter their credentials and Facebook knows who they are because they have registration information for those credentials. Being able correctly identify a returning user is called authentication. Described another way, a user with correct login credentials is authentic.&lt;/p&gt;

&lt;p&gt;Sounds pretty straightforward&amp;hellip; right?&lt;/p&gt;

&lt;p&gt;Well, no. Well, it should be. The problem is when online applications do a poor job of keeping your credentials safe.&lt;/p&gt;

&lt;h2 id=&#34;sending-your-login-credentials&#34;&gt;Sending Your Login Credentials&lt;/h2&gt;

&lt;p&gt;First of all, when you enter your username and password into a website that does not use an encrypted SSL connection, it is possible (dare I say easy?) for a hacker to read your username and password as it is sent to the website. If a website is really concerned about their user&amp;rsquo;s security then login forms should always use an SSL connection.&lt;/p&gt;

&lt;h2 id=&#34;storing-user-login-credentials&#34;&gt;Storing User Login Credentials&lt;/h2&gt;

&lt;p&gt;In order for sites to authenticate returning users, they need to store the user&amp;rsquo;s credentials. Usually the credentials are stored in a database. The most important thing to recognize about login credentials is that they are the keys to a person&amp;rsquo;s online identity. Therefore, it is extremely important to store login credentials in a very secure way. The most basic level of security is to make sure that the database is not publicly accessible. But, even if the public doesn&amp;rsquo;t have direct access to the database, there are other measures that should be taken to keep login credentials as secure as possible.&lt;/p&gt;

&lt;h2 id=&#34;a-no-good-horrible-irresponsible-wrong-wrong-wrong-way-of-storing-user-credentials&#34;&gt;A no-good, horrible, irresponsible, wrong, wrong, WRONG way of storing user credentials&lt;/h2&gt;

&lt;p&gt;Some irresponsible sites have stored credentials like this:&lt;/p&gt;

&lt;h3 id=&#34;a-bad-users-database-table&#34;&gt;A Bad Users Database Table&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Name&lt;/th&gt;
&lt;th&gt;Last Name&lt;/th&gt;
&lt;th&gt;Username&lt;/th&gt;
&lt;th&gt;Password&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Brandon&lt;/td&gt;
&lt;td&gt;Quakkelaar&lt;/td&gt;
&lt;td&gt;bq2013&lt;/td&gt;
&lt;td&gt;guessme&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Jane&lt;/td&gt;
&lt;td&gt;Doe&lt;/td&gt;
&lt;td&gt;jdOnline&lt;/td&gt;
&lt;td&gt;password&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;Smith&lt;/td&gt;
&lt;td&gt;bsmith&lt;/td&gt;
&lt;td&gt;secret&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This is dangerous for a couple of reasons. The first and most glaring reason it is dangerous is because of the passwords are stored in plain text. This means that anyone who has access to this database (such as an employee of the website) can look up Jane Doe and find her password, Thereby allowing that person to steal Jane&amp;rsquo;s identity on that site. On top of that, if Jane has used the same password on other sites (like an online banking site) she is now vulnerable to identity theft there as well.&lt;/p&gt;

&lt;h2 id=&#34;a-slightly-better-way-of-storing-user-credentials&#34;&gt;A slightly better way of storing user credentials&lt;/h2&gt;

&lt;p&gt;Some sites that are more concerned with security store credentials a bit differently. They actually encrypt user&amp;rsquo;s password before storing them in the database.&lt;/p&gt;

&lt;h3 id=&#34;users-database-table-with-encrypted-passwords&#34;&gt;Users Database Table with Encrypted Passwords&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Name&lt;/th&gt;
&lt;th&gt;Last Name&lt;/th&gt;
&lt;th&gt;Username&lt;/th&gt;
&lt;th&gt;EncryptedPassword&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Brandon&lt;/td&gt;
&lt;td&gt;Quakkelaar&lt;/td&gt;
&lt;td&gt;bq2013&lt;/td&gt;
&lt;td&gt;hRnAQlrCPXFSGsS4cXDWh+vFLVWSlJka1YWBPTrpImI=&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Jane&lt;/td&gt;
&lt;td&gt;Doe&lt;/td&gt;
&lt;td&gt;jdOnline&lt;/td&gt;
&lt;td&gt;3ookjok1lRzkDBXTYr2PPGigEM+U7mnCJ/Uxof7nPgI=&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;Smith&lt;/td&gt;
&lt;td&gt;bsmith&lt;/td&gt;
&lt;td&gt;SKAbxUcdUOmqkP9TXJElrHkaZoIFwhGfzbcmy26QgN8=&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now the passwords are stored encrypted instead of stored as plain text. This is better, but this is still bad. The problem is that this particular encryption is reversible. This means that if an employee of the website wanted to, she could decrypt all the passwords. Not only that, but if someone gets ahold of Bob&amp;rsquo;s decrypted password, then they can hack into Bob&amp;rsquo;s account and Bob would never know about it until after something significant happens.&lt;/p&gt;

&lt;h2 id=&#34;passwords-should-be-stored-as-a-one-way-hash-with-salt&#34;&gt;Passwords should be stored as a one-way hash with salt&lt;/h2&gt;

&lt;p&gt;When a person registers on a website, the website should do at least three things to ensure security.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Send all credential information over an SSL&lt;/li&gt;
&lt;li&gt;Use a one-way hashing algorithm&lt;/li&gt;
&lt;li&gt;Use a Salt for each password&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hashing passwords with a one-way hashing algorithm is similar to encrypting passwords. The difference is that once the password is hashed, it cannot be converted back to the original value. This is important and it is a weakness of systems that just encrypt their passwords.&lt;/p&gt;

&lt;p&gt;For example, let&amp;rsquo;s say I use the password &amp;ldquo;4mazingPa55word&amp;rdquo;. If I encrypted that password using the key &amp;ldquo;key&amp;rdquo;, then &amp;ldquo;4mazingpa55word&amp;rdquo; becomes &amp;ldquo;B0csjGFQtvfg+05Ufr6gJBiZPWe1s77krk4oSF0FlWo=&amp;rdquo;. The problem is that using that key, I can decrypt the encrypted password back to plain text. Whenever a password can be obtained in it plain text form, that is a bad thing. that means that a disgruntled employee with access to the database could decrypt passwords and log into people&amp;rsquo;s accounts &lt;strong&gt;without them ever realizing that their password has been compromised&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The scary thing is that well known companies have been caught storing passwords in a way that allows the plain text version to be retrieved. &lt;a href=&#34;https://plus.google.com/+AmberYust/posts/NGV5xQwJywf&#34;&gt;In September of 2012, Pandora.com was caught doing this very thing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s consider a password stored using a one-way hash.&lt;/p&gt;

&lt;h3 id=&#34;users-database-table-with-salted-and-hashed-passwords&#34;&gt;Users Database Table with Salted and Hashed Passwords&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Name&lt;/th&gt;
&lt;th&gt;Last Name&lt;/th&gt;
&lt;th&gt;Username&lt;/th&gt;
&lt;th&gt;Salt&lt;/th&gt;
&lt;th&gt;HashedPassword&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Brandon&lt;/td&gt;
&lt;td&gt;Quakkelaar&lt;/td&gt;
&lt;td&gt;bq2013&lt;/td&gt;
&lt;td&gt;123abc&lt;/td&gt;
&lt;td&gt;jLg+RKUYydfcFmvuAD9DxXEaevk=&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Jane&lt;/td&gt;
&lt;td&gt;Doe&lt;/td&gt;
&lt;td&gt;jdOnline&lt;/td&gt;
&lt;td&gt;qweasd&lt;/td&gt;
&lt;td&gt;IpVoLHy0+QqENEEmByVevHzoUUU=&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;Smith&lt;/td&gt;
&lt;td&gt;bsmith&lt;/td&gt;
&lt;td&gt;poiqwe&lt;/td&gt;
&lt;td&gt;SYMTwSQi8+XtKAAtkJvXON8IQoY=&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This way of storing passwords is more secure than just encrypting passwords, and it&amp;rsquo;s much more secure than just storing passwords in plain text.&lt;/p&gt;

&lt;h2 id=&#34;what-is-the-salt-for&#34;&gt;What is the Salt For?&lt;/h2&gt;

&lt;p&gt;The salt is a value that is randomly generated by the website when a user registers. It is added to the user supllied password before is gets hashed. This means that if your password is a common password, the hash will be more difficult to crack because the system automatically adds a random value to it. This protects against attacks using &lt;a href=&#34;https://en.wikipedia.org/wiki/Rainbow_table&#34;&gt;Rainbow tables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So &lt;em&gt;please&lt;/em&gt;, if you are ever in the position to write user authentication software, please Salt and one-way hash your password over an SSL!&lt;/p&gt;

&lt;h2 id=&#34;additional-reading&#34;&gt;Additional Reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://plus.google.com/+AmberYust/posts/NGV5xQwJywf&#34;&gt;Pandora Password Weakness Exposed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codingkilledthecat.wordpress.com/2012/09/04/some-best-practices-for-web-app-authentication/&#34;&gt;Some Best Practices for Web App Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codinghorror.com/youre-probably-storing-passwords-incorrectly/&#34;&gt;You&amp;rsquo;re Probably storing Password Incorrectly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Learn Insertion Sort with Video Game Discs</title>
      <link>http://quakkels.com/posts/learn-insertion-sort-with-video-game-discs/</link>
      <pubDate>Sat, 09 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/learn-insertion-sort-with-video-game-discs/</guid>
      <description>

&lt;p&gt;I think you could say I have an average number of video game discs. It&amp;rsquo;s not a huge number of games, but it is enough that it can be difficult to find a particular game if they&amp;rsquo;re not organized in a predictable way.&lt;/p&gt;

&lt;p&gt;Enter insertion sort. Insertion sort is in the same family as the bubble sort in that its worst case complexity is O(n2). But in practice, it is usually a faster sort.&lt;/p&gt;

&lt;p&gt;So we start with a few game discs that we want to sort. To simplify this demonstration each game is numbered.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/insertionSort01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The sort begins by comparing the first two discs with each other, and ordering them appropriately. We see that the 4 is moved to before the 27.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/insertionSort02.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, the insertion sort looks remarkably similar to the bubble sort. the interesting part will be shown soon. First we move onto the next game disc. The 42 gets compared to the 27 and stays where it is because it is already in order relative to the 27.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/insertionSort03.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now comes the interesting part. The 21 is goes before the 42 and before the 27. So our insertion sort technique inserts the 21 into the correct spot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/insertionSort04.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then we get to the last game disc. An 8. This gets inserted after the 4 and before the 21.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/insertionSort05.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now the entire list of game discs has been sorted. We see the process working, but now we need to translate this process into a computer algorithm.&lt;/p&gt;

&lt;h2 id=&#34;insertion-sort-example-in-javascript&#34;&gt;Insertion Sort Example in JavaScript&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;// set up the array with random values
var sortMe = new Array();
var arrayLength = 5;
var i = 0;
for(; i &amp;lt; arrayLength; i++) {
    sortMe[i] = Math.floor((Math.random()*20)+1);
}

var logText = &amp;quot;&amp;quot;;
i = 0;
for(; i &amp;lt; arrayLength; i++) {
    logText += sortMe[i] + &amp;quot;, &amp;quot;;
}
console.log(&amp;quot;Starting Values: \t&amp;quot; + logText);

// begin insertion sort
i = 1;
var j, temp, k;

for(; i &amp;lt; arrayLength; i++) {
    temp = sortMe[i];
    j = i;
    while(j &amp;gt; 0 &amp;amp;&amp;amp; sortMe[j-1] &amp;gt; temp) {
        sortMe[j] = sortMe[j-1];
        j--;
    }
    sortMe[j] = temp;

    logText = &amp;quot;New Order:\t\t&amp;quot;;
    k=0;
    for(; k &amp;lt; arrayLength; k++) {
        logText += sortMe[k] + &amp;quot;, &amp;quot;;
    }
    console.log(logText);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a link to the &lt;a href=&#34;http://quakkels.com/files/InsertionSort.html&#34;&gt;working example&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>