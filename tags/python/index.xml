<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Quakkels.com</title>
    <link>http://quakkels.com/tags/python/index.xml</link>
    <description>Recent content in Python on Quakkels.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://quakkels.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Let&#39;s talk to a SQLite database with Python</title>
      <link>http://quakkels.com/posts/lets-talk-to-a-sqlite-database-with-python/</link>
      <pubDate>Sun, 20 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/lets-talk-to-a-sqlite-database-with-python/</guid>
      <description>

&lt;p&gt;As I write this, it&amp;rsquo;s the weekend. My wonderful wife brought home some amazing Jet Fuel XBold Dark Roast Coffee that is sure to keep me wired for the next several hours. Now what should I do? Let&amp;rsquo;s explore Python a little more by using it to talk to a database.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/JetFuel.png&#34; alt=&#34;Turning caffeine into code!&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re a long way from my bread and butter. My goto technologies for database interaction are .NET, C# and Entity Framework CodeFirst with SQL Server &lt;sup&gt;2005&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2008&lt;/sub&gt;. These technologies lend themselves to enterprise level web and application development. They require a fair amount of software licenses and infrastructure to get rolling. In contrast, SQLite (as you may have guessed) is a very lightweight implementation of a relational database. It is completely self contained. There is no SQLite server or configuration requirements. You just make a database and boom! You&amp;rsquo;re in business. Because of this light footprint and its ease of use, it is a very common database to use in mobile applications.&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s create a SQLite database file. I&amp;rsquo;m going to call my database &amp;ldquo;Blog.sqlite&amp;rdquo;. You can do this from the command line with Python, or if you prefer a graphical interface, you can use a snappy little Firefox add-on called &lt;a href=&#34;https://addons.mozilla.org/en-us/firefox/addon/sqlite-manager/&#34;&gt;SQLite Manager&lt;/a&gt;. It runs inside Firefox and offers a simple interface for interacting with SQLite databases. And, since it runs in Firefox, it works on any platform that runs Firefox (E.G. MacOS, Windows, Linux).&lt;/p&gt;

&lt;p&gt;Once we have our database created, then we need to make a table. Once again, we can do this using straight SQL and Python from the command line, but I prefer to use the SQLite Manager add-on in Firefox.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/CreatePostsTableResized.png&#34; alt=&#34;Screenshot of creating a table with SQLite Manager.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note that the Id field is an auto incremented integer value and a primary key.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s dive into code. What will this application do? Well, since this project is in the spirit of exploration, the application we&amp;rsquo;re going to build won&amp;rsquo;t be very useful. Instead it will have an academic focus. Let&amp;rsquo;s just perform basic CRUD operations (Create, Read, Update, Delete) and then exit. We won&amp;rsquo;t worry about user interaction or GUI or web. This is going to just be a console app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;This should go without saying, but this won&amp;rsquo;t work without installing Python first. I&amp;rsquo;m using Python3.2.3. Don&amp;rsquo;t worry about downloading SQLite. There is no SQLite server, remember? If you have Python, you can use SQLite.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the same folder as the Blog.sqlite database, create your Python file using your favorite text editor. I called mine sqliteConnect.py. Once you have your file, you can run it from the command line by first browsing to the folder where you saved the file, then just enter the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python3 sqliteConnect.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That will run the Python script. Though, nothing will happen until we put some code in there.&lt;/p&gt;

&lt;h2 id=&#34;connecting-to-your-sqlite-database-from-python&#34;&gt;Connecting to Your SQLite Database from Python&lt;/h2&gt;

&lt;p&gt;To perform CRUD functionality, first we need to establish a connection with the database, and then create what&amp;rsquo;s known as a cursor which will allow us to execute commands.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import sqlite3

conn = sqlite3.connect(&#39;Blog.sqlite&#39;)
cursor = conn.cursor()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;creating-a-record&#34;&gt;Creating a Record&lt;/h2&gt;

&lt;p&gt;Now that we have our open connection and our cursor, we can insert data into the Posts table.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cursor.execute(&#39;insert into Posts (Headline, Body) values (?, ?)&#39;, (&#39;This is my Headline&#39;, &#39;This is the body of my blog post.&#39;))
firstPostId = cursor.lastrowid

cursor.execute(&#39;insert into Posts (Headline, Body) values (?, ?)&#39;, (&#39;Jet Fuel XBold Coffee&#39;, &#39;Jet Fuel XBold Dark Roast Coffee will make you code like a madman.&#39;))
conn.commit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we call &lt;code&gt;cursor.execute()&lt;/code&gt; and pass it two parameters. A SQL command with placeholders for the data (the question marks), and a sequence containing the data to be inserted. Since we are hard-coding the insert, we could have just placed our data directly into the SQL. But in the real world, we could be inserting user generated input. In that case, we would want to use this parameterized technique to keep the SQL query safe and keep our database safe from SQL Injection style hacking attempts.&lt;/p&gt;

&lt;p&gt;We have explicitly inserted the data for Headline and Body while ignoring the value for the Id field. This is purposeful because when we created the Posts table, we defined Id to be an auto-incrementing integer value. This is good because it saves us from having to generate a unique identifier ourselves. However, we are going to be editing this same record later in our application. In order to be able to get the same record, we need to know the auto generated Id value.&lt;/p&gt;

&lt;p&gt;The last inserted row id is stored in &lt;code&gt;cursor.lastrowid&lt;/code&gt;. So, when our insert is complete, if we want to grab the new Id value, we just need to assign &lt;code&gt;cursor.lastrowid&lt;/code&gt; to our &lt;code&gt;firstPostId&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s worth noting here, calling &lt;code&gt;cursor.execute()&lt;/code&gt; will execute the command on the database. But, we need to commit any changes by calling conn.commit(). If we don&amp;rsquo;t call conn.commit() before the connection is closed, then our changes will be undone as if they never happened.&lt;/p&gt;

&lt;h2 id=&#34;reading-our-new-records&#34;&gt;Reading Our New Records&lt;/h2&gt;

&lt;p&gt;Now that we have some data inserted into the database table, let&amp;rsquo;s read it out.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cursor.execute(&#39;select * from Posts&#39;)

print(&#39;Current records: &#39;)
for row in cursor.fetchall():
    print(&#39;\t&#39;, row)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are using the same &lt;code&gt;cursor.execute()&lt;/code&gt; method to run a select query on the table. Then we can print each row by using &lt;code&gt;cursor.fetchall()&lt;/code&gt; in a for loop.&lt;/p&gt;

&lt;h2 id=&#34;update-that-first-record&#34;&gt;Update That First Record&lt;/h2&gt;

&lt;p&gt;Now, let&amp;rsquo;s make some changes to the record we inserted first. This is when the &lt;code&gt;firstPostId&lt;/code&gt; comes in handy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cursor.execute(&#39;update Posts set Headline=?, Body=? where Id=?&#39;, (&#39;This is my NEW Headline&#39;, &#39;This is the NEW body of my blog post.&#39;, firstPostId))
conn.commit()

print(&#39;Records after update: &#39;)
cursor.execute(&#39;select * from Posts&#39;)
for row in cursor.fetchall():
    print(&#39;\t&#39;, row)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we print our read results, we can see that the first record has been updated with new data.&lt;/p&gt;

&lt;h2 id=&#34;delete-everything&#34;&gt;Delete Everything&lt;/h2&gt;

&lt;p&gt;You don&amp;rsquo;t have to delete everything, but that&amp;rsquo;s what I&amp;rsquo;m going to do.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cursor.close()
conn.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, when we print our query results, we see nothing.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up-closing-down&#34;&gt;Wrapping Up, Closing Down&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cursor.close()
conn.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we&amp;rsquo;re done with our cursor and connection, we can close them down.&lt;/p&gt;

&lt;h2 id=&#34;complete-code&#34;&gt;Complete Code&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;import sqlite3

conn = sqlite3.connect(&#39;Blog.sqlite&#39;)
cursor = conn.cursor()

# (C)reate a new blog post
cursor.execute(&#39;insert into Posts (Headline, Body) values (?, ?)&#39;, (&#39;This is my Headline&#39;, &#39;This is the body of my blog post.&#39;))
firstPostId = cursor.lastrowid

cursor.execute(&#39;insert into Posts (Headline, Body) values (?, ?)&#39;, (&#39;Jet Fuel XBold Coffee&#39;, &#39;Jet Fuel XBold Dark Roast Coffee will make you code like a madman.&#39;))
conn.commit()

# (R)ead our new posts
cursor.execute(&#39;select * from Posts&#39;)

print(&#39;Current records: &#39;)
for row in cursor.fetchall():
    print(&#39;\t&#39;, row)

# (U)pdate the first post
cursor.execute(&#39;update Posts set Headline=?, Body=? where Id=?&#39;, (&#39;This is my NEW Headline&#39;, &#39;This is the NEW body of my blog post.&#39;, firstPostId))
conn.commit()

print(&#39;Records after update: &#39;)
cursor.execute(&#39;select * from Posts&#39;)
for row in cursor.fetchall():
    print(&#39;\t&#39;, row)

# (D)elete all the records
cursor.execute(&#39;delete from Posts&#39;)

print(&#39;Records after delete: &#39;)
cursor.execute(&#39;select * from Posts&#39;)
for row in cursor.fetchall():
    print(&#39;\t&#39;, row)

conn.commit()
cursor.close()
conn.close()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ASP.NET MVC Compared to Django</title>
      <link>http://quakkels.com/posts/asp-net-mvc-compared-to-dango/</link>
      <pubDate>Sun, 13 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/asp-net-mvc-compared-to-dango/</guid>
      <description>

&lt;p&gt;The MVC pattern is widely used in web development today. Regardless of whether
you develop in C#, PHP, Python, Java, JavaScript, or Ruby, you won’t have any
trouble finding a popular MVC pattern for your language of choice.&lt;/p&gt;

&lt;p&gt;Being primarily a C# developer, I’ve been using ASP.NET MVC since version 1.
It’s a great framework. It can be very good at getting a project off the ground
quickly, especially when coupled with a good ORM such as NHibernate, or Entity
Framework.&lt;/p&gt;

&lt;p&gt;For a side project, I decided to set aside the familiar ASP.NET MVC framework in
favor of learning a new language and a new corresponding framework. After a
period of time spent deliberating over the virtues and drawbacks of each
language, I chose Python for the language, and Django for the framework&amp;hellip; and
there was much rejoicing.&lt;/p&gt;

&lt;p&gt;As I learned the language and read the Django docs, it became apparent to me
that the MVC pattern can be implemented in various ways. MVC is not just
whatever Microsoft says it is. The pattern (as with almost everything) is open
to a little interpretation. So I needed to come to terms with the absence of
some tools that I was used to having in ASP.NET MVC, as well as the unfamiliar
terminology in the Django framework.&lt;/p&gt;

&lt;h2 id=&#34;introducing-django-it-is-not-a-cms&#34;&gt;Introducing Django (it is not a CMS)&lt;/h2&gt;

&lt;p&gt;The first thing I would like to point out, is that Django is not a CMS. Django
is to Python as ASP.NET MVC is to C#. I was surprised to find that out. My first impression of Django was that it was like Drupal, or Wordpress. I thought it was more like a CMS than a framework.&lt;/p&gt;

&lt;p&gt;Having said that, Django’s administration scaffolding is amazing. Almost to the point that it could appear to be a pre-built CMS. Django is literally capable of generating an entire administration section that allows you to manage data in your database as defined by your MVC models. That is something that ASP.NET MVC is capable of doing to a certain degree, when an application uses Entity Framework, but they do it a little differently. ASP.NET MVC Scaffolding is completely dependant on Visual Studio’s ability to read your models and then generate code for your controllers. Though, in my experience I often have to go back and rewrite most of the generated code, and many-to-many relationships are sketchy, if they’re generated at all.&lt;/p&gt;

&lt;p&gt;That isn’t the case for Django, which has it’s own built in ORM. Django is capable of complete scaffolding of many-to-many relationships, image and file uploaders, field validation, as well as basic input fields.&lt;/p&gt;

&lt;h2 id=&#34;mvc-actually-stands-for-model-template-view&#34;&gt;MVC actually stands for Model Template View&lt;/h2&gt;

&lt;p&gt;It’s semantics, I know. Read on.&lt;/p&gt;

&lt;h2 id=&#34;django-controllers-aren-t-called-controllers&#34;&gt;Django Controllers Aren’t Called Controllers&lt;/h2&gt;

&lt;p&gt;To fulfill the MVC pattern, Django uses three primary divisions of code, the Model, the View, and the Template. Notice that there is no Controller.&lt;/p&gt;

&lt;p&gt;Since I come from and ASP.NET MVC background, I was expecting code divisions that are labeled Model, View, and Controller (hence MVC). But no, this is not the case in Django. This fact caused some initial confusion for me as I was learning Django, but it doesn’t need to be confusing. If you’re familiar with ASP.NET MVC, then we just need to associate the Model, View, Controller concepts to the correct labels in Django.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th&gt;Model&lt;/th&gt;
&lt;th&gt;View&lt;/th&gt;
&lt;th&gt;Controller&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;&lt;strong&gt;ASP.NET MVC Term&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Model&lt;/td&gt;
&lt;td&gt;View&lt;/td&gt;
&lt;td&gt;Controller&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;&lt;strong&gt;Django Term&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Model&lt;/td&gt;
&lt;td&gt;Template&lt;/td&gt;
&lt;td&gt;View&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;django-s-views-are-not-asp-net-mvc-views&#34;&gt;Django’s Views are not ASP.NET MVC Views&lt;/h2&gt;

&lt;p&gt;When I think of Views in MVC, I think of the presentation layer which consists of markup, CSS, JavaScript, and some server-side scripting for basic display logic. That’s not what Views are in Django. Rather, Django’s Views do the equivalent job of the Controller in ASP.NET MVC.
Templates are the Real Views&lt;/p&gt;

&lt;p&gt;ASP.NET MVC uses the term &amp;lsquo;View&amp;rsquo; to describe their presentation layer. HTML markup, css styles and JavaScript come together in a View file with help from Razor. Razor is very powerful and it is easy to pick up because it allows C# syntax directly in the view file to render a complete webpage. In my experience, this can also lead to an unbalanced View that has too much logic embedded in the View file instead of in the controller.&lt;/p&gt;

&lt;p&gt;Django uses the term “Template&amp;rsquo; to describe their presentation layer. It also brings HTML markup, css styles, and JavaScript together. Though, it uses it’s own template rendering system. Whereas ASP.NET has the power of Razor that leverages C# syntax, Django’s template rendering syntax is unique, and it introduces a steeper learning curve than Razor.&lt;/p&gt;

&lt;h2 id=&#34;if-you-re-looking-for-partial-views-in-django&#34;&gt;If You’re Looking for Partial Views in Django&amp;hellip;&lt;/h2&gt;

&lt;p&gt;&amp;hellip;You’re probably not going to find them. There is nothing called &amp;ldquo;Partial Template&amp;rdquo; in Django, though you can accomplish similar functionality.&lt;/p&gt;

&lt;p&gt;Let’s say you have a data driven navigation bar that you want to display on all your template pages. You don’t want to write all your views to explicitly query that data, create the nav object for the template, and then have the navigation markup located in each template. Rather, you would like to just have located in your template file a reference to a &amp;ldquo;Partial View&amp;rsquo; which would do all that for you and it is independent of View-specific processes. In ASP.NET, this can be accomplished with Partial Views. In Django, this can be accomplished with Template Tags. It seems to me to be more cumbersome than a Partial View concept, but that could just be because I am still relatively new to the Django framework.
Models are Pretty Much What You Would Expect&lt;/p&gt;

&lt;p&gt;Django has its own built in ORM. This allows you to define database tables, fields, validation, and relationships using Python classes. When you make changes to you Model’s classes, Django provides a simple command to sync the database:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python manage.py syncdb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These Model classes are editable through Django’s excellent scaffolding in the admin area, and they are queryable from Views for displaying in templates.&lt;/p&gt;

&lt;h2 id=&#34;is-django-better-than-asp-net-mvc&#34;&gt;Is Django Better than ASP.NET MVC?&lt;/h2&gt;

&lt;p&gt;No, not really. Neither is ASP.NET better than Django. ASP.NET MVC and Django both have their weaknesses. They need to be selected based on the project specs. Also, familiarity is huge when considering what technology to use when starting a new project. I was looking for a low cost learning experience with my project, Python + Django was perfect for that. The project is now done, or perhaps more accurately described as ‘abandoned’, and I am glad that I explored it. I would probably use Django again, if the situation called for it. Though, I think first exploring other Python frameworks would be a good idea.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>