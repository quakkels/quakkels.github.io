<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Practices on Quakkels.com</title>
    <link>http://quakkels.com/tags/practices/index.xml</link>
    <description>Recent content in Practices on Quakkels.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://quakkels.com/tags/practices/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Frameworks and When to Avoid Them</title>
      <link>http://quakkels.com/posts/frameworks-and-when-to-avoid-them/</link>
      <pubDate>Sat, 28 Jan 2017 07:41:18 -0600</pubDate>
      
      <guid>http://quakkels.com/posts/frameworks-and-when-to-avoid-them/</guid>
      <description>&lt;p&gt;Frameworks can help jump-start productivity on projects. But be careful.
Relying too much on frameworks could also limit it in the long run.&lt;/p&gt;

&lt;p&gt;Whenever the opportunity presents itself, programmers should carefully consider
whether using a framework is beneficial. It may provide immediate benefits, but
there should be no magic happening that isn&amp;rsquo;t understood by the programmer.&lt;/p&gt;

&lt;p&gt;Years ago, I learned how to make websites with C#. I had help from many books,
tutorials, and co-workers. With those resources I used the ASP.NET MVC 1
framework to build websites in a way I had never done before. While building my
sample MVC sites, the code I wrote was there just because that&amp;rsquo;s how it was
written in a tutorial somewhere. But, I had very little understanding of how
the internals worked. I didn&amp;rsquo;t understand how routing worked, or how reflection
worked, or how factories fit in, or anything about what a view engine did, or
model binding. It was all just magic that I accepted and had faith in.&lt;/p&gt;

&lt;p&gt;I was able to build a working website with C# and ASP.NET MVC, and I did it
fairly quickly. It was done faster than it would have been without the
framework. Achieving results while learning a technology is important for any
beginner. The experience of finishing is valuable for the sense of
accomplishment and for the lessons that are learned along the way. But, it&amp;rsquo;s
important to understand that once a project is finished, the learning should
not stop. Understanding the building blocks of any framework is the foundation
for every solid programmer.&lt;/p&gt;

&lt;p&gt;In my case, it was very important that I continued to build up my foundation of
understanding. That&amp;rsquo;s because projects in the real world don&amp;rsquo;t just end. They
live on. Real projects will continue to receive feature requests. New
requirements will appear. Technology will change. Eventually, the chosen
framework might lose support, or might not keep up with requirements. When that
happens knowledge of how the framework functions is imperative. Without that
understanding programmers are at the mercy of tutorials and the framework
creators. But with that foundation programmers are equipped to continue
building and shipping their project.&lt;/p&gt;

&lt;p&gt;The bottom line is this: frameworks can be wielded much more effectively
&lt;em&gt;after&lt;/em&gt; the programmer understands enough of the language and design concepts
so that the framework&amp;rsquo;s behavior isn&amp;rsquo;t magic anymore. Programmers equipped with
such understanding will know where to look for seams in the execution pipeline,
and they will be able to add customizations where appropriate.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>