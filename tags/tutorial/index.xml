<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on Quakkels.com</title>
    <link>http://quakkels.com/tags/tutorial/index.xml</link>
    <description>Recent content in Tutorial on Quakkels.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://quakkels.com/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Run Plex on an Ubuntu Server at Home</title>
      <link>http://quakkels.com/posts/run-plex-on-ubuntu-server-at-home/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/run-plex-on-ubuntu-server-at-home/</guid>
      <description>

&lt;p&gt;Recently I&amp;rsquo;ve decided that having limited high quality entertainment choices is better than having endless choices that are of questionable quality. So my household decided to end our Netflix subscription. This decision motivated me to build a private streaming media server for our home. Here is how I created a home media server with Plex and a home server tower.&lt;/p&gt;

&lt;h1 id=&#34;choosing-the-media-server&#34;&gt;Choosing the Media Server&lt;/h1&gt;

&lt;p&gt;There are two popular software options for home media server. &lt;a href=&#34;https://www.plex.tv/&#34; target=&#34;_blank&#34;&gt;Plex&lt;/a&gt; and &lt;a href=&#34;https://kodi.tv/&#34; target=&#34;_blank&#34;&gt;Kodi&lt;/a&gt;. They are both free to use, though Plex does have a premium subscription option to unlock advanced features. These two media servers are very similar, and I believe they&amp;rsquo;ve been forked from the same original open source project.&lt;/p&gt;

&lt;p&gt;I knew my household would be using our PS4 as a client of the media server. This ended up being the detail that helped me make the decision between the two. When I saw that &lt;a href=&#34;https://kodi.onl/ps4/&#34; target=&#34;_blank&#34;&gt;Kodi recommended using the Plex app&lt;/a&gt; for streaming on the PS4, I decided to use Plex directly.&lt;/p&gt;

&lt;h1 id=&#34;choosing-the-hardware&#34;&gt;Choosing the Hardware&lt;/h1&gt;

&lt;p&gt;This Plex media server will need some hardware to run on. In my case, this meant I&amp;rsquo;d need to acquire new computers because everything I have are either not suited to the job (e.g. laptops), are already dedicated to something else (e.g. Raspberry Pi, PS4), or don&amp;rsquo;t exist (i.e. I don&amp;rsquo;t have any other computers).&lt;/p&gt;

&lt;p&gt;So, I needed to get a server, of some type, to run Plex on. I didn&amp;rsquo;t want to spend the time building a server myself. Rather than dealing with potential hardware hiccups, I wanted to focus on the software and networking parts of this project. So I considered these three options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Raspberry Pi&lt;/li&gt;
&lt;li&gt;NAS&lt;/li&gt;
&lt;li&gt;Some kind of home server or PC&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Raspberry Pi was initially the more attractive option. But, I doubt that the little ARM processor will be able to keep up. I could see it getting really bogged down if there&amp;rsquo;s more than one stream, or if any transcoding is needed.&lt;/p&gt;

&lt;p&gt;Next to check out was a NAS. These seemed ideal at first. But their shine dimmed as I dug into prices and specifications. Price was the key factor. I could easily spend around four hundred dollars on an entry level NAS that had no hard disks.&lt;/p&gt;

&lt;p&gt;A quick web search for &amp;ldquo;Home Server&amp;rdquo; brought me to the Dell PowerEdge T30 on sale at Amazon for $376.20. This seemed like a good option. It came with a Intel Xeon E3-1225 v5 3.3GHz processor, 8GB of RAM, and a 1TB HD. This looked like a great value.&lt;/p&gt;

&lt;p&gt;To make sure the T30 would work, I started investigating &lt;a href=&#34;https://support.plex.tv/articles/201774043-what-kind-of-cpu-do-i-need-for-my-server/?fbclid=IwAR3AqFt86n6IpsHazToGFNHzJtOFFfiUrnEP-Drf43GnpmvFQAAKvxBOCK0&#34; target=&#34;_blank&#34;&gt;CPU requirements in more depth&lt;/a&gt;. I wanted my server to handle transcoding two 1080p video files simultaneously. Plex recommended that transcoding one 1080p (10Mbps, H.264) file would need a CPU with a 2000 PassMark score. So, getting a CPU with a 4000 score should theoretically be able to double that number to two. The Xeon E3-1225 v3 has a score of &lt;a href=&#34;https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+E3-1225+v5+%40+3.30GHz&amp;id=2707&#34; target=&#34;_blank&#34;&gt;7,830&lt;/a&gt;. That meets my requirements and has plenty of cushion.&lt;/p&gt;

&lt;p&gt;The T30 had the processing power, had the 1TB disk, was budget friendly, and already built. It didn&amp;rsquo;t need anything more. I just had to un-box it, plug in power and some initial peripherals (to handle OS installation) and connect it to my network via Ethernet.&lt;/p&gt;

&lt;h1 id=&#34;choosing-the-operating-system&#34;&gt;Choosing the Operating System&lt;/h1&gt;

&lt;p&gt;I didn&amp;rsquo;t have any desire to mess with Windows for this project. I&amp;rsquo;ve been using Linux for most of my recent projects and I&amp;rsquo;d like to continue that trend. There&amp;rsquo;s also nothing about Plex that requires Windows software.&lt;/p&gt;

&lt;p&gt;I settled on using Ubuntu Server. It&amp;rsquo;s a widely used distribution of Linux that has a lot of documentation available.&lt;/p&gt;

&lt;h1 id=&#34;install-ubuntu-server&#34;&gt;Install Ubuntu Server&lt;/h1&gt;

&lt;p&gt;Download the ISO from &lt;a href=&#34;https://ubuntu.com/download/server&#34; target=&#34;_blank&#34;&gt;their website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once it has finished downloading, make a boot disk with it. This is very simple with Windows 10.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Place a write-able disk in your disk drive.&lt;/li&gt;
&lt;li&gt;Right click on the Ubuntu ISO file and select &amp;ldquo;Burn disk image.&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/plex01-image-dvd-on-windows.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Get the boot disk in to the DVD drive of your server. Then with the disk in the drive, turn on the server.&lt;/p&gt;

&lt;p&gt;As the server boots, smash that F12 key to enter BIOS to Boot from the DVD drive.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Another option is to create a bootable thumb drive using a tool like Balena Etcher to image the drive. I used writeable DVDs because I have so many left over from the 2000s that I just might as well use them up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ubuntu&amp;rsquo;s documentation is very good. Follow these &lt;a href=&#34;https://tutorials.ubuntu.com/tutorial/tutorial-install-ubuntu-server#0&#34; target=&#34;_blank&#34;&gt;directions for installing Ubuntu Server&lt;/a&gt;. They have screenshots and instructions of their installation screens, so I&amp;rsquo;m not going to go into too many details here.&lt;/p&gt;

&lt;p&gt;When asked, &lt;strong&gt;be sure to install SSH for remote access&lt;/strong&gt;. This allows you to manage the server from your regular workstation. So you can put your server out of the way. And, you don&amp;rsquo;t have to worry about connecting monitors or keyboards to work on it. Finish off the installation by restarting the box.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve finished installing Ubuntu Server it should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be connected to the network via Ethernet&lt;/li&gt;
&lt;li&gt;Have a Name (mine is named &lt;code&gt;media&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Have a User on the server (my user is &lt;code&gt;quakkels&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Have SSH installed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, now look in your router&amp;rsquo;s connected devices to find your server&amp;rsquo;s IP address on your network.&lt;/p&gt;

&lt;p&gt;Log in to your server from your main workstation via SSH:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh 192.168.1.11 -l quakkels
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use your server&amp;rsquo;s local network IP address and your user&amp;rsquo;s username in the command above.&lt;/p&gt;

&lt;p&gt;The next thing we need to do is install Samba on the server.&lt;/p&gt;

&lt;h2 id=&#34;install-samba&#34;&gt;Install Samba&lt;/h2&gt;

&lt;p&gt;I want to be able to access the media folder that&amp;rsquo;s on my server from my laptop. I need Samba installed in Ubuntu to do that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install samba
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add a user to Samba. I&amp;rsquo;ll use the &lt;code&gt;quakkels&lt;/code&gt; user.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo smbpasswd -a quakkels
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, create a folder to share.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~
$ mkdir library
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, edit the configuration file with your preferred editor. I&amp;rsquo;m using Nano.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nano /etc/samba/smb.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Scroll down to the end of the file and add these lines.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[library]
   path = /home/quakkels/library
   available = yes
   valid users = quakkels
   read only = no
   browsable = yes
   public = yes
   writeable = yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace &lt;code&gt;library&lt;/code&gt; with the name of your own shared folder and &lt;code&gt;quakkels&lt;/code&gt; with your own user.&lt;/p&gt;

&lt;p&gt;Save the file and exit the editor.&lt;/p&gt;

&lt;p&gt;Restart the smb daemon to apply the configuration changes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo service smbd restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So at this point the share should be working and accessible on your network. Use Windows File Explorer to test it.&lt;/p&gt;

&lt;p&gt;I navigated to \media\library and logged in with the Samba user &lt;code&gt;quakkels&lt;/code&gt; and placed a file. Test succeeded!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/plex03-samba-network-share.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;install-the-plex-media-server&#34;&gt;Install the Plex Media Server&lt;/h1&gt;

&lt;p&gt;Unfortunately, Plex is not available via &lt;code&gt;apt-get&lt;/code&gt; in Ubuntu. But the Plex website does lay out a process for &lt;a href=&#34;https://support.plex.tv/articles/200288586-installation/&#34; target=&#34;_blank&#34;&gt;installing the server on Linux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Start by downloading the &lt;code&gt;.deb&lt;/code&gt; file for Plex. I found the &lt;code&gt;.deb&lt;/code&gt; file available here: &lt;code&gt;https://downloads.plex.tv/plex-media-server-new/1.16.5.1554-1e5ff713d/debian/plexmediaserver_1.16.5.1554-1e5ff713d_amd64.deb&lt;/code&gt; and I&amp;rsquo;ll be using that URL with &lt;code&gt;wget&lt;/code&gt; in Ubuntu to download it directly to the server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~
$ wget https://downloads.plex.tv/plex-media-server-new/1.16.5.1554-1e5ff713d/debian/plexmediaserver_1.16.5.1554-1e5ff713d_amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, once the &lt;code&gt;.deb&lt;/code&gt; packaged has finished downloading, we can install it with &lt;code&gt;dpkg&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo dpkg -i plexmediaserver_1.16.5.1554-1e5ff713d_amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can navigate to the Plex web site from a computer on your network by going to &lt;code&gt;http://{your-servers-ip}:32400/web/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Plex is now running. You can follow Plex documentation to add Plex repositories for future updates, and for adding your media to Plex libraries.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/plex04-web-site.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://itsfoss.com/install-deb-files-ubuntu/&#34; target=&#34;_blank&#34;&gt;3 Ways to Install Deb Files on Ubuntu Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itsfoss.com/install-plex-ubuntu/&#34; target=&#34;_blank&#34;&gt;How to Install and Configure Plex on Ubuntu Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.howtogeek.com/176471/how-to-share-files-between-windows-and-linux/&#34; target=&#34;_blank&#34;&gt;How to Share Files Between Windows and Linux&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.samba.org/&#34; target=&#34;_blank&#34;&gt;Samba&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.plex.tv/media-server-downloads/&#34; target=&#34;_blank&#34;&gt;Plex Media Server Downloads&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.plex.tv/articles/200288586-installation/&#34; target=&#34;_blank&#34;&gt;Plex Media Server Installation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Mobile Development and Xamarin</title>
      <link>http://quakkels.com/posts/getting-started-with-mobile-development-and-xamarin/</link>
      <pubDate>Tue, 04 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/getting-started-with-mobile-development-and-xamarin/</guid>
      <description>

&lt;p&gt;Xamarin enables programmers to write native mobile applications for both Android and iOS using C# and free development tools like Visual Studio Community Edition. This means that if you&amp;rsquo;re invested in the .NET ecosystem and the C# language, you can write cross-platform mobile applications using technology that&amp;rsquo;s already familiar to you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A note on development for iOS:&lt;/strong&gt; You will need a mac in order to build iOS versions of the app. I don&amp;rsquo;t have a Mac available, so I&amp;rsquo;ll be getting started with a cross-platform project, but I&amp;rsquo;ll just be using Windows and testing the Android version.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Visit &lt;a href=&#34;https://visualstudio.microsoft.com/&#34;&gt;https://visualstudio.microsoft.com/&lt;/a&gt; to download Visual Studio Community (the free version) and install it. Be sure to select Mobile Development Tools during installation so Xamarin projects will be available.&lt;/p&gt;

&lt;h2 id=&#34;intended-audience&#34;&gt;Intended Audience&lt;/h2&gt;

&lt;p&gt;This is written for C# programmers who want to start working with mobile apps. If you&amp;rsquo;re not somewhat familiar with using Visual Studio, C#, or XML then this may be challenging to follow.&lt;/p&gt;

&lt;h2 id=&#34;mvvm&#34;&gt;MVVM&lt;/h2&gt;

&lt;p&gt;Before we create the first project, a quick word on practices. There are many ways of organizing an app, and one of the best practices is to use the MVVM pattern. MVVM stands for Model, View, View Model.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt; (Data)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;View&lt;/strong&gt; (Presentation)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;View Model&lt;/strong&gt; (Business Rules)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By keeping our data in the Model, our presentation code in the View, and our business logic in the View Model we&amp;rsquo;re keeping concerns separate. This will make the project simpler to understand and maintain as it grows.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s funny how different ecosystems have different names for very similar concepts. Django has Model/View/Template. ASP.NET MVC has Model/View/Controller. XAML has MVVM. The consistent core idea is to separate concerns to make things simple to understand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;create-a-new-project&#34;&gt;Create a New Project&lt;/h2&gt;

&lt;p&gt;In Visual Studio select File &amp;gt; New &amp;gt; Project from the menu.&lt;/p&gt;

&lt;p&gt;In the New Project Dialog select the category Installed &amp;gt; Visual C# &amp;gt; Cross-Platform from the list on the left. Then choose the Mobile App (Xamarin.Forms) project type and name it. I named mine &amp;ldquo;Lavender&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/xamarin-create-project.png&#34; alt=&#34;Create a Xamarin project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then in the next dialog, select Blank.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/xamarin-create-cross-platform-project.png&#34; alt=&#34;Create a Xamarin cross-platform mobile project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that &amp;ldquo;Code Sharing Strategy&amp;rdquo; is .NET Standard. This is very interesting if you&amp;rsquo;re familiar with the new .NET Standard approach that Microsoft is implementing for the .NET ecosystem. .NET Core and ASP.NET are both proceeding using the same .NET Standard libraries supporting them. Having this option for Xamarin projects means that .NET programmers will have access to the same libraries for mobile that they&amp;rsquo;re used to using in their other projects.&lt;/p&gt;

&lt;p&gt;Now we have a solution called Lavender and three projects in that solution. The main Lavender project, and a project each for Android and iOS.&lt;/p&gt;

&lt;p&gt;Create folders inside the Lavender project to support the MVVM pattern. Create Models, Views, and ViewModels folders. To do this, right click on the Lavender project (not the Lavender solution,) and go to Add &amp;gt; New Folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/xamarin-create-mvvm-folders.png&#34; alt=&#34;Create MVVM folders&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When Visual Studio created the Lavender project, it automatically created a view for us called &lt;code&gt;MainPage.xaml&lt;/code&gt;, and it has &lt;code&gt;MainPage.xaml.cs&lt;/code&gt; behind it. Move those two files into the Views folder by dragging and dropping &lt;code&gt;MainPage.xaml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/xamarin-move-mainpage-into-views-folder.png&#34; alt=&#34;Move MainPage.xaml into Views folder&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;MainPage.xaml&lt;/code&gt; and give it this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&amp;quot;http://xamarin.com/schemas/2014/forms&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             xmlns:local=&amp;quot;clr-namespace:Lavender&amp;quot;
             x:Class=&amp;quot;Lavender.MainPage&amp;quot;&amp;gt;
  &amp;lt;ContentPage.Content&amp;gt;
    &amp;lt;StackLayout&amp;gt;
      &amp;lt;Label Text=&amp;quot;Hello World!&amp;quot; FontSize=&amp;quot;Large&amp;quot; /&amp;gt;
    &amp;lt;/StackLayout&amp;gt;
  &amp;lt;/ContentPage.Content&amp;gt;
&amp;lt;/ContentPage&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A XAML &lt;code&gt;&amp;lt;ContentPage&amp;gt;&lt;/code&gt; can only have one object in it. But, the reason we are using the &lt;code&gt;&amp;lt;ContentPage.Content&amp;gt;&lt;/code&gt; object is because it can contain multiple objects. The &lt;code&gt;&amp;lt;StackLayout&amp;gt;&lt;/code&gt; will literally stack objects either vertically (by default) or horizontally. The &lt;code&gt;&amp;lt;Label&amp;gt;&lt;/code&gt; object is easiest way to get text to display on screen.&lt;/p&gt;

&lt;p&gt;Save the file, then launch the debugger. The first time launching in the emulator may take some time&amp;hellip; maybe several minutes&amp;hellip; but eventually you will see it running.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since this is running on Windows without a Mac, the project that runs needs to be the Lavender.Android project. Also, when you run this, you&amp;rsquo;ll want to make sure you have the Android SDK installed for the version(s) of Android you&amp;rsquo;re targeting.
To manage your SDK tools, you can find a button for &amp;ldquo;Open Android SDK Manager&amp;rdquo; in the toolbar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/xamarin-manage-android-sdks.png&#34; alt=&#34;Manage Android SDKs&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will see this once the project finishes building, the emulator starts, and the app installs in the emulator:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/xamarin-debug-mobile-project.png&#34; alt=&#34;Debugging a Xamarin project&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;add-data-binding-between-the-view-and-the-view-model&#34;&gt;Add Data Binding Between the View and the View Model&lt;/h2&gt;

&lt;p&gt;Add a label control that will bind to the &lt;code&gt;Name&lt;/code&gt; attribute of a view model. Update &lt;code&gt;MainPage.xaml&lt;/code&gt; to have this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&amp;quot;http://xamarin.com/schemas/2014/forms&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             xmlns:local=&amp;quot;clr-namespace:Lavender&amp;quot;
             x:Class=&amp;quot;Lavender.MainPage&amp;quot;&amp;gt;
  &amp;lt;ContentPage.Content&amp;gt;
    &amp;lt;StackLayout&amp;gt;
      &amp;lt;Label Text=&amp;quot;{Binding Name,StringFormat=&#39;Hello, \{0\}!&#39;}&amp;quot; FontSize=&amp;quot;Large&amp;quot; /&amp;gt;
    &amp;lt;/StackLayout&amp;gt;
  &amp;lt;/ContentPage.Content&amp;gt;
&amp;lt;/ContentPage&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s worth highlighting that these UI changes are being made in the shared library. This is reusable code that both Android and iOS will leverage. The Android and iOS specific projects are &lt;em&gt;not&lt;/em&gt; being modified. Yet, the controls being displayed are the same native controls that you would get if you were building this app for Android using Java or for iOS using Objective-C or Swift. Not only is the code in a shared library, but the executable is &lt;em&gt;not&lt;/em&gt; running in a VM like would be the case for portable JavaScript solutions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create a new class in the &lt;code&gt;ViewModels&lt;/code&gt; folder. Call it &lt;code&gt;MainPageViewModel.cs&lt;/code&gt; and put this code inside:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace Lavender.ViewModels
{
  public class MainPageViewModel
  {
    public string Name { get; set; }

    public MainPageViewModel()
    {
      Name = &amp;quot;Anonymous&amp;quot;;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Name&lt;/code&gt; property is what we&amp;rsquo;ll use for data binding. And, we&amp;rsquo;re setting the value to &lt;code&gt;Anonymous&lt;/code&gt; for now.&lt;/p&gt;

&lt;p&gt;Then, update the &lt;code&gt;MainPage.xaml.cs&lt;/code&gt; code-behind file to use the &lt;code&gt;MainPageViewModel&lt;/code&gt; class as its binding context.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Lavender.ViewModels;
using Xamarin.Forms;

namespace Lavender
{
  public partial class MainPage : ContentPage
  {
    private readonly MainPageViewModel viewModel;

    public MainPage()
    {
      InitializeComponent();
      viewModel = new MainPageViewModel();
      BindingContext = viewModel;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compile and debug the project with that change. You will see it in the emulator.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/xamarin-hello-anonymous.png&#34; alt=&#34;Xamarin Hello Anonymous&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This shows that &lt;code&gt;MainPageViewModel&lt;/code&gt; is being bound as the context in &lt;code&gt;MainPage.xaml.cs&lt;/code&gt; and the value that was set on initialization is &amp;ldquo;Anonymous&amp;rdquo; and that is being passed to the &lt;code&gt;MainPage.xaml&lt;/code&gt; view correctly.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s do something with the value entered by the user.&lt;/p&gt;

&lt;h2 id=&#34;add-form-to-let-the-user-update-their-name&#34;&gt;Add Form to Let the User Update Their Name&lt;/h2&gt;

&lt;p&gt;Update &lt;code&gt;MainPage.xaml&lt;/code&gt; to add form controls allowing the user to enter and submit their actual name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&amp;quot;http://xamarin.com/schemas/2014/forms&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             xmlns:local=&amp;quot;clr-namespace:Lavender&amp;quot;
             x:Class=&amp;quot;Lavender.MainPage&amp;quot;&amp;gt;
  &amp;lt;ContentPage.Content&amp;gt;
    &amp;lt;StackLayout&amp;gt;
      &amp;lt;Label Text=&amp;quot;{Binding Name,StringFormat=&#39;Hello, \{0\}!&#39;}&amp;quot; FontSize=&amp;quot;Large&amp;quot; /&amp;gt;
      &amp;lt;Label Text=&amp;quot;Name&amp;quot; /&amp;gt;
      &amp;lt;Entry Text=&amp;quot;{Binding NameEntry}&amp;quot; /&amp;gt;
      &amp;lt;Button x:Name=&amp;quot;Button&amp;quot; Text=&amp;quot;Submit&amp;quot; Command=&amp;quot;{Binding SubmitCommand}&amp;quot; /&amp;gt;
    &amp;lt;/StackLayout&amp;gt;
  &amp;lt;/ContentPage.Content&amp;gt;
&amp;lt;/ContentPage&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two elements that bind to properties that we haven&amp;rsquo;t created yet. &lt;code&gt;&amp;lt;Entry Text=&amp;quot;{Binding NameEntry}&amp;quot; /&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Button x:Name=&amp;quot;Button&amp;quot; Text=&amp;quot;Submit&amp;quot; Command=&amp;quot;{Binding SubmitCommand}&amp;quot; /&amp;gt;&lt;/code&gt; will require us to change the view model.&lt;/p&gt;

&lt;p&gt;But, before we make changes to the view model, we need to create a new class that will facilitate notifying the view when the data in the view model changes.&lt;/p&gt;

&lt;p&gt;Create a new file in the &lt;code&gt;ViewModels&lt;/code&gt; folder and call it &lt;code&gt;ViewModelBase.cs&lt;/code&gt;. Then put this code inside:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace Lavender.ViewModels
{
  public abstract class ViewModelBase : INotifyPropertyChanged
  {

    public event PropertyChangedEventHandler PropertyChanged;
    protected void OnPropertyChanged([CallerMemberName] string propertyName = &amp;quot;&amp;quot;)
    {
      var changed = PropertyChanged;
      if (changed == null)
        return;

      changed.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    protected bool SetProperty&amp;lt;T&amp;gt;(ref T backingStore, T value,
      [CallerMemberName]string propertyName = &amp;quot;&amp;quot;,
      Action onChanged = null)
    {
      if (EqualityComparer&amp;lt;T&amp;gt;.Default.Equals(backingStore, value))
      {
        return false;
      }

      backingStore = value;
      onChanged?.Invoke();
      OnPropertyChanged(propertyName);
      return true;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This abstract class gives us the &lt;code&gt;SetProperty&amp;lt;T&amp;gt;()&lt;/code&gt; method which both changes the property&amp;rsquo;s value, &lt;em&gt;and&lt;/em&gt; it notifies the UI so it knows to display the new value.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s update &lt;code&gt;MainPageViewModel.cs&lt;/code&gt; to use this new abstract class. We&amp;rsquo;ll also add the new properties that the view needs for binding.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Windows.Input;
using Xamarin.Forms;

namespace Lavender.ViewModels
{
  public class MainPageViewModel : ViewModelBase
  {
    public string NameEntry { get; set; }

    private string _name;
    public string Name
    {
      get { return _name; }
      set { SetProperty(ref _name, value); }
    }

    public ICommand SubmitCommand { get; }

    public MainPageViewModel()
    {
      Name = &amp;quot;Anonymous&amp;quot;;
      SubmitCommand = new Command(() =&amp;gt; { Name = NameEntry; });
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;MainPageViewModel&lt;/code&gt; now inherits from &lt;code&gt;ViewModelBase&lt;/code&gt; which give us the &lt;code&gt;SetProperty()&lt;/code&gt; method. This class also has new properties now: &lt;code&gt;NameEntry&lt;/code&gt; to support the name entry field, and &lt;code&gt;SubmitCommand&lt;/code&gt; to support the submit button. The property &lt;code&gt;Name&lt;/code&gt; has also been updated to use the &lt;code&gt;SetProperty()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;When we run the debugger, now we see this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/xamarin-hello-anonymous-form.png&#34; alt=&#34;Xamarin mobile app with a form to enter the user&#39;s name.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And submitting a name shows this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/xamarin-hello-anonymous-form-showing-name.png&#34; alt=&#34;Xamarin mobile app with a form showing user&#39;s name.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There you have it. These are the basic building blocks to get started building mobile applications using Xamarin.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Django</title>
      <link>http://quakkels.com/posts/getting-started-python-django-vs-code/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/getting-started-python-django-vs-code/</guid>
      <description>

&lt;p&gt;Django is a Python framework that I&amp;rsquo;ve written about before. I&amp;rsquo;ve &lt;a href=&#34;http://quakkels.com/posts/asp-net-mvc-compared-to-dango/&#34;&gt;compared Django to ASP.NET MVC&lt;/a&gt;. But, I didn&amp;rsquo;t go into much detail about how to actually use Django to create a data driven website. That&amp;rsquo;s what I&amp;rsquo;ll cover now.&lt;/p&gt;

&lt;p&gt;The goal for this &amp;lsquo;Getting Started&amp;rsquo; project is to get familiar with the basics of developing data driven web applications using Django, Models, Views, Templates, URLs, and Forms. By the end we&amp;rsquo;ll have a simple contact form that saves user submissions to the database, and displays that data to an administrator user. It will not be a completed site, but it will introduce basic the building blocks of website development in Django.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like to refer to the end goal of this article, you can &lt;a href=&#34;https://github.com/quakkels/companionresource_djangosite&#34; target=&#34;_blank&#34;&gt;find it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Windows 10

&lt;ul&gt;
&lt;li&gt;Or your own favorite OS. But I&amp;rsquo;ll be writing from a Windows perspective.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Python 3.6 or above.&lt;/li&gt;
&lt;li&gt;VS Code with Microsoft&amp;rsquo;s Python extension installed.

&lt;ul&gt;
&lt;li&gt;Or your own favorite Python IDE/editor, but I&amp;rsquo;ll be writing from the VS Code perspective&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;create-project&#34;&gt;Create Project&lt;/h2&gt;

&lt;p&gt;Make the project directory and navigate inside.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; mkdir django-project &amp;amp;&amp;amp; cd django-project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a Virtual Environment to isolate project specific dependencies.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; python -m venv django-env
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Activate the venv. (This is the Windows command.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; django-env\Scripts\activate.bat
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Once inside an activated venv, you can leave it to work on other things by using the &lt;code&gt;deactivate&lt;/code&gt; command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Install Django inside the active venv. (You don&amp;rsquo;t want to install packages globally. Make sure that the venv is active.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; pip install django
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;django-admin&lt;/code&gt; to create the new Django application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; django-admin startproject djangosite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That created a new folder called &lt;code&gt;djangosite&lt;/code&gt; and it placed boilerplate files inside. &lt;code&gt;manage.py&lt;/code&gt; is one of those files and it&amp;rsquo;s what will used from now on to run Django commands.&lt;/p&gt;

&lt;p&gt;Run the development Django server from inside the site&amp;rsquo;s folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; cd djangosite
(django-env)&amp;gt; python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visit localhost:8000 to verify that it&amp;rsquo;s working. Then exit the server with Ctrl+Break.&lt;/p&gt;

&lt;p&gt;When the Django server ran, Django automatically created a db.sqlite3 file in the project folder. &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#34; target=&#34;_blank&#34;&gt;Read more about configuring different database backends&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Use VS Code to open the &lt;code&gt;django-project&lt;/code&gt; folder that houses the virtual environment folder and the Django app folder. This can be done from the terminal, or manually inside VS Code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; code ..\. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open &lt;code&gt;djangosite\urls.py&lt;/code&gt;. The imports for Django will probably be shown as missing modules because Django was installed in the venv and not globally. to fix this, press &lt;code&gt;ctrl+shift+p&lt;/code&gt; then execute the command &lt;code&gt;Python: Select Interpretter&lt;/code&gt;. Find &lt;code&gt;.\django-env\Scripts\python.exe&lt;/code&gt; from the list and select it. Then VS Code will stop showing the Django imports as errors.
&amp;gt; For more VS Code information visit &lt;a href=&#34;https://code.visualstudio.com/docs/python/python-tutorial&#34; target=&#34;_blank&#34;&gt;Getting Started with Python in VS Code&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;add-a-custom-django-view&#34;&gt;Add a Custom Django View&lt;/h2&gt;

&lt;p&gt;To add a &amp;lsquo;Hello World&amp;rsquo; page, create a new file in &lt;code&gt;django-project\djangosite\djangosite&lt;/code&gt; called &lt;code&gt;views.py&lt;/code&gt;. Add the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.http import HttpResponse

def welcome(request):
  return HttpResponse(&amp;quot;Hello, World!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To tell Django when to execute this welcome view, edit &lt;code&gt;urls.py&lt;/code&gt; so it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, re_path

from .views import welcome

urlpatterns = [
    path(&#39;admin/&#39;, admin.site.urls),
    re_path(&#39;^$&#39;, welcome)
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Browse to localhost:8000 and see the custom message.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/python_django_hello_world.png&#34; alt=&#34;Django Hello World&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s take a quick break to go over some Django concepts.&lt;/p&gt;

&lt;h3 id=&#34;app&#34;&gt;App&lt;/h3&gt;

&lt;p&gt;A Django App is a python package that acts as a little web application of its own. With it&amp;rsquo;s own Models, Views, Templates, and URLs. Most Django sites use several apps. It is also possible to write an app such that it can be reused in other Django projects.&lt;/p&gt;

&lt;h3 id=&#34;model&#34;&gt;Model&lt;/h3&gt;

&lt;p&gt;A Django Model is a data model that maps to a database table. This introduces the concept of &lt;em&gt;Migrations&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;migrations&#34;&gt;Migrations&lt;/h3&gt;

&lt;p&gt;The model will usually change as the site is developed.
A migration will update the corresponding database table from previous versions to the new version of the code. As migrations get more complicated, there may be need to write custom migration scripts.&lt;/p&gt;

&lt;h3 id=&#34;views&#34;&gt;Views&lt;/h3&gt;

&lt;p&gt;Views in Django are like Controllers in ASP.NET MVC. They are what connect a model with a template.&lt;/p&gt;

&lt;h3 id=&#34;templates&#34;&gt;Templates&lt;/h3&gt;

&lt;p&gt;Templates in Django are like Views in ASP.NET MVC. They are the display layer; the HTML that will render in the browser.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;add-a-custom-django-model&#34;&gt;Add a Custom Django Model&lt;/h2&gt;

&lt;p&gt;Show migrations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py showmigrations
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Execute those migrations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create a new Django app. For this example, it will handle the functionality for a contact form.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py startapp contactform
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Move into the new &lt;code&gt;contactform&lt;/code&gt; directory and notice that Django has created a bunch of boilerplate code for us.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; cd contactform
(django-env)&amp;gt; dir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add this new app to the Django site. Open &lt;code&gt;settings.py&lt;/code&gt; in the &lt;code&gt;djangosite&lt;/code&gt; folder, and add the &lt;code&gt;contactform&lt;/code&gt; app to the list of installed apps. &lt;code&gt;INSTALLED_APPS&lt;/code&gt; should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INSTALLED_APPS = [
    &#39;django.contrib.admin&#39;,
    &#39;django.contrib.auth&#39;,
    &#39;django.contrib.contenttypes&#39;,
    &#39;django.contrib.sessions&#39;,
    &#39;django.contrib.messages&#39;,
    &#39;django.contrib.staticfiles&#39;,
    &#39;contactform&#39;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, open the &lt;code&gt;models.py&lt;/code&gt; file in the contact form app and add the class that will represent the contact form.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.db import models

class ContactForm(models.Model):
    HOW_DID_YOU_HEAR_ABOUT_US_CHOICES = (
        (&#39;SE&#39;, &#39;Search Engine&#39;),
        (&#39;Q&#39;, &#39;Quakkels.com&#39;),
        (&#39;F&#39;, &#39;From a friend&#39;),
        (&#39;O&#39;, &#39;Other&#39;)
    )

    name = models.CharField(max_length=50)
    email = models.EmailField(max_length=50)
    comments = models.CharField(max_length=500)
    how_did_you_hear_about_us = models.CharField(max_length=2, choices=HOW_DID_YOU_HEAR_ABOUT_US_CHOICES)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;More information about Django models can be found &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/db/models/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After the model is saved, create the new migration script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py makemigrations
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the migration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;If you&amp;rsquo;re curious about what the SQLite database tables look like, you can download something like &lt;a href=&#34;https://sqlitebrowser.org/dl/&#34; target=&#34;_blank&#34;&gt;DB Browser for SQLite&lt;/a&gt;. Table names will be named after the model with the app name as the prefix. So the table for ContactForm will be called &lt;code&gt;contactform_contactform&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;register-custom-model-in-admin&#34;&gt;Register Custom Model in Admin&lt;/h2&gt;

&lt;p&gt;To make contact form submissions available to be read by a site administrator, &lt;code&gt;ContactForm&lt;/code&gt; needs to be registered in the admin area.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;contactform\admin.py&lt;/code&gt; and add this code to register the ContactForm model.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.contrib import admin
from .models import ContactForm

@admin.register(ContactForm)
class ContactFormAdmin(admin.ModelAdmin):
    list_display = (&#39;name&#39;, &#39;email&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a super user for logging into the site&amp;rsquo;s admin area.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when the development server runs, you&amp;rsquo;ll be able to view and edit ContactForms in the Admin area by navigating to localhost:8000/admin and using the new super user to log in.&lt;/p&gt;

&lt;h2 id=&#34;create-a-custom-django-template&#34;&gt;Create a Custom Django Template&lt;/h2&gt;

&lt;p&gt;Double check the terminal&amp;rsquo;s working directory is the &lt;code&gt;contactform&lt;/code&gt; folder inside of &lt;code&gt;djangosite&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; pwd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Switch to &lt;code&gt;contactform&lt;/code&gt; if it&amp;rsquo;s not the working directory.&lt;/p&gt;

&lt;p&gt;Create a new folder for custom templates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(django-env)&amp;gt; mdkir templates
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In VS Code, create a file in the new templates folder called &lt;code&gt;contactform.html&lt;/code&gt; for the contact form. Put the following code in the file for now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
      &amp;lt;title&amp;gt;Contact Form&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;Contact Form&amp;lt;/h1&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, update &lt;code&gt;contactform\views.py&lt;/code&gt; with this code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.shortcuts import render

def contactform(request):
    return render(request, &amp;quot;contactform.html&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the &lt;code&gt;render()&lt;/code&gt; function is used here instead of returning &lt;code&gt;HttpResponse()&lt;/code&gt; directly like the &amp;ldquo;Hello, World!&amp;rdquo; view does. The &lt;code&gt;render()&lt;/code&gt; function will use the template for the html.&lt;/p&gt;

&lt;p&gt;To make the template visible from the browser, we need to route requests to the view based on the URL.&lt;/p&gt;

&lt;p&gt;Use VS Code to create a &lt;code&gt;urls.py&lt;/code&gt; file inside the &lt;code&gt;contactform&lt;/code&gt; folder. Put this code inside it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.urls import re_path

from .views import contactform

urlpatterns = [
    re_path(&#39;contactform$&#39;, contactform)
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;re_path()&lt;/code&gt; method uses a string as a regular expression. The &lt;code&gt;&#39;contactform$&#39;&lt;/code&gt; ensures that it only matches on paths that end in &lt;code&gt;contactform&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;djangosite\urls.py&lt;/code&gt; is what Django uses to route urls, it needs to be aware of the new &lt;code&gt;contactform\urls.py&lt;/code&gt;. Update it with this code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, re_path, include

from .views import welcome

urlpatterns = [
    path(&#39;admin/&#39;, admin.site.urls),
    re_path(&#39;^contactform/&#39;, include(&#39;contactform.urls&#39;)),
    path(&#39;&#39;, welcome),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&#39;^contactform/&#39;&lt;/code&gt; is a regular expression that makes sure matching paths begin with &lt;code&gt;contactform&lt;/code&gt;. This is a prefix for everything in the contactform app. So the complete matching path will be &lt;code&gt;localhost:8000/contactform/contactform&lt;/code&gt;. For more information read the &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/http/urls/&#34; target=&#34;_blank&#34;&gt;Django documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;create-a-form&#34;&gt;Create a Form&lt;/h1&gt;

&lt;p&gt;Create a new file in &lt;code&gt;contactform&lt;/code&gt; called &lt;code&gt;forms.py&lt;/code&gt; and put this code in it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.forms import ModelForm
from .models import ContactForm

class ContactFormForm(ModelForm):
    class Meta:
        model = ContactForm
        fields = (&#39;name&#39;, &#39;email&#39;, &#39;comments&#39;, &#39;how_did_you_hear_about_us&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;It was at this time that I started regretting how the &lt;code&gt;ContactForm&lt;/code&gt; model was named. To stick with Django conventions, this form class will be the name of the model with &amp;ldquo;Form&amp;rdquo; appended to it. Hence; &lt;code&gt;ContactFormForm&lt;/code&gt;. Future me will not make this mistake.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Update &lt;code&gt;contactform\views.py&lt;/code&gt; so it will send the new form class as an object to the template.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.shortcuts import render
from django.http import HttpResponse
from .forms import ContactFormForm
from .models import ContactForm

def contactform(request):
    form = ContactFormForm()
    context = { 
        &#39;form&#39; : form,
    }

    return render(request, &amp;quot;contactform.html&amp;quot;, context)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update the &lt;code&gt;contactform.html&lt;/code&gt; template to use the &lt;code&gt;form&lt;/code&gt; object in the &lt;code&gt;context&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
      &amp;lt;title&amp;gt;Contact Form&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;Contact Form&amp;lt;/h1&amp;gt;
        &amp;lt;form method=&amp;quot;POST&amp;quot;&amp;gt;
            {% csrf_token %} &amp;lt;!--this token is required in order to prevent CSRF attacks--&amp;gt;
            {{ form }} &amp;lt;!-- the form object will render our FormModel --&amp;gt;
            &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Send&amp;lt;/button&amp;gt;
        &amp;lt;/form&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find more details about how to properly use templates &lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/templates/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. The code above has much room for improvement.&lt;/p&gt;

&lt;p&gt;Two things worth noting here are &lt;code&gt;{% csrf_token %}&lt;/code&gt; and &lt;code&gt;{{ form }}&lt;/code&gt;. The code for CSRF Token prevents this page from being vulnerable to cross site request forgery attacks. The &lt;code&gt;form&lt;/code&gt; object is the &lt;code&gt;ContactFrom&lt;/code&gt; model converted to HTML form elements via the &lt;code&gt;ModelForm&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Update the view to accept and save a Contact Form submission.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.shortcuts import render, redirect
from django.http import HttpResponse
from .forms import ContactFormForm
from .models import ContactForm

def contactform(request):
    form = ContactFormForm()
    context = { &amp;quot;form&amp;quot; : form }

    if request.method != &amp;quot;POST&amp;quot;:
        return render(request, &amp;quot;contactform.html&amp;quot;, context)
    
    form = ContactFormForm(data=request.POST)

    if not form.is_valid():
        context[&amp;quot;form&amp;quot;] = form
        return render(request, &amp;quot;contactform.html&amp;quot;, context)
    
    form.save()
    return redirect(&amp;quot;/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will render the form on first request. When the form is submitted it will check the values against what the model expects. If the values aren&amp;rsquo;t valid it will render the form again (ideally to inform the user there were problems and give them a chance to correct mistakes.) If the values are valid, then it will save a new record in the database which an admin will be able to see in Django&amp;rsquo;s administration section. Once the record is saved, the user gets redirected to the site root.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s a lot more to Django, but this is a fair amount of information to get started with it. What we wrote has an authenticated admin area, a &amp;lsquo;hello&amp;rsquo; home page, and a data driven form that persists data to a database. This isn&amp;rsquo;t a completed web application, but we did cover a lot of essential building blocks.&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/quakkels/companionresource_djangosite&#34; target=&#34;_blank&#34;&gt;Companion GitHub Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sqlitebrowser.org/dl/&#34; target=&#34;_blank&#34;&gt;DB Browser for SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/&#34; target=&#34;_blank&#34;&gt;Django Documentation&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#34; target=&#34;_blank&#34;&gt;Configure different database backends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/forms/&#34; target=&#34;_blank&#34;&gt;Forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/db/models/&#34; target=&#34;_blank&#34;&gt;Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/ref/templates/&#34; target=&#34;_blank&#34;&gt;Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.2/topics/http/urls/&#34; target=&#34;_blank&#34;&gt;URL Dispatcher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Configuring Vim When Using Git Bash on Windows</title>
      <link>http://quakkels.com/posts/configuring-vim-when-using-git-bash/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/configuring-vim-when-using-git-bash/</guid>
      <description>

&lt;p&gt;Occasionally I become enamored with the idea of becoming a Vim expert, or at least a competent Vim user. I work primarily in Windows environments so, though the desire exists, there aren&amp;rsquo;t many good opportunities to build Vim habits. There is a &lt;a href=&#34;https://www.vim.org/download.php/#pc&#34; target=&#34;_blank&#34;&gt;Vim on Windows release&lt;/a&gt; available. This has a GUI interface and an installer executable. Though if you have Git for Windows installed, then you already have Vim available. Git for Windows comes with the ever useful, Git Bash. And, lo! Git Bash has Vim.&lt;/p&gt;

&lt;p&gt;Firing up a quick Git Bash session is simple enough. And firing up vim from there is straightforward. Thankfully, my previous experience with exiting Vim saved me from an embarrassing search query in my browser history.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;http://quakkels.com/images/exiting_vim_orly.jpeg&#34; alt=&#34;How to exit Vim&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It&amp;rsquo;s an old meme, but it checks out. (&lt;code&gt;esc&lt;/code&gt;, &lt;code&gt;:&lt;/code&gt; then &lt;code&gt;q!&lt;/code&gt; to quit without saving, btw)&lt;/em&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;configuring-vim-in-git-bash&#34;&gt;Configuring Vim in Git Bash&lt;/h2&gt;

&lt;p&gt;Vim&amp;rsquo;s configuration can be customized with vimrc files. These files are scripts written in Vimscript. They run at initialization when Vim is opened. We can find out more information by using help commands inside Vim.&lt;/p&gt;

&lt;p&gt;First, open a Git Bash terminal and then open &lt;code&gt;vim&lt;/code&gt;. Then, in &lt;a href=&#34;https://www.howtoforge.com/vim-basics&#34; target=&#34;_blank&#34;&gt;command mode&lt;/a&gt;, open the configuration help information with &lt;code&gt;:help vimrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this point we can see where Vim will look for custom vimrc files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Places for your personal initializations:
    Unix            $HOME/.vimrc or $HOME/.vim/vimrc
    OS/2            $HOME/.vimrc, $HOME/vimfiles/vimrc
                    or $VIM/.vimrc (or _vimrc)
    MS-Windows      $HOME/_vimrc, $HOME/vimfiles/vimrc
                    or $VIM/_vimrc
    Amiga           s:.vimrc, home:.vimrc, home:vimfiles:vimrc
                    or $VIM/.vimrc

  The files are searched in the order specified above and only the first
  one that is found is read.

  RECOMMENDATION: Put all your Vim configuration stuff in the
  $HOME/.vim/ directory ($HOME/vimfiles/ for MS-Windows). That makes it
  easy to copy it to another system.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t be fooled. Since &lt;a href=&#34;https://github.com/git/git/commit/df5218b4c30b2fa1ba0d1ada4166ad85bc83be26&#34; target=&#34;_blank&#34;&gt;Git Bash uses msys2&lt;/a&gt; to imitate a Unixy/Linuxy style system, Vim running inside Git Bash will be following Unix&amp;rsquo;s Conventions, rather than MS-Windows&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Also let&amp;rsquo;s follow Vim&amp;rsquo;s recommendation for using the &lt;code&gt;$HOME/.vim/&lt;/code&gt; directory for configuration files.&lt;/p&gt;

&lt;p&gt;Make the directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir $HOME/.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then create the vimrc file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ touch $HOME/.vim/vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, we have our empty initialization file for Vim. To make sure it&amp;rsquo;s working, I&amp;rsquo;ll add a command to turn on line numbering.&lt;/p&gt;

&lt;p&gt;Open the vimrc file using Vim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim $HOME/.vim/vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, enter Insert Mode by pressing &lt;code&gt;i&lt;/code&gt; and enter three lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot; Custom Vim configuration

set number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save these changes by pressing &lt;code&gt;esc&lt;/code&gt; to leave Insert Mode and then enter &lt;code&gt;:wq&lt;/code&gt; to write the changes and then quit Vim.&lt;/p&gt;

&lt;p&gt;To check that it worked, open up the same file in Vim again and look for the line numbers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/vim_line_numbers.png&#34; alt=&#34;Vim configured to show line numbers&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It worked!&lt;/p&gt;

&lt;p&gt;There are many more configuration changes you can make. Be aware that Vim already has default configuration set that is targeted towards programmers. To find all scripts (remember that configuration is set via initialization scripts) you can use the command &lt;code&gt;:scriptnames&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When I execute &lt;code&gt;:scriptnames&lt;/code&gt; in Vim running in Git Bash, I see &lt;code&gt;/etc/vimrc&lt;/code&gt; at the very top of the list. This makes sense since the &lt;code&gt;etc&lt;/code&gt; folder is where Linux systems place a lot of their configuration. However, since this is in Windows, we need to figure out where the &lt;code&gt;etc&lt;/code&gt; folder is. It&amp;rsquo;s not in &lt;code&gt;C:\&lt;/code&gt; nor in the &lt;code&gt;$HOME&lt;/code&gt; directory. But, since Git Bash is mimicking a Linux system, we should be able to find it along with the other Git Bash files.&lt;/p&gt;

&lt;p&gt;Since I&amp;rsquo;m running the 64 bit version of Git, I found the etc folder in &lt;code&gt;C:\Program Files\Git&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside Git Bash, we can get there with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd c\&amp;quot;Program Files&amp;quot;\Git\etc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, to take a quick peek at &lt;code&gt;vimrc&lt;/code&gt; just execute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I would &lt;em&gt;not&lt;/em&gt; recommend attempting to change anything in &lt;code&gt;etc&lt;/code&gt;. Instead modify Vim&amp;rsquo;s configuration using files in the &lt;code&gt;$HOME\.vim\&lt;/code&gt; folder.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Armed with this information there&amp;rsquo;s a lot of stuff you can now customize. Here are a few more resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://benmccormick.org/2014/07/14/learning-vim-in-2014-configuring-vim&#34; target=&#34;_blank&#34;&gt;Learning Vim in 2014: Configuring Vim&lt;/a&gt;&lt;br&gt;A few years old, but I really like how this author gets into the details rather than just telling you to copy/paste a &lt;code&gt;.vimrc&lt;/code&gt; file from GitHub.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linuxhint.com/configure_vim_vimrc/&#34; target=&#34;_blank&#34;&gt;Configure Vim with vimrc&lt;/a&gt;&lt;br&gt;
Similar to Learning Vim in 2014, but more recent. Also has Linux specific informmatin which you will want to ignore if you&amp;rsquo;re running in Windows.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://learnvimscriptthehardway.stevelosh.com/&#34; target=&#34;_blank&#34;&gt;Learn Vimscript the Hard Way&lt;/a&gt;&lt;br&gt; This ebook has an incredible amount of detail. It may be too much if you&amp;rsquo;re looking to just make quick changes. But it has a lot of great information if you want to dive into the deep end.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vim.rtorr.com/&#34; target=&#34;_blank&#34;&gt;Vim Cheat Sheet&lt;/a&gt;&lt;br&gt;Excellent for discovering all the Vim shortcuts that people love so much.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don&amp;rsquo;t forget to do ridiculous things like to configure VSCode&amp;rsquo;s terminal to use Git Bash which allows you to open Vim from inside VSCode. ;-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/vim_inside_vscode.png&#34; alt=&#34;Run Vim from inside VSCode on Windows&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gogs on Raspberry PI</title>
      <link>http://quakkels.com/posts/gogs-on-raspberry-pi/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/gogs-on-raspberry-pi/</guid>
      <description>

&lt;p&gt;In a previous article &lt;a href=&#34;http://quakkels.com/posts/configure-headless-raspberry-pi-for-wifi-and-ssh/&#34;&gt;I configured a headless Raspberry Pi for Wifi and SSH&lt;/a&gt;. Next, I&amp;rsquo;ll set up a personal Gogs server on it.&lt;/p&gt;

&lt;h2 id=&#34;change-the-password&#34;&gt;Change the Password&lt;/h2&gt;

&lt;p&gt;First things first, change the password for the &lt;code&gt;pi&lt;/code&gt; user to something different than &lt;code&gt;raspberry&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ passwd
Changing password for pi.
(current) UNIX password:
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Please tweet your new password to @quakkels /s&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;arrange-the-prerequisites&#34;&gt;Arrange the Prerequisites&lt;/h2&gt;

&lt;p&gt;Next, I&amp;rsquo;ll make sure the &lt;a href=&#34;https://gogs.io/docs/installation&#34;&gt;prerequisites&lt;/a&gt; are set up. Since Raspbian is based on Debian I can use the Debian/Ubuntu commands. I&amp;rsquo;m skipping the database step because I&amp;rsquo;m happy with this Gogs instance using SQLite3.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before proceeding farther, I&amp;rsquo;m going to create a brand new user specifically for Gogs. This new user will be everything Gogs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo adduser iamgogs 
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If I were a more experienced Gogs administrator I would have created a user named &lt;code&gt;git&lt;/code&gt; since that&amp;rsquo;s Gogs&amp;rsquo; best practice and it&amp;rsquo;s less work later on. Scripts and default configuration use &lt;code&gt;git&lt;/code&gt; as the Gogs user by default.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Be prepared to have a password ready for the new &lt;code&gt;iamgogs&lt;/code&gt; user.&lt;/p&gt;

&lt;p&gt;Add the &lt;code&gt;iamgogs&lt;/code&gt; user to the sudo group.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo usermod -aG sudo iamgogs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now switch to the &lt;code&gt;iamgogs&lt;/code&gt; user with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ su - iamgogs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And test the sudo ability by running any command as sudo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo pwd
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-gogs-from-binary&#34;&gt;Install Gogs from Binary&lt;/h2&gt;

&lt;p&gt;From here, I could install Go and proceed to install from source. But instead, to keep the number of steps to a minimum, I&amp;rsquo;m going to &lt;a href=&#34;https://gogs.io/docs/installation/install_from_binary&#34;&gt;install from binary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Being currently logged in as the &lt;code&gt;iamgogs&lt;/code&gt; user, I&amp;rsquo;ll use the &lt;code&gt;wget&lt;/code&gt; command to download the Raspberry PI build from &lt;a href=&#34;https://gogs.io/docs/installation/install_from_binary&#34;&gt;this download page&lt;/a&gt;. Use &lt;code&gt;wget&lt;/code&gt; with the url for the binary built specifically for Raspberry PI.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget {raspberrypibinaryurl}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that I&amp;rsquo;ve got it downloaded, I can unzip it using the &lt;code&gt;unzip&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ unzip {gogszipfilename}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run the &lt;code&gt;ls&lt;/code&gt; command you should see the new &lt;code&gt;gogs&lt;/code&gt; folder that was extracted into the &lt;code&gt;iamgogs&lt;/code&gt; home directory.&lt;/p&gt;

&lt;p&gt;And now for something completely expected&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;configuring-and-running-gogs-on-raspberry-pi&#34;&gt;Configuring and Running Gogs on Raspberry PI&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gogs.io/docs/installation/configuration_and_run.html&#34;&gt;Running and configuring the Gogs server&lt;/a&gt; is handled by the Gogs install process. There&amp;rsquo;s lots of information online about manually creating and editing custom app.ini configuration file, but it looks like (for the most recent versions of Gogs) all I need to do is run the &lt;code&gt;gogs&lt;/code&gt; executable from the &lt;code&gt;$HOME/gogs&lt;/code&gt; folder with the &lt;code&gt;web&lt;/code&gt; parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd $HOME/gogs
$ ./gogs web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I saw server information appear in the console. Since my Raspberry Pi is set up for headless operation, I don&amp;rsquo;t have the benefit of being able to access Gogs via a graphical web browser over localhost. So, from my windows machine, I navigated to {IpAddressOfRPi}:3000 and was greeted by a pleasant installation form which I filled out. Upon submitting the form, I had an admin account and a functioning Gogs server.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m nearing the end of this Gogs journey, but I still need to set this up as a service running in the background. Otherwise I&amp;rsquo;m stuck with this SSH session running Gogs forever.&lt;/p&gt;

&lt;p&gt;I was able to find some &lt;a href=&#34;https://blog.meinside.dev/Gogs-on-Raspberry-Pi/#2-for-systemd&#34;&gt;instructions&lt;/a&gt; for configuring a Gogs service with systemd that seemed straightforward enough.&lt;/p&gt;

&lt;p&gt;Copy the systemd service file from Gogs to the appropriate folder&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp /home/iamgogs/scripts/systemd/gogs.service /lib/systemd/system/gogs.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I edited the new file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo nano /lib/systemd/system/gogs.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I updated the values for:
- User
- Group
- WorkingDirectory
- ExecStart
- Environment&lt;/p&gt;

&lt;p&gt;Since my Gogs user is &lt;code&gt;iamgogs&lt;/code&gt; rather than &lt;code&gt;git&lt;/code&gt; I needed to make sure the paths and users got updated accordingly. Once the file is updated and saved I tested to make sure it was working with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl start gogs.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After switching over to my windows machine and confirming the site loads in the browser, I returned to my ssh session to make sure systemd will automatically start the Gogs service on reboot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl enable gogs.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then a final test to make sure Gogs will start automatically when the RPi boots:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo and behold, it works.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configure Headless Raspberry Pi for Wifi and SSH</title>
      <link>http://quakkels.com/posts/configure-headless-raspberry-pi-for-wifi-and-ssh/</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/configure-headless-raspberry-pi-for-wifi-and-ssh/</guid>
      <description>

&lt;p&gt;Raspberry Pis are great little computers. Wonderful for running hobby services. But, whenever I start a new RPi project, I dislike needing to dig out my spare HDMI monitor and USB keyboard. I don&amp;rsquo;t like having to take up room and connect all that hardware to just enable SSH and Wifi which renders all that equipment unnecessary.&lt;/p&gt;

&lt;p&gt;Recently I learned how to flash a new micro SD card and configure it to connect to my Wifi network and enable SSH before even turning on the RPi for the first time.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi (mine is an RPi 3 Model B V1.2)&lt;/li&gt;
&lt;li&gt;Micro USB charge cable&lt;/li&gt;
&lt;li&gt;A powered USB hub or wall charger to plug the USB cable into&lt;/li&gt;
&lt;li&gt;Micro SD card&lt;/li&gt;
&lt;li&gt;Wifi network (and credentials to sign in to the router)&lt;/li&gt;
&lt;li&gt;A computer that&amp;rsquo;s on previously mentioned network&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Download &lt;a href=&#34;https://www.raspberrypi.org/downloads/raspbian/&#34;&gt;Raspbian Lite&lt;/a&gt;. This version is stripped down and doesn&amp;rsquo;t include things like a graphical desktop.

&lt;ul&gt;
&lt;li&gt;Save the zip file to disk, and unzip. You should see the image file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/documentation/installation/installing-images/windows.md&#34;&gt;Flash&lt;/a&gt; the Micro SD card with Raspbian Lite. I used Etcher.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/documentation/remote-access/ssh/&#34;&gt;Enable SSH&lt;/a&gt; by saving an empty file called &lt;code&gt;ssh&lt;/code&gt; to the new boot partition on the SD card.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Now this is the magic ingredient.&lt;/em&gt; &lt;a href=&#34;https://foxrow.com/raspberry-pi-headless-wifi-config&#34;&gt;Add a configuration file containing your Wifi information&lt;/a&gt; to the boot partition so that raspbian can connect on startup.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, if you&amp;rsquo;ve followed the previous steps correctly, you can eject the SD card from your reader and place it in you RPi and plug it in.&lt;/p&gt;

&lt;p&gt;After waiting a minute or two for the RPi to boot (for the first time) you can log into your router and you will be able to find it in the list of connected devices. That list should have the IP address shown so you can use it to SSH into it.&lt;/p&gt;

&lt;p&gt;Execute &lt;code&gt;ssh {IpAddress} -l pi&lt;/code&gt; and use the password &lt;code&gt;raspberry&lt;/code&gt; to login.&lt;/p&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got a functioning Raspberry Pi, &lt;a href=&#34;http://quakkels.com/posts/gogs-on-raspberry-pi/&#34;&gt;let&amp;rsquo;s do something useful with it&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5 Slack Tricks that Changed My Life</title>
      <link>http://quakkels.com/posts/5-slack-tricks-that-changed-my-life/</link>
      <pubDate>Mon, 29 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/5-slack-tricks-that-changed-my-life/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/clickbait.png&#34; alt=&#34;&#34; /&gt;
&lt;em&gt;Please excuse the &amp;ldquo;click-baity&amp;rdquo; title. Sometimes I like to exaggerate.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Slack plays a significant role in my daily communication. My team at work has been using Slack as our primary mode of textual communication for over a year. It is also used by developer communities in my local area. At first, it felt a little clumsy. No more clumsy than a typical chat program. But, channels started to accumulate. The number of Direct Message feeds grew. Navigating and filtering all the conversations became more cumbersome. The tricks I will discuss here have helped me to stay nimble in Slack&amp;rsquo;s user interface. At first, I looked at Slack as a swamp of messages that I needed to wade through. But, with these small tricks, Slack has become easier to use and it even plays more of a productivity role.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ctrl+k&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you are in a large Slack room with many channels, &lt;code&gt;ctrl+k&lt;/code&gt; can be a lifesaver! It gives you quick access to a list of channels that have new conversations. It also has an easy to use search feature that allows the user to navigate from their current conversation to a different channel or user. For someone like me, this is life changing. I love being able to use as much software as I can without needing to use my mouse.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;/remind&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;At first, I thought the &lt;code&gt;/remind&lt;/code&gt; feature was a gimmick that wasn&amp;rsquo;t useful. So it took me a few months to even try it out for the first time. Once I tried it, I became dependent on it. Some of the ways to use this include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remind yourself to follow up with a colleague the next day.&lt;/li&gt;
&lt;li&gt;Remind yourself to start or end work on a project.&lt;/li&gt;
&lt;li&gt;Right before leaving work, you can remind yourself to run an errand on the way home.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My favorite way to use &lt;code&gt;/remind&lt;/code&gt; is to set time-limits on periods of
concentration. Outlook does a similar thing for meetings. About 15 minutes
ahead of time, Outlook can pop up reminders that a meeting is approaching.
I like to use &lt;code&gt;/remind&lt;/code&gt; in a similar way for things that aren&amp;rsquo;t on my calendar.&lt;/p&gt;

&lt;p&gt;For example, I may need to switch concentration contexts midway through the
day. I can use &lt;code&gt;/remind me to work on XyzProject in 2 hours&lt;/code&gt;. Once the
reminder has been set, it&amp;rsquo;s easier for me to concentrate on the current
task because I don&amp;rsquo;t need to keep project &amp;lsquo;XyzProject&amp;rsquo; in the back of my mind.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/remind&lt;/code&gt; is also useful for helping me remember the state a project was in
when I left it. For example, I can say &lt;code&gt;/remind me to bind new service 
implementations with Ninject on Monday at 8am&lt;/code&gt;. This has been a great tool
to get me working on a project right where I left off.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Star important channels&lt;/p&gt;

&lt;p&gt;This is a cool little trick the helps me group my highest priority channels together. At work, I have a handful of channels that are team specific. I like to star those so they all get prioritized at the top of the list. Then all the other channels, which are company-wide, get grouped below the starred channels. It&amp;rsquo;s the simplest thing, but works so well. Just select the channel and hover over the channel&amp;rsquo;s name at the top. Then a click-able star button will appear.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;/mute&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/mute&lt;/code&gt; has been useful for me at work where I&amp;rsquo;m in many channels. However, I don&amp;rsquo;t need constant notifications whenever someone has added a post. &lt;code&gt;/mute&lt;/code&gt; has been a great tool for alleviating the tsunami of push notifications that I would have otherwise received.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;/collapse&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If people are going nuts with &lt;code&gt;/giphy&lt;/code&gt; or posting URLs that automatically show previews, then use &lt;code&gt;/collapse&lt;/code&gt; to clean up that clutter in one giant swoop!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So those are my 5 Slack tips. But wait! There&amp;rsquo;s more. So here are a few bonus tips.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;up-arrow&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I know I&amp;rsquo;ve made posts that have errors in them. You can use the up arrow key to edit your last post, or even delete it entirely. If editing, I recommend surrounding the part that was wrong with &lt;code&gt;~&lt;/code&gt; and then adding your new edit after that. This is good helps people see what has changed.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ctrl+/&lt;/code&gt; brings up a help menu.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s Scrape the Web with Python 3</title>
      <link>http://quakkels.com/posts/lets-scrape-the-web-with-python-3/</link>
      <pubDate>Sun, 10 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/lets-scrape-the-web-with-python-3/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/pythonWebScrapeCover.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the back of my mind I&amp;rsquo;ve always been intrigued by writing an application that can retrieve web pages over HTTP. It&amp;rsquo;s a fairly simple thing to do. We have a myriad of web browsers that do it for us. But there is just something about writing an application that operates independently of a browser and reaches out to touch the internet that I find fun and intriguing. So let&amp;rsquo;s do it&amp;hellip; in Python.&lt;/p&gt;

&lt;p&gt;First let&amp;rsquo;s define some specifications for this project. Basically we&amp;rsquo;re going to &amp;ldquo;scrape&amp;rdquo; Craigslist.org listings and display them in our terminal (command line). It should be able to scrape any (or nearly any) of Craigslist&amp;rsquo;s regions and categories.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Will be a command line application&lt;/li&gt;
&lt;li&gt;Will read and display posts from Craigslist.org&lt;/li&gt;
&lt;li&gt;Will be able to define desired Craigslist.org subdomain and path from the command line&lt;/li&gt;
&lt;li&gt;Will display results to the terminal&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;separating-the-web-scraper-into-pieces&#34;&gt;Separating the Web Scraper into Pieces&lt;/h2&gt;

&lt;p&gt;As I see it, there are three pieces to this application:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The user interface which handles input and displays ouput&lt;/li&gt;
&lt;li&gt;The HTTP client which actually accesses the HTML page and gets the information therein&lt;/li&gt;
&lt;li&gt;The HTML parser which reads the HTML and collects the parts we want to keep&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that the application&amp;rsquo;s functionality is defined and it is broken down into pieces. We can start thinking about the project&amp;rsquo;s name and structure. Let&amp;rsquo;s just call it MyScrape and let&amp;rsquo;s structure in the following folder and files.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MyScrape/ (the application folder)

&lt;ul&gt;
&lt;li&gt;MyHttp.py (This will be responsible for the HTTP client that gets the web pages)&lt;/li&gt;
&lt;li&gt;MyParser.py (To read the HTML and collect the good parts)&lt;/li&gt;
&lt;li&gt;MyScrape.py (This will be the executable that handles user input and displays the results from MyParser)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-http-client-and-python-3&#34;&gt;The HTTP Client and Python 3&lt;/h2&gt;

&lt;p&gt;Python 3 has a handly little module that we can use to make our lives easy. We&amp;rsquo;re going to import http.client into our MyHttp.py file and use it in our class.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import http.client
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we imported http.client, we can create our class to handle a page. Let&amp;rsquo;s keep things simple and just call this class Page. Page just needs to connect to a server, request a page using a path, and provide the result to the application. Here is the complete MyHttp.py file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;&#39;&#39;GET a webpage using http.&#39;&#39;&#39;

import http.client

class Page:

    def __init__(self, servername, path):
        &#39;&#39;&#39;This initialize function sets the servername and path&#39;&#39;&#39;
        self.set_target(servername, path)

    def set_target(self, servername, path):
        &#39;&#39;&#39;This is a utility function that will reset the servername and the path&#39;&#39;&#39;
        self.servername = servername
        self.path = path

    def __get_page(self):
        &#39;&#39;&#39;This is a private function that actually goes out 
        and gets the response from the server&#39;&#39;&#39;

        server = http.client.HTTPConnection(self.servername)
        server.putrequest(&#39;GET&#39;, self.path)
        server.putheader(&#39;Accept&#39;, &#39;text/html&#39;)
        server.endheaders()

        return server.getresponse()        

    def get_as_string(self):
        &#39;&#39;&#39;This function provides the webpage as a string&#39;&#39;&#39;
        page = &#39;&#39;
        reply = self.__get_page() # gets the page

        if reply.status != 200:
            page = &#39;Error sending request {0} {1}&#39;.format(reply.status, reply.reason)
        else:
            data = reply.readlines()
            reply.close()
            for line in data:
                page += line.decode(&#39;utf-8&#39;)
        return page
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have our class, we need to make sure it works by testing it. We can do that by using the Python interpreter to execute our code for us. First, start the Python interpreter by sending the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to the shell prompt (or the command prompt if you&amp;rsquo;re on Windows). This should give you a prompt that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To exit the interpreter, just enter exit() and press enter. &lt;em&gt;Note: More information about the Python interpreter can be found &lt;a href=&#34;http://docs.python.org/3.3/tutorial/interpreter.html&#34;&gt;here&lt;/a&gt; on the Python.org website&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To test our code in the Python interpreter, first navigate to the MyScrape folder that has the MyHttp.py file in it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd path/to/your/MyScrape
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then start the interpreter and enter the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import MyHttp
&amp;gt;&amp;gt;&amp;gt; page = MyHttp.Page(&#39;quakkels.com&#39;, &#39;&#39;)
&amp;gt;&amp;gt;&amp;gt; print(page.get_as_string())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should now see the HTML source code for quakkels.com in your terminal. It works!&lt;/p&gt;

&lt;h2 id=&#34;html-parsing-and-python-3&#34;&gt;HTML Parsing and Python 3&lt;/h2&gt;

&lt;p&gt;The next part of this project we need to write is the HTML parser that allows us to identify the pieces of the Craigslist page that we want to keep. There are several different techniques for doing this including: regular expression matching (don&amp;rsquo;t use this technique), &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/DOM&#34;&gt;DOM&lt;/a&gt;, and &lt;a href=&#34;http://sax.sourceforge.net/&#34;&gt;SAX&lt;/a&gt; parsing.
The DOM (Document Object Model) technique basically involves navigating an XML or HTML document through a tree of nodes. The SAX (Simple API for XML) technique does not involve navigating like the DOM technique does. Rather, it reads the file through once, sending information to the application as the file is read. This means it&amp;rsquo;s pretty quick, but because there is no navigation the application will need to keep track of the state of the document as the SAX style parser reads it. Our MyParser.py file is going to execute a SAX style parser using the html.parser module.&lt;/p&gt;

&lt;p&gt;Python 3 has a handy module called html.parser that we&amp;rsquo;ll use in our application. Our parser class is going to be designed to just read Cragslist.com listings. I&amp;rsquo;m going to name the parser class ClParser. ClParser will need to inherit from HTMLParser (which is in the html.parse module) so that we can override the methods that get executed as the file is read in a SAX manner.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the complete MyParser.py file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;&#39;&#39;
Parse html from craigslist
&#39;&#39;&#39;

from html.parser import HTMLParser

class ClParser(HTMLParser):

    # parser state
    # These variables store the current state of the parser as it reads the file
    date = &#39;&#39;           # The date for the current listing

    title = &#39;&#39;          # The title of the current listing

    link = &#39;&#39;           # The link to the current listing&#39;s details

    collectFor = None   # will use this to keep track of what kind of data we 
                        # are currently collecting for. valid options are:
                        # &#39;date&#39;, &#39;title&#39;, and &#39;link&#39;

    insideRow = False   # This flag keeps track of whether we are inside a &amp;quot;row&amp;quot;
                        # &amp;quot;rows&amp;quot; have listing information

    # parser output
    results = &#39;&#39;        # the parser&#39;s output will be stored here

    def handle_starttag(self, tag, attrs):
        &#39;&#39;&#39;This function gets called when the parser encounters a start tag&#39;&#39;&#39;
        if tag == &#39;a&#39; and self.insideRow:
            self.collectFor = &#39;title&#39;

        for key, value in attrs:

            if(self.collectFor == &#39;title&#39; 
                and key == &#39;href&#39;
                and not self.link): # and not self.link makes sure it doesn&#39;t overwrite a preexisting value
                self.link = value

            if key == &#39;class&#39;:
                if value == &#39;row&#39;:
                    self.insideRow = True
                if value == &#39;ban&#39;:
                    self.collectFor = &#39;date&#39;

    def handle_endtag(self,tag):
        &#39;&#39;&#39;This function is called when the parser encounters an end tag&#39;&#39;&#39;
        if tag == &#39;p&#39;:
            self.insideRow = False

            # is there data to output?
            if self.title + self.link:
                self.results += &amp;quot;\nDate: \t{0}\nTitle:\t{1}\nLink:\t{2}\n&amp;quot;.format(
                    self.date, 
                    self.title, 
                    self.link)
            self.__reset_row()

    def handle_data(self, data):
        &#39;&#39;&#39;This function is called when the parser encounters data inside to tags&#39;&#39;&#39;        
        if self.collectFor == &#39;date&#39;:
            self.date = data
        if self.collectFor == &#39;title&#39; and not self.title:
            self.title = data

        self.collectFor = None # when we&#39;re done collecting the data, reset this flag

    def __reset_row(self):
        &#39;&#39;&#39;This is a utility function to reset the parser&#39;s state after a row&#39;&#39;&#39;
        self.title = &#39;&#39;
        self.link = &#39;&#39;
        self.summary = &#39;&#39;
        self.collectFor = None
        self.insideRow = False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The HTMLParser class that we are inheriting from has a feed(string argument) function that has been applied to our ClParser class. To execute our parser, we just need to make an instance of the class and call the feed(string argument) function.&lt;/p&gt;

&lt;p&gt;We can test this in the Python interpreter in the same way that we tested MyHttp. In the interpreter enter the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import MyHttp, MyParser
&amp;gt;&amp;gt;&amp;gt; page = MyHttp.Page(&#39;milwaukee.craigslist.org&#39;, &#39;/sya/&#39;)
&amp;gt;&amp;gt;&amp;gt; parser = MyParser.ClParser()
&amp;gt;&amp;gt;&amp;gt; parser.feed(page.get_as_string())
&amp;gt;&amp;gt;&amp;gt; print(parser.results)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should print a list of nicely formatted Craiglist listings for computers in the Milwaukee area. We&amp;rsquo;re almost done!&lt;/p&gt;

&lt;h2 id=&#34;the-last-piece&#34;&gt;The Last Piece!&lt;/h2&gt;

&lt;p&gt;Alright, we have two of our three pieces built. The last thing to do is handle user input and display results. We&amp;rsquo;re going to implement these features in the MyScrape.py file. Here&amp;rsquo;s the whole MyScrape.py file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import sys, MyParser, MyHttp

# try to assign the subdomain and path values
# if the assignment fails, just use default values
try:
    subdomain, path = sys.argv[1:]
except:
    subdomain, path = &#39;milwaukee&#39;, &#39;/sya/&#39;

# instantiate the parser
parser = MyParser.ClParser()

# instantiate the page
page = MyHttp.Page(subdomain + &#39;.craigslist.org&#39;, path)

# get the page and feed it to the parser
parser.feed(page.get_as_string())

# display the results
print(&#39;################\n    Results:\n################\n&#39;, parser.results)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There you have it. MyScrape.py is the entry point to our application. It allows the user to set a subdomain and a path when calling the script. It brings the MyHttp and MyParser modules together. and it displays results to the screen. To use this application, enter the following command in your shell or command prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python3 MyScrape.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;or&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python3 MyScrape.py sierravista /ata/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can download the entire source &lt;a href=&#34;http://quakkels.com/files/MyScrape.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;improving-the-scrape&#34;&gt;Improving the Scrape&lt;/h2&gt;

&lt;p&gt;Feel free to take this code and experiment with it. Expand on it. Make it spider sub pages. Make it return a list of dictionaries instead of a string. Save the data in a sqlite database, or to a text file. Maybe make it into a web service. Do whatever you want with it. (Keep it legal.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learn Insertion Sort with Video Game Discs</title>
      <link>http://quakkels.com/posts/learn-insertion-sort-with-video-game-discs/</link>
      <pubDate>Sat, 09 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/learn-insertion-sort-with-video-game-discs/</guid>
      <description>

&lt;p&gt;I think you could say I have an average number of video game discs. It&amp;rsquo;s not a huge number of games, but it is enough that it can be difficult to find a particular game if they&amp;rsquo;re not organized in a predictable way.&lt;/p&gt;

&lt;p&gt;Enter insertion sort. Insertion sort is in the same family as the bubble sort in that its worst case complexity is O(n2). But in practice, it is usually a faster sort.&lt;/p&gt;

&lt;p&gt;So we start with a few game discs that we want to sort. To simplify this demonstration each game is numbered.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/insertionSort01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The sort begins by comparing the first two discs with each other, and ordering them appropriately. We see that the 4 is moved to before the 27.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/insertionSort02.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, the insertion sort looks remarkably similar to the bubble sort. the interesting part will be shown soon. First we move onto the next game disc. The 42 gets compared to the 27 and stays where it is because it is already in order relative to the 27.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/insertionSort03.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now comes the interesting part. The 21 is goes before the 42 and before the 27. So our insertion sort technique inserts the 21 into the correct spot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/insertionSort04.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then we get to the last game disc. An 8. This gets inserted after the 4 and before the 21.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/insertionSort05.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now the entire list of game discs has been sorted. We see the process working, but now we need to translate this process into a computer algorithm.&lt;/p&gt;

&lt;h2 id=&#34;insertion-sort-example-in-javascript&#34;&gt;Insertion Sort Example in JavaScript&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;// set up the array with random values
var sortMe = new Array();
var arrayLength = 5;
var i = 0;
for(; i &amp;lt; arrayLength; i++) {
    sortMe[i] = Math.floor((Math.random()*20)+1);
}

var logText = &amp;quot;&amp;quot;;
i = 0;
for(; i &amp;lt; arrayLength; i++) {
    logText += sortMe[i] + &amp;quot;, &amp;quot;;
}
console.log(&amp;quot;Starting Values: \t&amp;quot; + logText);

// begin insertion sort
i = 1;
var j, temp, k;

for(; i &amp;lt; arrayLength; i++) {
    temp = sortMe[i];
    j = i;
    while(j &amp;gt; 0 &amp;amp;&amp;amp; sortMe[j-1] &amp;gt; temp) {
        sortMe[j] = sortMe[j-1];
        j--;
    }
    sortMe[j] = temp;

    logText = &amp;quot;New Order:\t\t&amp;quot;;
    k=0;
    for(; k &amp;lt; arrayLength; k++) {
        logText += sortMe[k] + &amp;quot;, &amp;quot;;
    }
    console.log(logText);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a link to the &lt;a href=&#34;http://quakkels.com/files/InsertionSort.html&#34;&gt;working example&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learn Bubble Sort with Playing Cards</title>
      <link>http://quakkels.com/posts/learn-bubble-sort-with-playing-cards/</link>
      <pubDate>Tue, 22 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/learn-bubble-sort-with-playing-cards/</guid>
      <description>

&lt;p&gt;Let&amp;rsquo;s say you have an unordered list of numbers and you wanted to put them in order from lowest to highest value. How would you do that? You&amp;rsquo;re probably thinking that you would just look at all the numbers, find the lowest number and put it at the beginning of your list. Then you would find the next largest number and put it in the second spot in the list, and so on until you&amp;rsquo;ve ordered the entire list of numbers. It&amp;rsquo;s simple, basic, and not very exciting. Now, let&amp;rsquo;s say that instead of ordering the list yourself, you decide it&amp;rsquo;s a better idea to write a computer program to order the list for you. Now you don&amp;rsquo;t have to deal with moving the numbers around, you just need to tell your program how to move the numbers, and then let the program handle any list you give it.&lt;/p&gt;

&lt;p&gt;So how do you write your program to order the list? One of the most basic techniques for putting lists in order is the Bubble Sort algorithm. To understand how a Bubble Sort works, let&amp;rsquo;s use it on a few random playing cards to get them in order. after we walk through the algorithm with cards, we&amp;rsquo;ll take a look at a Bubble Sort implemented in code.&lt;/p&gt;

&lt;h2 id=&#34;let-s-sort-some-playing-cards&#34;&gt;Let&amp;rsquo;s Sort Some Playing Cards&lt;/h2&gt;

&lt;p&gt;The image below shows we have five cards (with unknown values) that we need to put in order using a Bubble Sort.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/bubbleSort01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The first step in a Bubble Sort is to compare the first two values with each other. Here we see the first two values are an Ace (1) and a Queen (12). They are in order, so we move on to the next card.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/bubbleSort02.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now we compare the Queen with nine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/bubbleSort03.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Since the Queen is a larger value, it trades places with the nine, as seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/bubbleSort04.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now we move on to the next card value. Since the Queen is a larger value than the two, they trade places.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/bubbleSort05.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/bubbleSort06.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now, we move on to the last card in the list. The Ace is less than the Queen, so once again the cards trade places.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/bubbleSort07.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;http://quakkels.com/images/bubbleSort08.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;http://quakkels.com/images/bubbleSort09.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, each card in this list has been compared to a neighboring card at least once. The result is that the largest value among these five cards has &amp;ldquo;bubbled&amp;rdquo; to the end of the list. But, we&amp;rsquo;re not done yet. After only one pass through we can only be sure that the last card is in the correct position. So let&amp;rsquo;s run the the cards again.&lt;/p&gt;

&lt;p&gt;Starting at the beginning with the first two cards, Ace is compared with 9. Since Ace is less than nine, there is no change in position.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/bubbleSort10.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The next card, the two of hearts, is less than nine. So they trade places.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/bubbleSort11.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;http://quakkels.com/images/bubbleSort12.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next, nine is compared with an Ace. Since nine is greater than the Ace, they switch positions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/bubbleSort13.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;http://quakkels.com/images/bubbleSort14.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;http://quakkels.com/images/bubbleSort15.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With this second pass, we can now be sure that the final two cards are correct. You should be starting to see a pattern here. We continue the process until all the cards are in order.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/bubbleSort16.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;http://quakkels.com/images/bubbleSort17.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;http://quakkels.com/images/bubbleSort18.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;http://quakkels.com/images/bubbleSort19.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;http://quakkels.com/images/bubbleSort20.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;implement-bubble-sort-in-javascript&#34;&gt;Implement Bubble Sort in JavaScript&lt;/h2&gt;

&lt;p&gt;Now that we understand the Bubble Sort process from the playing card demonstration, let&amp;rsquo;s implement it. Let&amp;rsquo;s use JavaScript for a simple example.&lt;/p&gt;

&lt;p&gt;The script begins by creating an array that holds 5 values, and assigning random numbers to the array. Once the array is created and populated, we print the array and values to the console.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var sortMe = new Array();
var arrayLength = 5;
var i = 0;
for(; i &amp;lt; arrayLength; i++) {
    sortMe[i] = Math.floor((Math.random()*20)+1);
}

var logText = &amp;quot;&amp;quot;;
i = 0;
for(; i &amp;lt; arrayLength; i++) {
    logText += sortMe[i] + &amp;quot;, &amp;quot;;
}
console.log(&amp;quot;Starting Values: \t&amp;quot; + logText);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to sort the array. The sort is done by using two loops and an if statement.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;i = 0;
var didSwap = true;
var temp;
for(; i &amp;lt; arrayLength &amp;amp;&amp;amp; didSwap; i++) {
    didSwap = false;
    var j = 0;
    for(; j &amp;lt; (arrayLength - 1); j++) {
        if(sortMe[j] &amp;gt; sortMe[j+1]) {
            temp = sortMe[j];
            sortMe[j] = sortMe[j+1];
            sortMe[j+1] = temp;
            didSwap = true;
        }    
    }

    logText = &amp;quot;New Order:\t\t&amp;quot;;
    k=0;
    for(; k &amp;lt; arrayLength; k++) {
        logText += sortMe[k] + &amp;quot;, &amp;quot;;
    }
    console.log(logText);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When this script is executed, it will log to the console the original unmodified array, then it will print the modified array after each pass. Here are the log messages I got when I ran this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Starting Values:    7, 9, 2, 16, 4,
New Order:      7, 2, 9, 4, 16,
New Order:      2, 7, 4, 9, 16,
New Order:      2, 4, 7, 9, 16,
New Order:      2, 4, 7, 9, 16, 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the first pass through the starting values put 16 at the end of the list (just like the playing cards example). Then each pass after that &amp;ldquo;bubbled&amp;rdquo; the next highest number up. &lt;a href=&#34;http://quakkels.com/files/BubbleSort.html&#34;&gt;Here&lt;/a&gt; is the complete example.&lt;/p&gt;

&lt;h2 id=&#34;problems-with-bubble-sort&#34;&gt;Problems with Bubble Sort&lt;/h2&gt;

&lt;p&gt;Great. We now have a way to get our computer program to put lists of numbers in order for us. It&amp;rsquo;s automatic and it works. However, there are problems with Bubble Sort. That problem is that when confronted with a worst case scenario (long, long lists with lots of numbers that need to be moved) it is slow! More numbers in the list and more numbers that need to be moved increase the complexity of the Bubble Sort. The more complex it gets, the slower it gets. Now, this is true for any sorting algorithm. The problem with the Bubble Sort is that it gets very complex very quickly.&lt;/p&gt;

&lt;p&gt;To describe the worst case complexity for an algorithm, computer science generally uses something called Big Oh Notation. The notation for the worst case Bubble Sort is O(n2). I&amp;rsquo;m not going to go into Big Oh Notation in detail here. If you&amp;rsquo;re interested in learning more about it, this &lt;a href=&#34;http://stackoverflow.com/questions/487258/what-is-a-plain-english-explanation-of-big-o-notation/487278#487278&#34;&gt;StackOverflow.com answer&lt;/a&gt; does a great job of explaing it in plain language. For the purposes if this article, it&amp;rsquo;s good to understand that Bubble Sort gets complex (and therefore slow) very quickly. There are other algorithms that do a better job of sorting numbers, but the Bubble Sort is one that is often taught to computer science students first.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s talk to a SQLite database with Python</title>
      <link>http://quakkels.com/posts/lets-talk-to-a-sqlite-database-with-python/</link>
      <pubDate>Sun, 20 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://quakkels.com/posts/lets-talk-to-a-sqlite-database-with-python/</guid>
      <description>

&lt;p&gt;As I write this, it&amp;rsquo;s the weekend. My wonderful wife brought home some amazing Jet Fuel XBold Dark Roast Coffee that is sure to keep me wired for the next several hours. Now what should I do? Let&amp;rsquo;s explore Python a little more by using it to talk to a database.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/JetFuel.png&#34; alt=&#34;Turning caffeine into code!&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re a long way from my bread and butter. My goto technologies for database interaction are .NET, C# and Entity Framework CodeFirst with SQL Server &lt;sup&gt;2005&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2008&lt;/sub&gt;. These technologies lend themselves to enterprise level web and application development. They require a fair amount of software licenses and infrastructure to get rolling. In contrast, SQLite (as you may have guessed) is a very lightweight implementation of a relational database. It is completely self contained. There is no SQLite server or configuration requirements. You just make a database and boom! You&amp;rsquo;re in business. Because of this light footprint and its ease of use, it is a very common database to use in mobile applications.&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s create a SQLite database file. I&amp;rsquo;m going to call my database &amp;ldquo;Blog.sqlite&amp;rdquo;. You can do this from the command line with Python, or if you prefer a graphical interface, you can use a snappy little Firefox add-on called &lt;a href=&#34;https://addons.mozilla.org/en-us/firefox/addon/sqlite-manager/&#34;&gt;SQLite Manager&lt;/a&gt;. It runs inside Firefox and offers a simple interface for interacting with SQLite databases. And, since it runs in Firefox, it works on any platform that runs Firefox (E.G. MacOS, Windows, Linux).&lt;/p&gt;

&lt;p&gt;Once we have our database created, then we need to make a table. Once again, we can do this using straight SQL and Python from the command line, but I prefer to use the SQLite Manager add-on in Firefox.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://quakkels.com/images/CreatePostsTableResized.png&#34; alt=&#34;Screenshot of creating a table with SQLite Manager.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note that the Id field is an auto incremented integer value and a primary key.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s dive into code. What will this application do? Well, since this project is in the spirit of exploration, the application we&amp;rsquo;re going to build won&amp;rsquo;t be very useful. Instead it will have an academic focus. Let&amp;rsquo;s just perform basic CRUD operations (Create, Read, Update, Delete) and then exit. We won&amp;rsquo;t worry about user interaction or GUI or web. This is going to just be a console app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;This should go without saying, but this won&amp;rsquo;t work without installing Python first. I&amp;rsquo;m using Python3.2.3. Don&amp;rsquo;t worry about downloading SQLite. There is no SQLite server, remember? If you have Python, you can use SQLite.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the same folder as the Blog.sqlite database, create your Python file using your favorite text editor. I called mine sqliteConnect.py. Once you have your file, you can run it from the command line by first browsing to the folder where you saved the file, then just enter the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python3 sqliteConnect.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That will run the Python script. Though, nothing will happen until we put some code in there.&lt;/p&gt;

&lt;h2 id=&#34;connecting-to-your-sqlite-database-from-python&#34;&gt;Connecting to Your SQLite Database from Python&lt;/h2&gt;

&lt;p&gt;To perform CRUD functionality, first we need to establish a connection with the database, and then create what&amp;rsquo;s known as a cursor which will allow us to execute commands.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import sqlite3

conn = sqlite3.connect(&#39;Blog.sqlite&#39;)
cursor = conn.cursor()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;creating-a-record&#34;&gt;Creating a Record&lt;/h2&gt;

&lt;p&gt;Now that we have our open connection and our cursor, we can insert data into the Posts table.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cursor.execute(&#39;insert into Posts (Headline, Body) values (?, ?)&#39;, (&#39;This is my Headline&#39;, &#39;This is the body of my blog post.&#39;))
firstPostId = cursor.lastrowid

cursor.execute(&#39;insert into Posts (Headline, Body) values (?, ?)&#39;, (&#39;Jet Fuel XBold Coffee&#39;, &#39;Jet Fuel XBold Dark Roast Coffee will make you code like a madman.&#39;))
conn.commit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we call &lt;code&gt;cursor.execute()&lt;/code&gt; and pass it two parameters. A SQL command with placeholders for the data (the question marks), and a sequence containing the data to be inserted. Since we are hard-coding the insert, we could have just placed our data directly into the SQL. But in the real world, we could be inserting user generated input. In that case, we would want to use this parameterized technique to keep the SQL query safe and keep our database safe from SQL Injection style hacking attempts.&lt;/p&gt;

&lt;p&gt;We have explicitly inserted the data for Headline and Body while ignoring the value for the Id field. This is purposeful because when we created the Posts table, we defined Id to be an auto-incrementing integer value. This is good because it saves us from having to generate a unique identifier ourselves. However, we are going to be editing this same record later in our application. In order to be able to get the same record, we need to know the auto generated Id value.&lt;/p&gt;

&lt;p&gt;The last inserted row id is stored in &lt;code&gt;cursor.lastrowid&lt;/code&gt;. So, when our insert is complete, if we want to grab the new Id value, we just need to assign &lt;code&gt;cursor.lastrowid&lt;/code&gt; to our &lt;code&gt;firstPostId&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s worth noting here, calling &lt;code&gt;cursor.execute()&lt;/code&gt; will execute the command on the database. But, we need to commit any changes by calling conn.commit(). If we don&amp;rsquo;t call conn.commit() before the connection is closed, then our changes will be undone as if they never happened.&lt;/p&gt;

&lt;h2 id=&#34;reading-our-new-records&#34;&gt;Reading Our New Records&lt;/h2&gt;

&lt;p&gt;Now that we have some data inserted into the database table, let&amp;rsquo;s read it out.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cursor.execute(&#39;select * from Posts&#39;)

print(&#39;Current records: &#39;)
for row in cursor.fetchall():
    print(&#39;\t&#39;, row)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are using the same &lt;code&gt;cursor.execute()&lt;/code&gt; method to run a select query on the table. Then we can print each row by using &lt;code&gt;cursor.fetchall()&lt;/code&gt; in a for loop.&lt;/p&gt;

&lt;h2 id=&#34;update-that-first-record&#34;&gt;Update That First Record&lt;/h2&gt;

&lt;p&gt;Now, let&amp;rsquo;s make some changes to the record we inserted first. This is when the &lt;code&gt;firstPostId&lt;/code&gt; comes in handy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cursor.execute(&#39;update Posts set Headline=?, Body=? where Id=?&#39;, (&#39;This is my NEW Headline&#39;, &#39;This is the NEW body of my blog post.&#39;, firstPostId))
conn.commit()

print(&#39;Records after update: &#39;)
cursor.execute(&#39;select * from Posts&#39;)
for row in cursor.fetchall():
    print(&#39;\t&#39;, row)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we print our read results, we can see that the first record has been updated with new data.&lt;/p&gt;

&lt;h2 id=&#34;delete-everything&#34;&gt;Delete Everything&lt;/h2&gt;

&lt;p&gt;You don&amp;rsquo;t have to delete everything, but that&amp;rsquo;s what I&amp;rsquo;m going to do.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cursor.execute(&#39;delete from Posts&#39;)
conn.commit()

print(&#39;Records after delete: &#39;)
cursor.execute(&#39;select * from Posts&#39;)
for row in cursor.fetchall():
    print(&#39;\t&#39;, row)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, when we print our query results, we see nothing.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up-closing-down&#34;&gt;Wrapping Up, Closing Down&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cursor.close()
conn.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we&amp;rsquo;re done with our cursor and connection, we can close them down.&lt;/p&gt;

&lt;h2 id=&#34;complete-code&#34;&gt;Complete Code&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;import sqlite3

conn = sqlite3.connect(&#39;Blog.sqlite&#39;)
cursor = conn.cursor()

# (C)reate a new blog post
cursor.execute(&#39;insert into Posts (Headline, Body) values (?, ?)&#39;, (&#39;This is my Headline&#39;, &#39;This is the body of my blog post.&#39;))
firstPostId = cursor.lastrowid

cursor.execute(&#39;insert into Posts (Headline, Body) values (?, ?)&#39;, (&#39;Jet Fuel XBold Coffee&#39;, &#39;Jet Fuel XBold Dark Roast Coffee will make you code like a madman.&#39;))
conn.commit()

# (R)ead our new posts
cursor.execute(&#39;select * from Posts&#39;)

print(&#39;Current records: &#39;)
for row in cursor.fetchall():
    print(&#39;\t&#39;, row)

# (U)pdate the first post
cursor.execute(&#39;update Posts set Headline=?, Body=? where Id=?&#39;, (&#39;This is my NEW Headline&#39;, &#39;This is the NEW body of my blog post.&#39;, firstPostId))
conn.commit()

print(&#39;Records after update: &#39;)
cursor.execute(&#39;select * from Posts&#39;)
for row in cursor.fetchall():
    print(&#39;\t&#39;, row)

# (D)elete all the records
cursor.execute(&#39;delete from Posts&#39;)
conn.commit()

print(&#39;Records after delete: &#39;)
cursor.execute(&#39;select * from Posts&#39;)
for row in cursor.fetchall():
    print(&#39;\t&#39;, row)

cursor.close()
conn.close()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>